// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LocalBridgePB.proto

#ifndef PROTOBUF_LocalBridgePB_2eproto__INCLUDED
#define PROTOBUF_LocalBridgePB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace cocos2dx {
namespace lua {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LocalBridgePB_2eproto();
void protobuf_AssignDesc_LocalBridgePB_2eproto();
void protobuf_ShutdownFile_LocalBridgePB_2eproto();

class FrontiaUser;
class FileInfoResult;
class login_Request;
class login_Response;
class logout_Request;
class logout_Response;
class isLogin_Request;
class isLogin_Response;
class makeDir_Request;
class makeDir_Response;
class deleteFile_Request;
class deleteFile_Response;
class uploadFile_Request;
class uploadFile_Response;
class stopTransferring_Request;
class stopTransferring_Response;
class downloadFile_Request;
class downloadFile_Response;
class downloadFileFromStream_Request;
class downloadFileFromStream_Response;
class list_Request;
class list_Response;
class imageStream_Request;
class imageStream_Response;
class audioStream_Request;
class audioStream_Response;
class videoStream_Request;
class videoStream_Response;
class docStream_Request;
class docStream_Response;
class quota_Request;
class quota_Response;
class thumbnail_Request;
class thumbnail_Response;
class vibrate_Request;
class vibrate_Response;
class vibrateWithPattern_Request;
class vibrateWithPattern_Response;
class cancelVibrate_Request;
class cancelVibrate_Response;
class AudioManager_getStreamVolume_Request;
class AudioManager_getStreamVolume_Response;
class AudioManager_setStreamVolume_Request;
class AudioManager_setStreamVolume_Response;
class AudioManager_getStreamMaxVolume_Request;
class AudioManager_getStreamMaxVolume_Response;
class AudioManager_setStreamMute_Request;
class AudioManager_setStreamMute_Response;
class openURL_Request;
class openURL_Response;
class getMemoryInfo_Request;
class getMemoryInfo_Response;

// ===================================================================

class FrontiaUser : public ::google::protobuf::Message {
 public:
  FrontiaUser();
  virtual ~FrontiaUser();

  FrontiaUser(const FrontiaUser& from);

  inline FrontiaUser& operator=(const FrontiaUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrontiaUser& default_instance();

  void Swap(FrontiaUser* other);

  // implements Message ----------------------------------------------

  FrontiaUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrontiaUser& from);
  void MergeFrom(const FrontiaUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string accessToken = 1;
  inline bool has_accesstoken() const;
  inline void clear_accesstoken();
  static const int kAccessTokenFieldNumber = 1;
  inline const ::std::string& accesstoken() const;
  inline void set_accesstoken(const ::std::string& value);
  inline void set_accesstoken(const char* value);
  inline void set_accesstoken(const char* value, size_t size);
  inline ::std::string* mutable_accesstoken();
  inline ::std::string* release_accesstoken();
  inline void set_allocated_accesstoken(::std::string* accesstoken);

  // optional string baiduAccessToken = 2;
  inline bool has_baiduaccesstoken() const;
  inline void clear_baiduaccesstoken();
  static const int kBaiduAccessTokenFieldNumber = 2;
  inline const ::std::string& baiduaccesstoken() const;
  inline void set_baiduaccesstoken(const ::std::string& value);
  inline void set_baiduaccesstoken(const char* value);
  inline void set_baiduaccesstoken(const char* value, size_t size);
  inline ::std::string* mutable_baiduaccesstoken();
  inline ::std::string* release_baiduaccesstoken();
  inline void set_allocated_baiduaccesstoken(::std::string* baiduaccesstoken);

  // optional int64 baiduExpiresIn = 3;
  inline bool has_baiduexpiresin() const;
  inline void clear_baiduexpiresin();
  static const int kBaiduExpiresInFieldNumber = 3;
  inline ::google::protobuf::int64 baiduexpiresin() const;
  inline void set_baiduexpiresin(::google::protobuf::int64 value);

  // optional int64 expiresIn = 4;
  inline bool has_expiresin() const;
  inline void clear_expiresin();
  static const int kExpiresInFieldNumber = 4;
  inline ::google::protobuf::int64 expiresin() const;
  inline void set_expiresin(::google::protobuf::int64 value);

  // optional string id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string mediaUserId = 6;
  inline bool has_mediauserid() const;
  inline void clear_mediauserid();
  static const int kMediaUserIdFieldNumber = 6;
  inline const ::std::string& mediauserid() const;
  inline void set_mediauserid(const ::std::string& value);
  inline void set_mediauserid(const char* value);
  inline void set_mediauserid(const char* value, size_t size);
  inline ::std::string* mutable_mediauserid();
  inline ::std::string* release_mediauserid();
  inline void set_allocated_mediauserid(::std::string* mediauserid);

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string platform = 8;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 8;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.FrontiaUser)
 private:
  inline void set_has_accesstoken();
  inline void clear_has_accesstoken();
  inline void set_has_baiduaccesstoken();
  inline void clear_has_baiduaccesstoken();
  inline void set_has_baiduexpiresin();
  inline void clear_has_baiduexpiresin();
  inline void set_has_expiresin();
  inline void clear_has_expiresin();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mediauserid();
  inline void clear_has_mediauserid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_platform();
  inline void clear_has_platform();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* accesstoken_;
  ::std::string* baiduaccesstoken_;
  ::google::protobuf::int64 baiduexpiresin_;
  ::google::protobuf::int64 expiresin_;
  ::std::string* id_;
  ::std::string* mediauserid_;
  ::std::string* name_;
  ::std::string* platform_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static FrontiaUser* default_instance_;
};
// -------------------------------------------------------------------

class FileInfoResult : public ::google::protobuf::Message {
 public:
  FileInfoResult();
  virtual ~FileInfoResult();

  FileInfoResult(const FileInfoResult& from);

  inline FileInfoResult& operator=(const FileInfoResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileInfoResult& default_instance();

  void Swap(FileInfoResult* other);

  // implements Message ----------------------------------------------

  FileInfoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileInfoResult& from);
  void MergeFrom(const FileInfoResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 createTime = 1;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 1;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string md5 = 3;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 3;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // optional int64 modifyTime = 4;
  inline bool has_modifytime() const;
  inline void clear_modifytime();
  static const int kModifyTimeFieldNumber = 4;
  inline ::google::protobuf::int64 modifytime() const;
  inline void set_modifytime(::google::protobuf::int64 value);

  // optional string path = 5;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 5;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional int64 size = 6;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 6;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);

  // optional bool hasSubFolder = 7;
  inline bool has_hassubfolder() const;
  inline void clear_hassubfolder();
  static const int kHasSubFolderFieldNumber = 7;
  inline bool hassubfolder() const;
  inline void set_hassubfolder(bool value);

  // optional bool isDir = 8;
  inline bool has_isdir() const;
  inline void clear_isdir();
  static const int kIsDirFieldNumber = 8;
  inline bool isdir() const;
  inline void set_isdir(bool value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.FileInfoResult)
 private:
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_md5();
  inline void clear_has_md5();
  inline void set_has_modifytime();
  inline void clear_has_modifytime();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_hassubfolder();
  inline void clear_has_hassubfolder();
  inline void set_has_isdir();
  inline void clear_has_isdir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 id_;
  ::std::string* md5_;
  ::google::protobuf::int64 modifytime_;
  ::std::string* path_;
  ::google::protobuf::int64 size_;
  bool hassubfolder_;
  bool isdir_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static FileInfoResult* default_instance_;
};
// -------------------------------------------------------------------

class login_Request : public ::google::protobuf::Message {
 public:
  login_Request();
  virtual ~login_Request();

  login_Request(const login_Request& from);

  inline login_Request& operator=(const login_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_Request& default_instance();

  void Swap(login_Request* other);

  // implements Message ----------------------------------------------

  login_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login_Request& from);
  void MergeFrom(const login_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mediaType = 1 [default = "BAIDU"];
  inline bool has_mediatype() const;
  inline void clear_mediatype();
  static const int kMediaTypeFieldNumber = 1;
  inline const ::std::string& mediatype() const;
  inline void set_mediatype(const ::std::string& value);
  inline void set_mediatype(const char* value);
  inline void set_mediatype(const char* value, size_t size);
  inline ::std::string* mutable_mediatype();
  inline ::std::string* release_mediatype();
  inline void set_allocated_mediatype(::std::string* mediatype);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.login_Request)
 private:
  inline void set_has_mediatype();
  inline void clear_has_mediatype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_mediatype_;
  ::std::string* mediatype_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static login_Request* default_instance_;
};
// -------------------------------------------------------------------

class login_Response : public ::google::protobuf::Message {
 public:
  login_Response();
  virtual ~login_Response();

  login_Response(const login_Response& from);

  inline login_Response& operator=(const login_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_Response& default_instance();

  void Swap(login_Response* other);

  // implements Message ----------------------------------------------

  login_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login_Response& from);
  void MergeFrom(const login_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // optional .org.cocos2dx.lua.FrontiaUser frontiaUser = 101;
  inline bool has_frontiauser() const;
  inline void clear_frontiauser();
  static const int kFrontiaUserFieldNumber = 101;
  inline const ::org::cocos2dx::lua::FrontiaUser& frontiauser() const;
  inline ::org::cocos2dx::lua::FrontiaUser* mutable_frontiauser();
  inline ::org::cocos2dx::lua::FrontiaUser* release_frontiauser();
  inline void set_allocated_frontiauser(::org::cocos2dx::lua::FrontiaUser* frontiauser);

  // optional int32 errCode = 201;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 201;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 202;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 202;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.login_Response)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_frontiauser();
  inline void clear_has_frontiauser();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::org::cocos2dx::lua::FrontiaUser* frontiauser_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::int32 errcode_;
  ::std::string* errmsg_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static login_Response* default_instance_;
};
// -------------------------------------------------------------------

class logout_Request : public ::google::protobuf::Message {
 public:
  logout_Request();
  virtual ~logout_Request();

  logout_Request(const logout_Request& from);

  inline logout_Request& operator=(const logout_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const logout_Request& default_instance();

  void Swap(logout_Request* other);

  // implements Message ----------------------------------------------

  logout_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const logout_Request& from);
  void MergeFrom(const logout_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mediaType = 1 [default = "BAIDU"];
  inline bool has_mediatype() const;
  inline void clear_mediatype();
  static const int kMediaTypeFieldNumber = 1;
  inline const ::std::string& mediatype() const;
  inline void set_mediatype(const ::std::string& value);
  inline void set_mediatype(const char* value);
  inline void set_mediatype(const char* value, size_t size);
  inline ::std::string* mutable_mediatype();
  inline ::std::string* release_mediatype();
  inline void set_allocated_mediatype(::std::string* mediatype);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.logout_Request)
 private:
  inline void set_has_mediatype();
  inline void clear_has_mediatype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_mediatype_;
  ::std::string* mediatype_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static logout_Request* default_instance_;
};
// -------------------------------------------------------------------

class logout_Response : public ::google::protobuf::Message {
 public:
  logout_Response();
  virtual ~logout_Response();

  logout_Response(const logout_Response& from);

  inline logout_Response& operator=(const logout_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const logout_Response& default_instance();

  void Swap(logout_Response* other);

  // implements Message ----------------------------------------------

  logout_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const logout_Response& from);
  void MergeFrom(const logout_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline ::google::protobuf::int32 issuccess() const;
  inline void set_issuccess(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.logout_Response)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 issuccess_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static logout_Response* default_instance_;
};
// -------------------------------------------------------------------

class isLogin_Request : public ::google::protobuf::Message {
 public:
  isLogin_Request();
  virtual ~isLogin_Request();

  isLogin_Request(const isLogin_Request& from);

  inline isLogin_Request& operator=(const isLogin_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const isLogin_Request& default_instance();

  void Swap(isLogin_Request* other);

  // implements Message ----------------------------------------------

  isLogin_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const isLogin_Request& from);
  void MergeFrom(const isLogin_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mediaType = 1 [default = "BAIDU"];
  inline bool has_mediatype() const;
  inline void clear_mediatype();
  static const int kMediaTypeFieldNumber = 1;
  inline const ::std::string& mediatype() const;
  inline void set_mediatype(const ::std::string& value);
  inline void set_mediatype(const char* value);
  inline void set_mediatype(const char* value, size_t size);
  inline ::std::string* mutable_mediatype();
  inline ::std::string* release_mediatype();
  inline void set_allocated_mediatype(::std::string* mediatype);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.isLogin_Request)
 private:
  inline void set_has_mediatype();
  inline void clear_has_mediatype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_mediatype_;
  ::std::string* mediatype_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static isLogin_Request* default_instance_;
};
// -------------------------------------------------------------------

class isLogin_Response : public ::google::protobuf::Message {
 public:
  isLogin_Response();
  virtual ~isLogin_Response();

  isLogin_Response(const isLogin_Response& from);

  inline isLogin_Response& operator=(const isLogin_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const isLogin_Response& default_instance();

  void Swap(isLogin_Response* other);

  // implements Message ----------------------------------------------

  isLogin_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const isLogin_Response& from);
  void MergeFrom(const isLogin_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline ::google::protobuf::int32 issuccess() const;
  inline void set_issuccess(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.isLogin_Response)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 issuccess_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static isLogin_Response* default_instance_;
};
// -------------------------------------------------------------------

class makeDir_Request : public ::google::protobuf::Message {
 public:
  makeDir_Request();
  virtual ~makeDir_Request();

  makeDir_Request(const makeDir_Request& from);

  inline makeDir_Request& operator=(const makeDir_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const makeDir_Request& default_instance();

  void Swap(makeDir_Request* other);

  // implements Message ----------------------------------------------

  makeDir_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const makeDir_Request& from);
  void MergeFrom(const makeDir_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string dirName = 1;
  inline bool has_dirname() const;
  inline void clear_dirname();
  static const int kDirNameFieldNumber = 1;
  inline const ::std::string& dirname() const;
  inline void set_dirname(const ::std::string& value);
  inline void set_dirname(const char* value);
  inline void set_dirname(const char* value, size_t size);
  inline ::std::string* mutable_dirname();
  inline ::std::string* release_dirname();
  inline void set_allocated_dirname(::std::string* dirname);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.makeDir_Request)
 private:
  inline void set_has_dirname();
  inline void clear_has_dirname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dirname_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static makeDir_Request* default_instance_;
};
// -------------------------------------------------------------------

class makeDir_Response : public ::google::protobuf::Message {
 public:
  makeDir_Response();
  virtual ~makeDir_Response();

  makeDir_Response(const makeDir_Response& from);

  inline makeDir_Response& operator=(const makeDir_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const makeDir_Response& default_instance();

  void Swap(makeDir_Response* other);

  // implements Message ----------------------------------------------

  makeDir_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const makeDir_Response& from);
  void MergeFrom(const makeDir_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // optional .org.cocos2dx.lua.FileInfoResult fileInfoResult = 101;
  inline bool has_fileinforesult() const;
  inline void clear_fileinforesult();
  static const int kFileInfoResultFieldNumber = 101;
  inline const ::org::cocos2dx::lua::FileInfoResult& fileinforesult() const;
  inline ::org::cocos2dx::lua::FileInfoResult* mutable_fileinforesult();
  inline ::org::cocos2dx::lua::FileInfoResult* release_fileinforesult();
  inline void set_allocated_fileinforesult(::org::cocos2dx::lua::FileInfoResult* fileinforesult);

  // optional int32 errCode = 201;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 201;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 202;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 202;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.makeDir_Response)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_fileinforesult();
  inline void clear_has_fileinforesult();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::org::cocos2dx::lua::FileInfoResult* fileinforesult_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::int32 errcode_;
  ::std::string* errmsg_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static makeDir_Response* default_instance_;
};
// -------------------------------------------------------------------

class deleteFile_Request : public ::google::protobuf::Message {
 public:
  deleteFile_Request();
  virtual ~deleteFile_Request();

  deleteFile_Request(const deleteFile_Request& from);

  inline deleteFile_Request& operator=(const deleteFile_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const deleteFile_Request& default_instance();

  void Swap(deleteFile_Request* other);

  // implements Message ----------------------------------------------

  deleteFile_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const deleteFile_Request& from);
  void MergeFrom(const deleteFile_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string dirOrFileName = 1;
  inline bool has_dirorfilename() const;
  inline void clear_dirorfilename();
  static const int kDirOrFileNameFieldNumber = 1;
  inline const ::std::string& dirorfilename() const;
  inline void set_dirorfilename(const ::std::string& value);
  inline void set_dirorfilename(const char* value);
  inline void set_dirorfilename(const char* value, size_t size);
  inline ::std::string* mutable_dirorfilename();
  inline ::std::string* release_dirorfilename();
  inline void set_allocated_dirorfilename(::std::string* dirorfilename);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.deleteFile_Request)
 private:
  inline void set_has_dirorfilename();
  inline void clear_has_dirorfilename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dirorfilename_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static deleteFile_Request* default_instance_;
};
// -------------------------------------------------------------------

class deleteFile_Response : public ::google::protobuf::Message {
 public:
  deleteFile_Response();
  virtual ~deleteFile_Response();

  deleteFile_Response(const deleteFile_Response& from);

  inline deleteFile_Response& operator=(const deleteFile_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const deleteFile_Response& default_instance();

  void Swap(deleteFile_Response* other);

  // implements Message ----------------------------------------------

  deleteFile_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const deleteFile_Response& from);
  void MergeFrom(const deleteFile_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // optional string source = 101;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 101;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional int32 errCode = 201;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 201;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 202;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 202;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.deleteFile_Response)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::int32 errcode_;
  ::std::string* errmsg_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static deleteFile_Response* default_instance_;
};
// -------------------------------------------------------------------

class uploadFile_Request : public ::google::protobuf::Message {
 public:
  uploadFile_Request();
  virtual ~uploadFile_Request();

  uploadFile_Request(const uploadFile_Request& from);

  inline uploadFile_Request& operator=(const uploadFile_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const uploadFile_Request& default_instance();

  void Swap(uploadFile_Request* other);

  // implements Message ----------------------------------------------

  uploadFile_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const uploadFile_Request& from);
  void MergeFrom(const uploadFile_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fromFileName = 1;
  inline bool has_fromfilename() const;
  inline void clear_fromfilename();
  static const int kFromFileNameFieldNumber = 1;
  inline const ::std::string& fromfilename() const;
  inline void set_fromfilename(const ::std::string& value);
  inline void set_fromfilename(const char* value);
  inline void set_fromfilename(const char* value, size_t size);
  inline ::std::string* mutable_fromfilename();
  inline ::std::string* release_fromfilename();
  inline void set_allocated_fromfilename(::std::string* fromfilename);

  // required string toFileName = 2;
  inline bool has_tofilename() const;
  inline void clear_tofilename();
  static const int kToFileNameFieldNumber = 2;
  inline const ::std::string& tofilename() const;
  inline void set_tofilename(const ::std::string& value);
  inline void set_tofilename(const char* value);
  inline void set_tofilename(const char* value, size_t size);
  inline ::std::string* mutable_tofilename();
  inline ::std::string* release_tofilename();
  inline void set_allocated_tofilename(::std::string* tofilename);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.uploadFile_Request)
 private:
  inline void set_has_fromfilename();
  inline void clear_has_fromfilename();
  inline void set_has_tofilename();
  inline void clear_has_tofilename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fromfilename_;
  ::std::string* tofilename_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static uploadFile_Request* default_instance_;
};
// -------------------------------------------------------------------

class uploadFile_Response : public ::google::protobuf::Message {
 public:
  uploadFile_Response();
  virtual ~uploadFile_Response();

  uploadFile_Response(const uploadFile_Response& from);

  inline uploadFile_Response& operator=(const uploadFile_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const uploadFile_Response& default_instance();

  void Swap(uploadFile_Response* other);

  // implements Message ----------------------------------------------

  uploadFile_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const uploadFile_Response& from);
  void MergeFrom(const uploadFile_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // optional string onSuccess_source = 101;
  inline bool has_onsuccess_source() const;
  inline void clear_onsuccess_source();
  static const int kOnSuccessSourceFieldNumber = 101;
  inline const ::std::string& onsuccess_source() const;
  inline void set_onsuccess_source(const ::std::string& value);
  inline void set_onsuccess_source(const char* value);
  inline void set_onsuccess_source(const char* value, size_t size);
  inline ::std::string* mutable_onsuccess_source();
  inline ::std::string* release_onsuccess_source();
  inline void set_allocated_onsuccess_source(::std::string* onsuccess_source);

  // optional .org.cocos2dx.lua.FileInfoResult fileInfoResult = 102;
  inline bool has_fileinforesult() const;
  inline void clear_fileinforesult();
  static const int kFileInfoResultFieldNumber = 102;
  inline const ::org::cocos2dx::lua::FileInfoResult& fileinforesult() const;
  inline ::org::cocos2dx::lua::FileInfoResult* mutable_fileinforesult();
  inline ::org::cocos2dx::lua::FileInfoResult* release_fileinforesult();
  inline void set_allocated_fileinforesult(::org::cocos2dx::lua::FileInfoResult* fileinforesult);

  // optional string onFailure_source = 201;
  inline bool has_onfailure_source() const;
  inline void clear_onfailure_source();
  static const int kOnFailureSourceFieldNumber = 201;
  inline const ::std::string& onfailure_source() const;
  inline void set_onfailure_source(const ::std::string& value);
  inline void set_onfailure_source(const char* value);
  inline void set_onfailure_source(const char* value, size_t size);
  inline ::std::string* mutable_onfailure_source();
  inline ::std::string* release_onfailure_source();
  inline void set_allocated_onfailure_source(::std::string* onfailure_source);

  // optional int32 errCode = 202;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 202;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 203;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 203;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // optional string onProgress_source = 301;
  inline bool has_onprogress_source() const;
  inline void clear_onprogress_source();
  static const int kOnProgressSourceFieldNumber = 301;
  inline const ::std::string& onprogress_source() const;
  inline void set_onprogress_source(const ::std::string& value);
  inline void set_onprogress_source(const char* value);
  inline void set_onprogress_source(const char* value, size_t size);
  inline ::std::string* mutable_onprogress_source();
  inline ::std::string* release_onprogress_source();
  inline void set_allocated_onprogress_source(::std::string* onprogress_source);

  // optional int64 bytes = 302;
  inline bool has_bytes() const;
  inline void clear_bytes();
  static const int kBytesFieldNumber = 302;
  inline ::google::protobuf::int64 bytes() const;
  inline void set_bytes(::google::protobuf::int64 value);

  // optional int64 total = 303;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 303;
  inline ::google::protobuf::int64 total() const;
  inline void set_total(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.uploadFile_Response)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_onsuccess_source();
  inline void clear_has_onsuccess_source();
  inline void set_has_fileinforesult();
  inline void clear_has_fileinforesult();
  inline void set_has_onfailure_source();
  inline void clear_has_onfailure_source();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();
  inline void set_has_onprogress_source();
  inline void clear_has_onprogress_source();
  inline void set_has_bytes();
  inline void clear_has_bytes();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* onsuccess_source_;
  ::org::cocos2dx::lua::FileInfoResult* fileinforesult_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::int32 errcode_;
  ::std::string* onfailure_source_;
  ::std::string* errmsg_;
  ::std::string* onprogress_source_;
  ::google::protobuf::int64 bytes_;
  ::google::protobuf::int64 total_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static uploadFile_Response* default_instance_;
};
// -------------------------------------------------------------------

class stopTransferring_Request : public ::google::protobuf::Message {
 public:
  stopTransferring_Request();
  virtual ~stopTransferring_Request();

  stopTransferring_Request(const stopTransferring_Request& from);

  inline stopTransferring_Request& operator=(const stopTransferring_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stopTransferring_Request& default_instance();

  void Swap(stopTransferring_Request* other);

  // implements Message ----------------------------------------------

  stopTransferring_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stopTransferring_Request& from);
  void MergeFrom(const stopTransferring_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fromFileName = 1;
  inline bool has_fromfilename() const;
  inline void clear_fromfilename();
  static const int kFromFileNameFieldNumber = 1;
  inline const ::std::string& fromfilename() const;
  inline void set_fromfilename(const ::std::string& value);
  inline void set_fromfilename(const char* value);
  inline void set_fromfilename(const char* value, size_t size);
  inline ::std::string* mutable_fromfilename();
  inline ::std::string* release_fromfilename();
  inline void set_allocated_fromfilename(::std::string* fromfilename);

  // required string toFileName = 2;
  inline bool has_tofilename() const;
  inline void clear_tofilename();
  static const int kToFileNameFieldNumber = 2;
  inline const ::std::string& tofilename() const;
  inline void set_tofilename(const ::std::string& value);
  inline void set_tofilename(const char* value);
  inline void set_tofilename(const char* value, size_t size);
  inline ::std::string* mutable_tofilename();
  inline ::std::string* release_tofilename();
  inline void set_allocated_tofilename(::std::string* tofilename);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.stopTransferring_Request)
 private:
  inline void set_has_fromfilename();
  inline void clear_has_fromfilename();
  inline void set_has_tofilename();
  inline void clear_has_tofilename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fromfilename_;
  ::std::string* tofilename_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static stopTransferring_Request* default_instance_;
};
// -------------------------------------------------------------------

class stopTransferring_Response : public ::google::protobuf::Message {
 public:
  stopTransferring_Response();
  virtual ~stopTransferring_Response();

  stopTransferring_Response(const stopTransferring_Response& from);

  inline stopTransferring_Response& operator=(const stopTransferring_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stopTransferring_Response& default_instance();

  void Swap(stopTransferring_Response* other);

  // implements Message ----------------------------------------------

  stopTransferring_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stopTransferring_Response& from);
  void MergeFrom(const stopTransferring_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline ::google::protobuf::int32 issuccess() const;
  inline void set_issuccess(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.stopTransferring_Response)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 issuccess_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static stopTransferring_Response* default_instance_;
};
// -------------------------------------------------------------------

class downloadFile_Request : public ::google::protobuf::Message {
 public:
  downloadFile_Request();
  virtual ~downloadFile_Request();

  downloadFile_Request(const downloadFile_Request& from);

  inline downloadFile_Request& operator=(const downloadFile_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const downloadFile_Request& default_instance();

  void Swap(downloadFile_Request* other);

  // implements Message ----------------------------------------------

  downloadFile_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const downloadFile_Request& from);
  void MergeFrom(const downloadFile_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fromFileName = 1;
  inline bool has_fromfilename() const;
  inline void clear_fromfilename();
  static const int kFromFileNameFieldNumber = 1;
  inline const ::std::string& fromfilename() const;
  inline void set_fromfilename(const ::std::string& value);
  inline void set_fromfilename(const char* value);
  inline void set_fromfilename(const char* value, size_t size);
  inline ::std::string* mutable_fromfilename();
  inline ::std::string* release_fromfilename();
  inline void set_allocated_fromfilename(::std::string* fromfilename);

  // required string toFileName = 2;
  inline bool has_tofilename() const;
  inline void clear_tofilename();
  static const int kToFileNameFieldNumber = 2;
  inline const ::std::string& tofilename() const;
  inline void set_tofilename(const ::std::string& value);
  inline void set_tofilename(const char* value);
  inline void set_tofilename(const char* value, size_t size);
  inline ::std::string* mutable_tofilename();
  inline ::std::string* release_tofilename();
  inline void set_allocated_tofilename(::std::string* tofilename);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.downloadFile_Request)
 private:
  inline void set_has_fromfilename();
  inline void clear_has_fromfilename();
  inline void set_has_tofilename();
  inline void clear_has_tofilename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fromfilename_;
  ::std::string* tofilename_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static downloadFile_Request* default_instance_;
};
// -------------------------------------------------------------------

class downloadFile_Response : public ::google::protobuf::Message {
 public:
  downloadFile_Response();
  virtual ~downloadFile_Response();

  downloadFile_Response(const downloadFile_Response& from);

  inline downloadFile_Response& operator=(const downloadFile_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const downloadFile_Response& default_instance();

  void Swap(downloadFile_Response* other);

  // implements Message ----------------------------------------------

  downloadFile_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const downloadFile_Response& from);
  void MergeFrom(const downloadFile_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // optional string onSuccess_source = 101;
  inline bool has_onsuccess_source() const;
  inline void clear_onsuccess_source();
  static const int kOnSuccessSourceFieldNumber = 101;
  inline const ::std::string& onsuccess_source() const;
  inline void set_onsuccess_source(const ::std::string& value);
  inline void set_onsuccess_source(const char* value);
  inline void set_onsuccess_source(const char* value, size_t size);
  inline ::std::string* mutable_onsuccess_source();
  inline ::std::string* release_onsuccess_source();
  inline void set_allocated_onsuccess_source(::std::string* onsuccess_source);

  // optional string newTargetName = 102;
  inline bool has_newtargetname() const;
  inline void clear_newtargetname();
  static const int kNewTargetNameFieldNumber = 102;
  inline const ::std::string& newtargetname() const;
  inline void set_newtargetname(const ::std::string& value);
  inline void set_newtargetname(const char* value);
  inline void set_newtargetname(const char* value, size_t size);
  inline ::std::string* mutable_newtargetname();
  inline ::std::string* release_newtargetname();
  inline void set_allocated_newtargetname(::std::string* newtargetname);

  // optional string onFailure_source = 201;
  inline bool has_onfailure_source() const;
  inline void clear_onfailure_source();
  static const int kOnFailureSourceFieldNumber = 201;
  inline const ::std::string& onfailure_source() const;
  inline void set_onfailure_source(const ::std::string& value);
  inline void set_onfailure_source(const char* value);
  inline void set_onfailure_source(const char* value, size_t size);
  inline ::std::string* mutable_onfailure_source();
  inline ::std::string* release_onfailure_source();
  inline void set_allocated_onfailure_source(::std::string* onfailure_source);

  // optional int32 errCode = 202;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 202;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 203;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 203;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // optional string onProgress_source = 301;
  inline bool has_onprogress_source() const;
  inline void clear_onprogress_source();
  static const int kOnProgressSourceFieldNumber = 301;
  inline const ::std::string& onprogress_source() const;
  inline void set_onprogress_source(const ::std::string& value);
  inline void set_onprogress_source(const char* value);
  inline void set_onprogress_source(const char* value, size_t size);
  inline ::std::string* mutable_onprogress_source();
  inline ::std::string* release_onprogress_source();
  inline void set_allocated_onprogress_source(::std::string* onprogress_source);

  // optional int64 bytes = 302;
  inline bool has_bytes() const;
  inline void clear_bytes();
  static const int kBytesFieldNumber = 302;
  inline ::google::protobuf::int64 bytes() const;
  inline void set_bytes(::google::protobuf::int64 value);

  // optional int64 total = 303;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 303;
  inline ::google::protobuf::int64 total() const;
  inline void set_total(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.downloadFile_Response)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_onsuccess_source();
  inline void clear_has_onsuccess_source();
  inline void set_has_newtargetname();
  inline void clear_has_newtargetname();
  inline void set_has_onfailure_source();
  inline void clear_has_onfailure_source();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();
  inline void set_has_onprogress_source();
  inline void clear_has_onprogress_source();
  inline void set_has_bytes();
  inline void clear_has_bytes();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* onsuccess_source_;
  ::std::string* newtargetname_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::int32 errcode_;
  ::std::string* onfailure_source_;
  ::std::string* errmsg_;
  ::std::string* onprogress_source_;
  ::google::protobuf::int64 bytes_;
  ::google::protobuf::int64 total_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static downloadFile_Response* default_instance_;
};
// -------------------------------------------------------------------

class downloadFileFromStream_Request : public ::google::protobuf::Message {
 public:
  downloadFileFromStream_Request();
  virtual ~downloadFileFromStream_Request();

  downloadFileFromStream_Request(const downloadFileFromStream_Request& from);

  inline downloadFileFromStream_Request& operator=(const downloadFileFromStream_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const downloadFileFromStream_Request& default_instance();

  void Swap(downloadFileFromStream_Request* other);

  // implements Message ----------------------------------------------

  downloadFileFromStream_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const downloadFileFromStream_Request& from);
  void MergeFrom(const downloadFileFromStream_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fromFileName = 1;
  inline bool has_fromfilename() const;
  inline void clear_fromfilename();
  static const int kFromFileNameFieldNumber = 1;
  inline const ::std::string& fromfilename() const;
  inline void set_fromfilename(const ::std::string& value);
  inline void set_fromfilename(const char* value);
  inline void set_fromfilename(const char* value, size_t size);
  inline ::std::string* mutable_fromfilename();
  inline ::std::string* release_fromfilename();
  inline void set_allocated_fromfilename(::std::string* fromfilename);

  // required string toFileName = 2;
  inline bool has_tofilename() const;
  inline void clear_tofilename();
  static const int kToFileNameFieldNumber = 2;
  inline const ::std::string& tofilename() const;
  inline void set_tofilename(const ::std::string& value);
  inline void set_tofilename(const char* value);
  inline void set_tofilename(const char* value, size_t size);
  inline ::std::string* mutable_tofilename();
  inline ::std::string* release_tofilename();
  inline void set_allocated_tofilename(::std::string* tofilename);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.downloadFileFromStream_Request)
 private:
  inline void set_has_fromfilename();
  inline void clear_has_fromfilename();
  inline void set_has_tofilename();
  inline void clear_has_tofilename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fromfilename_;
  ::std::string* tofilename_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static downloadFileFromStream_Request* default_instance_;
};
// -------------------------------------------------------------------

class downloadFileFromStream_Response : public ::google::protobuf::Message {
 public:
  downloadFileFromStream_Response();
  virtual ~downloadFileFromStream_Response();

  downloadFileFromStream_Response(const downloadFileFromStream_Response& from);

  inline downloadFileFromStream_Response& operator=(const downloadFileFromStream_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const downloadFileFromStream_Response& default_instance();

  void Swap(downloadFileFromStream_Response* other);

  // implements Message ----------------------------------------------

  downloadFileFromStream_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const downloadFileFromStream_Response& from);
  void MergeFrom(const downloadFileFromStream_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // optional string onSuccess_source = 101;
  inline bool has_onsuccess_source() const;
  inline void clear_onsuccess_source();
  static const int kOnSuccessSourceFieldNumber = 101;
  inline const ::std::string& onsuccess_source() const;
  inline void set_onsuccess_source(const ::std::string& value);
  inline void set_onsuccess_source(const char* value);
  inline void set_onsuccess_source(const char* value, size_t size);
  inline ::std::string* mutable_onsuccess_source();
  inline ::std::string* release_onsuccess_source();
  inline void set_allocated_onsuccess_source(::std::string* onsuccess_source);

  // optional string newTargetName = 102;
  inline bool has_newtargetname() const;
  inline void clear_newtargetname();
  static const int kNewTargetNameFieldNumber = 102;
  inline const ::std::string& newtargetname() const;
  inline void set_newtargetname(const ::std::string& value);
  inline void set_newtargetname(const char* value);
  inline void set_newtargetname(const char* value, size_t size);
  inline ::std::string* mutable_newtargetname();
  inline ::std::string* release_newtargetname();
  inline void set_allocated_newtargetname(::std::string* newtargetname);

  // optional string onFailure_source = 201;
  inline bool has_onfailure_source() const;
  inline void clear_onfailure_source();
  static const int kOnFailureSourceFieldNumber = 201;
  inline const ::std::string& onfailure_source() const;
  inline void set_onfailure_source(const ::std::string& value);
  inline void set_onfailure_source(const char* value);
  inline void set_onfailure_source(const char* value, size_t size);
  inline ::std::string* mutable_onfailure_source();
  inline ::std::string* release_onfailure_source();
  inline void set_allocated_onfailure_source(::std::string* onfailure_source);

  // optional int32 errCode = 202;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 202;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 203;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 203;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // optional string onProgress_source = 301;
  inline bool has_onprogress_source() const;
  inline void clear_onprogress_source();
  static const int kOnProgressSourceFieldNumber = 301;
  inline const ::std::string& onprogress_source() const;
  inline void set_onprogress_source(const ::std::string& value);
  inline void set_onprogress_source(const char* value);
  inline void set_onprogress_source(const char* value, size_t size);
  inline ::std::string* mutable_onprogress_source();
  inline ::std::string* release_onprogress_source();
  inline void set_allocated_onprogress_source(::std::string* onprogress_source);

  // optional int64 bytes = 302;
  inline bool has_bytes() const;
  inline void clear_bytes();
  static const int kBytesFieldNumber = 302;
  inline ::google::protobuf::int64 bytes() const;
  inline void set_bytes(::google::protobuf::int64 value);

  // optional int64 total = 303;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 303;
  inline ::google::protobuf::int64 total() const;
  inline void set_total(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.downloadFileFromStream_Response)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_onsuccess_source();
  inline void clear_has_onsuccess_source();
  inline void set_has_newtargetname();
  inline void clear_has_newtargetname();
  inline void set_has_onfailure_source();
  inline void clear_has_onfailure_source();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();
  inline void set_has_onprogress_source();
  inline void clear_has_onprogress_source();
  inline void set_has_bytes();
  inline void clear_has_bytes();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* onsuccess_source_;
  ::std::string* newtargetname_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::int32 errcode_;
  ::std::string* onfailure_source_;
  ::std::string* errmsg_;
  ::std::string* onprogress_source_;
  ::google::protobuf::int64 bytes_;
  ::google::protobuf::int64 total_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static downloadFileFromStream_Response* default_instance_;
};
// -------------------------------------------------------------------

class list_Request : public ::google::protobuf::Message {
 public:
  list_Request();
  virtual ~list_Request();

  list_Request(const list_Request& from);

  inline list_Request& operator=(const list_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_Request& default_instance();

  void Swap(list_Request* other);

  // implements Message ----------------------------------------------

  list_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const list_Request& from);
  void MergeFrom(const list_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string dirName = 1;
  inline bool has_dirname() const;
  inline void clear_dirname();
  static const int kDirNameFieldNumber = 1;
  inline const ::std::string& dirname() const;
  inline void set_dirname(const ::std::string& value);
  inline void set_dirname(const char* value);
  inline void set_dirname(const char* value, size_t size);
  inline ::std::string* mutable_dirname();
  inline ::std::string* release_dirname();
  inline void set_allocated_dirname(::std::string* dirname);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.list_Request)
 private:
  inline void set_has_dirname();
  inline void clear_has_dirname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dirname_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static list_Request* default_instance_;
};
// -------------------------------------------------------------------

class list_Response : public ::google::protobuf::Message {
 public:
  list_Response();
  virtual ~list_Response();

  list_Response(const list_Response& from);

  inline list_Response& operator=(const list_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_Response& default_instance();

  void Swap(list_Response* other);

  // implements Message ----------------------------------------------

  list_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const list_Response& from);
  void MergeFrom(const list_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  inline int fileinforesultlist_size() const;
  inline void clear_fileinforesultlist();
  static const int kFileInfoResultListFieldNumber = 101;
  inline const ::org::cocos2dx::lua::FileInfoResult& fileinforesultlist(int index) const;
  inline ::org::cocos2dx::lua::FileInfoResult* mutable_fileinforesultlist(int index);
  inline ::org::cocos2dx::lua::FileInfoResult* add_fileinforesultlist();
  inline const ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >&
      fileinforesultlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >*
      mutable_fileinforesultlist();

  // optional int32 errCode = 201;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 201;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 202;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 202;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.list_Response)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult > fileinforesultlist_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::int32 errcode_;
  ::std::string* errmsg_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static list_Response* default_instance_;
};
// -------------------------------------------------------------------

class imageStream_Request : public ::google::protobuf::Message {
 public:
  imageStream_Request();
  virtual ~imageStream_Request();

  imageStream_Request(const imageStream_Request& from);

  inline imageStream_Request& operator=(const imageStream_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const imageStream_Request& default_instance();

  void Swap(imageStream_Request* other);

  // implements Message ----------------------------------------------

  imageStream_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const imageStream_Request& from);
  void MergeFrom(const imageStream_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.imageStream_Request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static imageStream_Request* default_instance_;
};
// -------------------------------------------------------------------

class imageStream_Response : public ::google::protobuf::Message {
 public:
  imageStream_Response();
  virtual ~imageStream_Response();

  imageStream_Response(const imageStream_Response& from);

  inline imageStream_Response& operator=(const imageStream_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const imageStream_Response& default_instance();

  void Swap(imageStream_Response* other);

  // implements Message ----------------------------------------------

  imageStream_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const imageStream_Response& from);
  void MergeFrom(const imageStream_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  inline int fileinforesultlist_size() const;
  inline void clear_fileinforesultlist();
  static const int kFileInfoResultListFieldNumber = 101;
  inline const ::org::cocos2dx::lua::FileInfoResult& fileinforesultlist(int index) const;
  inline ::org::cocos2dx::lua::FileInfoResult* mutable_fileinforesultlist(int index);
  inline ::org::cocos2dx::lua::FileInfoResult* add_fileinforesultlist();
  inline const ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >&
      fileinforesultlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >*
      mutable_fileinforesultlist();

  // optional int32 errCode = 201;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 201;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 202;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 202;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.imageStream_Response)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult > fileinforesultlist_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::int32 errcode_;
  ::std::string* errmsg_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static imageStream_Response* default_instance_;
};
// -------------------------------------------------------------------

class audioStream_Request : public ::google::protobuf::Message {
 public:
  audioStream_Request();
  virtual ~audioStream_Request();

  audioStream_Request(const audioStream_Request& from);

  inline audioStream_Request& operator=(const audioStream_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const audioStream_Request& default_instance();

  void Swap(audioStream_Request* other);

  // implements Message ----------------------------------------------

  audioStream_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const audioStream_Request& from);
  void MergeFrom(const audioStream_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.audioStream_Request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static audioStream_Request* default_instance_;
};
// -------------------------------------------------------------------

class audioStream_Response : public ::google::protobuf::Message {
 public:
  audioStream_Response();
  virtual ~audioStream_Response();

  audioStream_Response(const audioStream_Response& from);

  inline audioStream_Response& operator=(const audioStream_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const audioStream_Response& default_instance();

  void Swap(audioStream_Response* other);

  // implements Message ----------------------------------------------

  audioStream_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const audioStream_Response& from);
  void MergeFrom(const audioStream_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  inline int fileinforesultlist_size() const;
  inline void clear_fileinforesultlist();
  static const int kFileInfoResultListFieldNumber = 101;
  inline const ::org::cocos2dx::lua::FileInfoResult& fileinforesultlist(int index) const;
  inline ::org::cocos2dx::lua::FileInfoResult* mutable_fileinforesultlist(int index);
  inline ::org::cocos2dx::lua::FileInfoResult* add_fileinforesultlist();
  inline const ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >&
      fileinforesultlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >*
      mutable_fileinforesultlist();

  // optional int32 errCode = 201;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 201;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 202;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 202;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.audioStream_Response)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult > fileinforesultlist_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::int32 errcode_;
  ::std::string* errmsg_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static audioStream_Response* default_instance_;
};
// -------------------------------------------------------------------

class videoStream_Request : public ::google::protobuf::Message {
 public:
  videoStream_Request();
  virtual ~videoStream_Request();

  videoStream_Request(const videoStream_Request& from);

  inline videoStream_Request& operator=(const videoStream_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const videoStream_Request& default_instance();

  void Swap(videoStream_Request* other);

  // implements Message ----------------------------------------------

  videoStream_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const videoStream_Request& from);
  void MergeFrom(const videoStream_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.videoStream_Request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static videoStream_Request* default_instance_;
};
// -------------------------------------------------------------------

class videoStream_Response : public ::google::protobuf::Message {
 public:
  videoStream_Response();
  virtual ~videoStream_Response();

  videoStream_Response(const videoStream_Response& from);

  inline videoStream_Response& operator=(const videoStream_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const videoStream_Response& default_instance();

  void Swap(videoStream_Response* other);

  // implements Message ----------------------------------------------

  videoStream_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const videoStream_Response& from);
  void MergeFrom(const videoStream_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  inline int fileinforesultlist_size() const;
  inline void clear_fileinforesultlist();
  static const int kFileInfoResultListFieldNumber = 101;
  inline const ::org::cocos2dx::lua::FileInfoResult& fileinforesultlist(int index) const;
  inline ::org::cocos2dx::lua::FileInfoResult* mutable_fileinforesultlist(int index);
  inline ::org::cocos2dx::lua::FileInfoResult* add_fileinforesultlist();
  inline const ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >&
      fileinforesultlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >*
      mutable_fileinforesultlist();

  // optional int32 errCode = 201;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 201;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 202;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 202;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.videoStream_Response)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult > fileinforesultlist_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::int32 errcode_;
  ::std::string* errmsg_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static videoStream_Response* default_instance_;
};
// -------------------------------------------------------------------

class docStream_Request : public ::google::protobuf::Message {
 public:
  docStream_Request();
  virtual ~docStream_Request();

  docStream_Request(const docStream_Request& from);

  inline docStream_Request& operator=(const docStream_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const docStream_Request& default_instance();

  void Swap(docStream_Request* other);

  // implements Message ----------------------------------------------

  docStream_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const docStream_Request& from);
  void MergeFrom(const docStream_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.docStream_Request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static docStream_Request* default_instance_;
};
// -------------------------------------------------------------------

class docStream_Response : public ::google::protobuf::Message {
 public:
  docStream_Response();
  virtual ~docStream_Response();

  docStream_Response(const docStream_Response& from);

  inline docStream_Response& operator=(const docStream_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const docStream_Response& default_instance();

  void Swap(docStream_Response* other);

  // implements Message ----------------------------------------------

  docStream_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const docStream_Response& from);
  void MergeFrom(const docStream_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  inline int fileinforesultlist_size() const;
  inline void clear_fileinforesultlist();
  static const int kFileInfoResultListFieldNumber = 101;
  inline const ::org::cocos2dx::lua::FileInfoResult& fileinforesultlist(int index) const;
  inline ::org::cocos2dx::lua::FileInfoResult* mutable_fileinforesultlist(int index);
  inline ::org::cocos2dx::lua::FileInfoResult* add_fileinforesultlist();
  inline const ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >&
      fileinforesultlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >*
      mutable_fileinforesultlist();

  // optional int32 errCode = 201;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 201;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 202;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 202;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.docStream_Response)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult > fileinforesultlist_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::int32 errcode_;
  ::std::string* errmsg_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static docStream_Response* default_instance_;
};
// -------------------------------------------------------------------

class quota_Request : public ::google::protobuf::Message {
 public:
  quota_Request();
  virtual ~quota_Request();

  quota_Request(const quota_Request& from);

  inline quota_Request& operator=(const quota_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const quota_Request& default_instance();

  void Swap(quota_Request* other);

  // implements Message ----------------------------------------------

  quota_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const quota_Request& from);
  void MergeFrom(const quota_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.quota_Request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static quota_Request* default_instance_;
};
// -------------------------------------------------------------------

class quota_Response : public ::google::protobuf::Message {
 public:
  quota_Response();
  virtual ~quota_Response();

  quota_Response(const quota_Response& from);

  inline quota_Response& operator=(const quota_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const quota_Response& default_instance();

  void Swap(quota_Response* other);

  // implements Message ----------------------------------------------

  quota_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const quota_Response& from);
  void MergeFrom(const quota_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // optional int64 total = 101;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 101;
  inline ::google::protobuf::int64 total() const;
  inline void set_total(::google::protobuf::int64 value);

  // optional int64 used = 102;
  inline bool has_used() const;
  inline void clear_used();
  static const int kUsedFieldNumber = 102;
  inline ::google::protobuf::int64 used() const;
  inline void set_used(::google::protobuf::int64 value);

  // optional int32 errCode = 201;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 201;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 202;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 202;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.quota_Response)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_used();
  inline void clear_has_used();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 total_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::int32 errcode_;
  ::google::protobuf::int64 used_;
  ::std::string* errmsg_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static quota_Response* default_instance_;
};
// -------------------------------------------------------------------

class thumbnail_Request : public ::google::protobuf::Message {
 public:
  thumbnail_Request();
  virtual ~thumbnail_Request();

  thumbnail_Request(const thumbnail_Request& from);

  inline thumbnail_Request& operator=(const thumbnail_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const thumbnail_Request& default_instance();

  void Swap(thumbnail_Request* other);

  // implements Message ----------------------------------------------

  thumbnail_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const thumbnail_Request& from);
  void MergeFrom(const thumbnail_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fileName = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional int32 quality = 2 [default = 10];
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 width = 3 [default = 10];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 4 [default = 10];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.thumbnail_Request)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* filename_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static thumbnail_Request* default_instance_;
};
// -------------------------------------------------------------------

class thumbnail_Response : public ::google::protobuf::Message {
 public:
  thumbnail_Response();
  virtual ~thumbnail_Response();

  thumbnail_Response(const thumbnail_Response& from);

  inline thumbnail_Response& operator=(const thumbnail_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const thumbnail_Response& default_instance();

  void Swap(thumbnail_Response* other);

  // implements Message ----------------------------------------------

  thumbnail_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const thumbnail_Response& from);
  void MergeFrom(const thumbnail_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 statusCode = 1;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // optional string bitmapStr = 101;
  inline bool has_bitmapstr() const;
  inline void clear_bitmapstr();
  static const int kBitmapStrFieldNumber = 101;
  inline const ::std::string& bitmapstr() const;
  inline void set_bitmapstr(const ::std::string& value);
  inline void set_bitmapstr(const char* value);
  inline void set_bitmapstr(const char* value, size_t size);
  inline ::std::string* mutable_bitmapstr();
  inline ::std::string* release_bitmapstr();
  inline void set_allocated_bitmapstr(::std::string* bitmapstr);

  // optional int32 errCode = 201;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 201;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // optional string errMsg = 202;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 202;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.thumbnail_Response)
 private:
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_bitmapstr();
  inline void clear_has_bitmapstr();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bitmapstr_;
  ::google::protobuf::int32 statuscode_;
  ::google::protobuf::int32 errcode_;
  ::std::string* errmsg_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static thumbnail_Response* default_instance_;
};
// -------------------------------------------------------------------

class vibrate_Request : public ::google::protobuf::Message {
 public:
  vibrate_Request();
  virtual ~vibrate_Request();

  vibrate_Request(const vibrate_Request& from);

  inline vibrate_Request& operator=(const vibrate_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vibrate_Request& default_instance();

  void Swap(vibrate_Request* other);

  // implements Message ----------------------------------------------

  vibrate_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vibrate_Request& from);
  void MergeFrom(const vibrate_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 time = 1 [default = 10];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.vibrate_Request)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 time_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static vibrate_Request* default_instance_;
};
// -------------------------------------------------------------------

class vibrate_Response : public ::google::protobuf::Message {
 public:
  vibrate_Response();
  virtual ~vibrate_Response();

  vibrate_Response(const vibrate_Response& from);

  inline vibrate_Response& operator=(const vibrate_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vibrate_Response& default_instance();

  void Swap(vibrate_Response* other);

  // implements Message ----------------------------------------------

  vibrate_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vibrate_Response& from);
  void MergeFrom(const vibrate_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline ::google::protobuf::int32 issuccess() const;
  inline void set_issuccess(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.vibrate_Response)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 issuccess_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static vibrate_Response* default_instance_;
};
// -------------------------------------------------------------------

class vibrateWithPattern_Request : public ::google::protobuf::Message {
 public:
  vibrateWithPattern_Request();
  virtual ~vibrateWithPattern_Request();

  vibrateWithPattern_Request(const vibrateWithPattern_Request& from);

  inline vibrateWithPattern_Request& operator=(const vibrateWithPattern_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vibrateWithPattern_Request& default_instance();

  void Swap(vibrateWithPattern_Request* other);

  // implements Message ----------------------------------------------

  vibrateWithPattern_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vibrateWithPattern_Request& from);
  void MergeFrom(const vibrateWithPattern_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pattern = 1;
  inline int pattern_size() const;
  inline void clear_pattern();
  static const int kPatternFieldNumber = 1;
  inline ::google::protobuf::int32 pattern(int index) const;
  inline void set_pattern(int index, ::google::protobuf::int32 value);
  inline void add_pattern(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pattern() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pattern();

  // optional int32 repeatTime = 2 [default = 1];
  inline bool has_repeattime() const;
  inline void clear_repeattime();
  static const int kRepeatTimeFieldNumber = 2;
  inline ::google::protobuf::int32 repeattime() const;
  inline void set_repeattime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.vibrateWithPattern_Request)
 private:
  inline void set_has_repeattime();
  inline void clear_has_repeattime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pattern_;
  ::google::protobuf::int32 repeattime_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static vibrateWithPattern_Request* default_instance_;
};
// -------------------------------------------------------------------

class vibrateWithPattern_Response : public ::google::protobuf::Message {
 public:
  vibrateWithPattern_Response();
  virtual ~vibrateWithPattern_Response();

  vibrateWithPattern_Response(const vibrateWithPattern_Response& from);

  inline vibrateWithPattern_Response& operator=(const vibrateWithPattern_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vibrateWithPattern_Response& default_instance();

  void Swap(vibrateWithPattern_Response* other);

  // implements Message ----------------------------------------------

  vibrateWithPattern_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vibrateWithPattern_Response& from);
  void MergeFrom(const vibrateWithPattern_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline ::google::protobuf::int32 issuccess() const;
  inline void set_issuccess(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.vibrateWithPattern_Response)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 issuccess_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static vibrateWithPattern_Response* default_instance_;
};
// -------------------------------------------------------------------

class cancelVibrate_Request : public ::google::protobuf::Message {
 public:
  cancelVibrate_Request();
  virtual ~cancelVibrate_Request();

  cancelVibrate_Request(const cancelVibrate_Request& from);

  inline cancelVibrate_Request& operator=(const cancelVibrate_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cancelVibrate_Request& default_instance();

  void Swap(cancelVibrate_Request* other);

  // implements Message ----------------------------------------------

  cancelVibrate_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cancelVibrate_Request& from);
  void MergeFrom(const cancelVibrate_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.cancelVibrate_Request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static cancelVibrate_Request* default_instance_;
};
// -------------------------------------------------------------------

class cancelVibrate_Response : public ::google::protobuf::Message {
 public:
  cancelVibrate_Response();
  virtual ~cancelVibrate_Response();

  cancelVibrate_Response(const cancelVibrate_Response& from);

  inline cancelVibrate_Response& operator=(const cancelVibrate_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cancelVibrate_Response& default_instance();

  void Swap(cancelVibrate_Response* other);

  // implements Message ----------------------------------------------

  cancelVibrate_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cancelVibrate_Response& from);
  void MergeFrom(const cancelVibrate_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline ::google::protobuf::int32 issuccess() const;
  inline void set_issuccess(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.cancelVibrate_Response)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 issuccess_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static cancelVibrate_Response* default_instance_;
};
// -------------------------------------------------------------------

class AudioManager_getStreamVolume_Request : public ::google::protobuf::Message {
 public:
  AudioManager_getStreamVolume_Request();
  virtual ~AudioManager_getStreamVolume_Request();

  AudioManager_getStreamVolume_Request(const AudioManager_getStreamVolume_Request& from);

  inline AudioManager_getStreamVolume_Request& operator=(const AudioManager_getStreamVolume_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioManager_getStreamVolume_Request& default_instance();

  void Swap(AudioManager_getStreamVolume_Request* other);

  // implements Message ----------------------------------------------

  AudioManager_getStreamVolume_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioManager_getStreamVolume_Request& from);
  void MergeFrom(const AudioManager_getStreamVolume_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 streamType = 1 [default = 3];
  inline bool has_streamtype() const;
  inline void clear_streamtype();
  static const int kStreamTypeFieldNumber = 1;
  inline ::google::protobuf::int32 streamtype() const;
  inline void set_streamtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.AudioManager_getStreamVolume_Request)
 private:
  inline void set_has_streamtype();
  inline void clear_has_streamtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 streamtype_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static AudioManager_getStreamVolume_Request* default_instance_;
};
// -------------------------------------------------------------------

class AudioManager_getStreamVolume_Response : public ::google::protobuf::Message {
 public:
  AudioManager_getStreamVolume_Response();
  virtual ~AudioManager_getStreamVolume_Response();

  AudioManager_getStreamVolume_Response(const AudioManager_getStreamVolume_Response& from);

  inline AudioManager_getStreamVolume_Response& operator=(const AudioManager_getStreamVolume_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioManager_getStreamVolume_Response& default_instance();

  void Swap(AudioManager_getStreamVolume_Response* other);

  // implements Message ----------------------------------------------

  AudioManager_getStreamVolume_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioManager_getStreamVolume_Response& from);
  void MergeFrom(const AudioManager_getStreamVolume_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline ::google::protobuf::int32 issuccess() const;
  inline void set_issuccess(::google::protobuf::int32 value);

  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.AudioManager_getStreamVolume_Response)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 issuccess_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static AudioManager_getStreamVolume_Response* default_instance_;
};
// -------------------------------------------------------------------

class AudioManager_setStreamVolume_Request : public ::google::protobuf::Message {
 public:
  AudioManager_setStreamVolume_Request();
  virtual ~AudioManager_setStreamVolume_Request();

  AudioManager_setStreamVolume_Request(const AudioManager_setStreamVolume_Request& from);

  inline AudioManager_setStreamVolume_Request& operator=(const AudioManager_setStreamVolume_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioManager_setStreamVolume_Request& default_instance();

  void Swap(AudioManager_setStreamVolume_Request* other);

  // implements Message ----------------------------------------------

  AudioManager_setStreamVolume_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioManager_setStreamVolume_Request& from);
  void MergeFrom(const AudioManager_setStreamVolume_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 streamType = 1 [default = 3];
  inline bool has_streamtype() const;
  inline void clear_streamtype();
  static const int kStreamTypeFieldNumber = 1;
  inline ::google::protobuf::int32 streamtype() const;
  inline void set_streamtype(::google::protobuf::int32 value);

  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.AudioManager_setStreamVolume_Request)
 private:
  inline void set_has_streamtype();
  inline void clear_has_streamtype();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 streamtype_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static AudioManager_setStreamVolume_Request* default_instance_;
};
// -------------------------------------------------------------------

class AudioManager_setStreamVolume_Response : public ::google::protobuf::Message {
 public:
  AudioManager_setStreamVolume_Response();
  virtual ~AudioManager_setStreamVolume_Response();

  AudioManager_setStreamVolume_Response(const AudioManager_setStreamVolume_Response& from);

  inline AudioManager_setStreamVolume_Response& operator=(const AudioManager_setStreamVolume_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioManager_setStreamVolume_Response& default_instance();

  void Swap(AudioManager_setStreamVolume_Response* other);

  // implements Message ----------------------------------------------

  AudioManager_setStreamVolume_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioManager_setStreamVolume_Response& from);
  void MergeFrom(const AudioManager_setStreamVolume_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline ::google::protobuf::int32 issuccess() const;
  inline void set_issuccess(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.AudioManager_setStreamVolume_Response)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 issuccess_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static AudioManager_setStreamVolume_Response* default_instance_;
};
// -------------------------------------------------------------------

class AudioManager_getStreamMaxVolume_Request : public ::google::protobuf::Message {
 public:
  AudioManager_getStreamMaxVolume_Request();
  virtual ~AudioManager_getStreamMaxVolume_Request();

  AudioManager_getStreamMaxVolume_Request(const AudioManager_getStreamMaxVolume_Request& from);

  inline AudioManager_getStreamMaxVolume_Request& operator=(const AudioManager_getStreamMaxVolume_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioManager_getStreamMaxVolume_Request& default_instance();

  void Swap(AudioManager_getStreamMaxVolume_Request* other);

  // implements Message ----------------------------------------------

  AudioManager_getStreamMaxVolume_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioManager_getStreamMaxVolume_Request& from);
  void MergeFrom(const AudioManager_getStreamMaxVolume_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 streamType = 1 [default = 3];
  inline bool has_streamtype() const;
  inline void clear_streamtype();
  static const int kStreamTypeFieldNumber = 1;
  inline ::google::protobuf::int32 streamtype() const;
  inline void set_streamtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Request)
 private:
  inline void set_has_streamtype();
  inline void clear_has_streamtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 streamtype_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static AudioManager_getStreamMaxVolume_Request* default_instance_;
};
// -------------------------------------------------------------------

class AudioManager_getStreamMaxVolume_Response : public ::google::protobuf::Message {
 public:
  AudioManager_getStreamMaxVolume_Response();
  virtual ~AudioManager_getStreamMaxVolume_Response();

  AudioManager_getStreamMaxVolume_Response(const AudioManager_getStreamMaxVolume_Response& from);

  inline AudioManager_getStreamMaxVolume_Response& operator=(const AudioManager_getStreamMaxVolume_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioManager_getStreamMaxVolume_Response& default_instance();

  void Swap(AudioManager_getStreamMaxVolume_Response* other);

  // implements Message ----------------------------------------------

  AudioManager_getStreamMaxVolume_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioManager_getStreamMaxVolume_Response& from);
  void MergeFrom(const AudioManager_getStreamMaxVolume_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline ::google::protobuf::int32 issuccess() const;
  inline void set_issuccess(::google::protobuf::int32 value);

  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 issuccess_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static AudioManager_getStreamMaxVolume_Response* default_instance_;
};
// -------------------------------------------------------------------

class AudioManager_setStreamMute_Request : public ::google::protobuf::Message {
 public:
  AudioManager_setStreamMute_Request();
  virtual ~AudioManager_setStreamMute_Request();

  AudioManager_setStreamMute_Request(const AudioManager_setStreamMute_Request& from);

  inline AudioManager_setStreamMute_Request& operator=(const AudioManager_setStreamMute_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioManager_setStreamMute_Request& default_instance();

  void Swap(AudioManager_setStreamMute_Request* other);

  // implements Message ----------------------------------------------

  AudioManager_setStreamMute_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioManager_setStreamMute_Request& from);
  void MergeFrom(const AudioManager_setStreamMute_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 streamType = 1 [default = 3];
  inline bool has_streamtype() const;
  inline void clear_streamtype();
  static const int kStreamTypeFieldNumber = 1;
  inline ::google::protobuf::int32 streamtype() const;
  inline void set_streamtype(::google::protobuf::int32 value);

  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.AudioManager_setStreamMute_Request)
 private:
  inline void set_has_streamtype();
  inline void clear_has_streamtype();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 streamtype_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static AudioManager_setStreamMute_Request* default_instance_;
};
// -------------------------------------------------------------------

class AudioManager_setStreamMute_Response : public ::google::protobuf::Message {
 public:
  AudioManager_setStreamMute_Response();
  virtual ~AudioManager_setStreamMute_Response();

  AudioManager_setStreamMute_Response(const AudioManager_setStreamMute_Response& from);

  inline AudioManager_setStreamMute_Response& operator=(const AudioManager_setStreamMute_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioManager_setStreamMute_Response& default_instance();

  void Swap(AudioManager_setStreamMute_Response* other);

  // implements Message ----------------------------------------------

  AudioManager_setStreamMute_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioManager_setStreamMute_Response& from);
  void MergeFrom(const AudioManager_setStreamMute_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline ::google::protobuf::int32 issuccess() const;
  inline void set_issuccess(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.AudioManager_setStreamMute_Response)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 issuccess_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static AudioManager_setStreamMute_Response* default_instance_;
};
// -------------------------------------------------------------------

class openURL_Request : public ::google::protobuf::Message {
 public:
  openURL_Request();
  virtual ~openURL_Request();

  openURL_Request(const openURL_Request& from);

  inline openURL_Request& operator=(const openURL_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const openURL_Request& default_instance();

  void Swap(openURL_Request* other);

  // implements Message ----------------------------------------------

  openURL_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const openURL_Request& from);
  void MergeFrom(const openURL_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.openURL_Request)
 private:
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static openURL_Request* default_instance_;
};
// -------------------------------------------------------------------

class openURL_Response : public ::google::protobuf::Message {
 public:
  openURL_Response();
  virtual ~openURL_Response();

  openURL_Response(const openURL_Response& from);

  inline openURL_Response& operator=(const openURL_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const openURL_Response& default_instance();

  void Swap(openURL_Response* other);

  // implements Message ----------------------------------------------

  openURL_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const openURL_Response& from);
  void MergeFrom(const openURL_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.openURL_Response)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static openURL_Response* default_instance_;
};
// -------------------------------------------------------------------

class getMemoryInfo_Request : public ::google::protobuf::Message {
 public:
  getMemoryInfo_Request();
  virtual ~getMemoryInfo_Request();

  getMemoryInfo_Request(const getMemoryInfo_Request& from);

  inline getMemoryInfo_Request& operator=(const getMemoryInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getMemoryInfo_Request& default_instance();

  void Swap(getMemoryInfo_Request* other);

  // implements Message ----------------------------------------------

  getMemoryInfo_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getMemoryInfo_Request& from);
  void MergeFrom(const getMemoryInfo_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.getMemoryInfo_Request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static getMemoryInfo_Request* default_instance_;
};
// -------------------------------------------------------------------

class getMemoryInfo_Response : public ::google::protobuf::Message {
 public:
  getMemoryInfo_Response();
  virtual ~getMemoryInfo_Response();

  getMemoryInfo_Response(const getMemoryInfo_Response& from);

  inline getMemoryInfo_Response& operator=(const getMemoryInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getMemoryInfo_Response& default_instance();

  void Swap(getMemoryInfo_Response* other);

  // implements Message ----------------------------------------------

  getMemoryInfo_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getMemoryInfo_Response& from);
  void MergeFrom(const getMemoryInfo_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 availMem = 1;
  inline bool has_availmem() const;
  inline void clear_availmem();
  static const int kAvailMemFieldNumber = 1;
  inline ::google::protobuf::int64 availmem() const;
  inline void set_availmem(::google::protobuf::int64 value);

  // required int64 totalMem = 2;
  inline bool has_totalmem() const;
  inline void clear_totalmem();
  static const int kTotalMemFieldNumber = 2;
  inline ::google::protobuf::int64 totalmem() const;
  inline void set_totalmem(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:org.cocos2dx.lua.getMemoryInfo_Response)
 private:
  inline void set_has_availmem();
  inline void clear_has_availmem();
  inline void set_has_totalmem();
  inline void clear_has_totalmem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 availmem_;
  ::google::protobuf::int64 totalmem_;
  friend void  protobuf_AddDesc_LocalBridgePB_2eproto();
  friend void protobuf_AssignDesc_LocalBridgePB_2eproto();
  friend void protobuf_ShutdownFile_LocalBridgePB_2eproto();

  void InitAsDefaultInstance();
  static getMemoryInfo_Response* default_instance_;
};
// ===================================================================


// ===================================================================

// FrontiaUser

// optional string accessToken = 1;
inline bool FrontiaUser::has_accesstoken() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrontiaUser::set_has_accesstoken() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrontiaUser::clear_has_accesstoken() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrontiaUser::clear_accesstoken() {
  if (accesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_->clear();
  }
  clear_has_accesstoken();
}
inline const ::std::string& FrontiaUser::accesstoken() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FrontiaUser.accessToken)
  return *accesstoken_;
}
inline void FrontiaUser::set_accesstoken(const ::std::string& value) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FrontiaUser.accessToken)
}
inline void FrontiaUser::set_accesstoken(const char* value) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.FrontiaUser.accessToken)
}
inline void FrontiaUser::set_accesstoken(const char* value, size_t size) {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_ = new ::std::string;
  }
  accesstoken_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.FrontiaUser.accessToken)
}
inline ::std::string* FrontiaUser::mutable_accesstoken() {
  set_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesstoken_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.FrontiaUser.accessToken)
  return accesstoken_;
}
inline ::std::string* FrontiaUser::release_accesstoken() {
  clear_has_accesstoken();
  if (accesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accesstoken_;
    accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FrontiaUser::set_allocated_accesstoken(::std::string* accesstoken) {
  if (accesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accesstoken_;
  }
  if (accesstoken) {
    set_has_accesstoken();
    accesstoken_ = accesstoken;
  } else {
    clear_has_accesstoken();
    accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.FrontiaUser.accessToken)
}

// optional string baiduAccessToken = 2;
inline bool FrontiaUser::has_baiduaccesstoken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrontiaUser::set_has_baiduaccesstoken() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrontiaUser::clear_has_baiduaccesstoken() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrontiaUser::clear_baiduaccesstoken() {
  if (baiduaccesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baiduaccesstoken_->clear();
  }
  clear_has_baiduaccesstoken();
}
inline const ::std::string& FrontiaUser::baiduaccesstoken() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FrontiaUser.baiduAccessToken)
  return *baiduaccesstoken_;
}
inline void FrontiaUser::set_baiduaccesstoken(const ::std::string& value) {
  set_has_baiduaccesstoken();
  if (baiduaccesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baiduaccesstoken_ = new ::std::string;
  }
  baiduaccesstoken_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FrontiaUser.baiduAccessToken)
}
inline void FrontiaUser::set_baiduaccesstoken(const char* value) {
  set_has_baiduaccesstoken();
  if (baiduaccesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baiduaccesstoken_ = new ::std::string;
  }
  baiduaccesstoken_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.FrontiaUser.baiduAccessToken)
}
inline void FrontiaUser::set_baiduaccesstoken(const char* value, size_t size) {
  set_has_baiduaccesstoken();
  if (baiduaccesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baiduaccesstoken_ = new ::std::string;
  }
  baiduaccesstoken_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.FrontiaUser.baiduAccessToken)
}
inline ::std::string* FrontiaUser::mutable_baiduaccesstoken() {
  set_has_baiduaccesstoken();
  if (baiduaccesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baiduaccesstoken_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.FrontiaUser.baiduAccessToken)
  return baiduaccesstoken_;
}
inline ::std::string* FrontiaUser::release_baiduaccesstoken() {
  clear_has_baiduaccesstoken();
  if (baiduaccesstoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = baiduaccesstoken_;
    baiduaccesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FrontiaUser::set_allocated_baiduaccesstoken(::std::string* baiduaccesstoken) {
  if (baiduaccesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete baiduaccesstoken_;
  }
  if (baiduaccesstoken) {
    set_has_baiduaccesstoken();
    baiduaccesstoken_ = baiduaccesstoken;
  } else {
    clear_has_baiduaccesstoken();
    baiduaccesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.FrontiaUser.baiduAccessToken)
}

// optional int64 baiduExpiresIn = 3;
inline bool FrontiaUser::has_baiduexpiresin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrontiaUser::set_has_baiduexpiresin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FrontiaUser::clear_has_baiduexpiresin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FrontiaUser::clear_baiduexpiresin() {
  baiduexpiresin_ = GOOGLE_LONGLONG(0);
  clear_has_baiduexpiresin();
}
inline ::google::protobuf::int64 FrontiaUser::baiduexpiresin() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FrontiaUser.baiduExpiresIn)
  return baiduexpiresin_;
}
inline void FrontiaUser::set_baiduexpiresin(::google::protobuf::int64 value) {
  set_has_baiduexpiresin();
  baiduexpiresin_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FrontiaUser.baiduExpiresIn)
}

// optional int64 expiresIn = 4;
inline bool FrontiaUser::has_expiresin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FrontiaUser::set_has_expiresin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FrontiaUser::clear_has_expiresin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FrontiaUser::clear_expiresin() {
  expiresin_ = GOOGLE_LONGLONG(0);
  clear_has_expiresin();
}
inline ::google::protobuf::int64 FrontiaUser::expiresin() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FrontiaUser.expiresIn)
  return expiresin_;
}
inline void FrontiaUser::set_expiresin(::google::protobuf::int64 value) {
  set_has_expiresin();
  expiresin_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FrontiaUser.expiresIn)
}

// optional string id = 5;
inline bool FrontiaUser::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FrontiaUser::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FrontiaUser::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FrontiaUser::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& FrontiaUser::id() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FrontiaUser.id)
  return *id_;
}
inline void FrontiaUser::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FrontiaUser.id)
}
inline void FrontiaUser::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.FrontiaUser.id)
}
inline void FrontiaUser::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.FrontiaUser.id)
}
inline ::std::string* FrontiaUser::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.FrontiaUser.id)
  return id_;
}
inline ::std::string* FrontiaUser::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FrontiaUser::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.FrontiaUser.id)
}

// optional string mediaUserId = 6;
inline bool FrontiaUser::has_mediauserid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FrontiaUser::set_has_mediauserid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FrontiaUser::clear_has_mediauserid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FrontiaUser::clear_mediauserid() {
  if (mediauserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mediauserid_->clear();
  }
  clear_has_mediauserid();
}
inline const ::std::string& FrontiaUser::mediauserid() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FrontiaUser.mediaUserId)
  return *mediauserid_;
}
inline void FrontiaUser::set_mediauserid(const ::std::string& value) {
  set_has_mediauserid();
  if (mediauserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mediauserid_ = new ::std::string;
  }
  mediauserid_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FrontiaUser.mediaUserId)
}
inline void FrontiaUser::set_mediauserid(const char* value) {
  set_has_mediauserid();
  if (mediauserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mediauserid_ = new ::std::string;
  }
  mediauserid_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.FrontiaUser.mediaUserId)
}
inline void FrontiaUser::set_mediauserid(const char* value, size_t size) {
  set_has_mediauserid();
  if (mediauserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mediauserid_ = new ::std::string;
  }
  mediauserid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.FrontiaUser.mediaUserId)
}
inline ::std::string* FrontiaUser::mutable_mediauserid() {
  set_has_mediauserid();
  if (mediauserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mediauserid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.FrontiaUser.mediaUserId)
  return mediauserid_;
}
inline ::std::string* FrontiaUser::release_mediauserid() {
  clear_has_mediauserid();
  if (mediauserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mediauserid_;
    mediauserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FrontiaUser::set_allocated_mediauserid(::std::string* mediauserid) {
  if (mediauserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mediauserid_;
  }
  if (mediauserid) {
    set_has_mediauserid();
    mediauserid_ = mediauserid;
  } else {
    clear_has_mediauserid();
    mediauserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.FrontiaUser.mediaUserId)
}

// optional string name = 7;
inline bool FrontiaUser::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FrontiaUser::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FrontiaUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FrontiaUser::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FrontiaUser::name() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FrontiaUser.name)
  return *name_;
}
inline void FrontiaUser::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FrontiaUser.name)
}
inline void FrontiaUser::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.FrontiaUser.name)
}
inline void FrontiaUser::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.FrontiaUser.name)
}
inline ::std::string* FrontiaUser::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.FrontiaUser.name)
  return name_;
}
inline ::std::string* FrontiaUser::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FrontiaUser::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.FrontiaUser.name)
}

// optional string platform = 8;
inline bool FrontiaUser::has_platform() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FrontiaUser::set_has_platform() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FrontiaUser::clear_has_platform() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FrontiaUser::clear_platform() {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& FrontiaUser::platform() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FrontiaUser.platform)
  return *platform_;
}
inline void FrontiaUser::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FrontiaUser.platform)
}
inline void FrontiaUser::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.FrontiaUser.platform)
}
inline void FrontiaUser::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.FrontiaUser.platform)
}
inline ::std::string* FrontiaUser::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.FrontiaUser.platform)
  return platform_;
}
inline ::std::string* FrontiaUser::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FrontiaUser::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.FrontiaUser.platform)
}

// -------------------------------------------------------------------

// FileInfoResult

// optional int64 createTime = 1;
inline bool FileInfoResult::has_createtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileInfoResult::set_has_createtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileInfoResult::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileInfoResult::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 FileInfoResult::createtime() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FileInfoResult.createTime)
  return createtime_;
}
inline void FileInfoResult::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FileInfoResult.createTime)
}

// optional int64 id = 2;
inline bool FileInfoResult::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileInfoResult::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileInfoResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileInfoResult::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 FileInfoResult::id() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FileInfoResult.id)
  return id_;
}
inline void FileInfoResult::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FileInfoResult.id)
}

// optional string md5 = 3;
inline bool FileInfoResult::has_md5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileInfoResult::set_has_md5() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileInfoResult::clear_has_md5() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileInfoResult::clear_md5() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& FileInfoResult::md5() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FileInfoResult.md5)
  return *md5_;
}
inline void FileInfoResult::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FileInfoResult.md5)
}
inline void FileInfoResult::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.FileInfoResult.md5)
}
inline void FileInfoResult::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.FileInfoResult.md5)
}
inline ::std::string* FileInfoResult::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.FileInfoResult.md5)
  return md5_;
}
inline ::std::string* FileInfoResult::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileInfoResult::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.FileInfoResult.md5)
}

// optional int64 modifyTime = 4;
inline bool FileInfoResult::has_modifytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileInfoResult::set_has_modifytime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileInfoResult::clear_has_modifytime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileInfoResult::clear_modifytime() {
  modifytime_ = GOOGLE_LONGLONG(0);
  clear_has_modifytime();
}
inline ::google::protobuf::int64 FileInfoResult::modifytime() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FileInfoResult.modifyTime)
  return modifytime_;
}
inline void FileInfoResult::set_modifytime(::google::protobuf::int64 value) {
  set_has_modifytime();
  modifytime_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FileInfoResult.modifyTime)
}

// optional string path = 5;
inline bool FileInfoResult::has_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileInfoResult::set_has_path() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileInfoResult::clear_has_path() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileInfoResult::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileInfoResult::path() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FileInfoResult.path)
  return *path_;
}
inline void FileInfoResult::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FileInfoResult.path)
}
inline void FileInfoResult::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.FileInfoResult.path)
}
inline void FileInfoResult::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.FileInfoResult.path)
}
inline ::std::string* FileInfoResult::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.FileInfoResult.path)
  return path_;
}
inline ::std::string* FileInfoResult::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FileInfoResult::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.FileInfoResult.path)
}

// optional int64 size = 6;
inline bool FileInfoResult::has_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileInfoResult::set_has_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FileInfoResult::clear_has_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FileInfoResult::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 FileInfoResult::size() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FileInfoResult.size)
  return size_;
}
inline void FileInfoResult::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FileInfoResult.size)
}

// optional bool hasSubFolder = 7;
inline bool FileInfoResult::has_hassubfolder() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FileInfoResult::set_has_hassubfolder() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FileInfoResult::clear_has_hassubfolder() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FileInfoResult::clear_hassubfolder() {
  hassubfolder_ = false;
  clear_has_hassubfolder();
}
inline bool FileInfoResult::hassubfolder() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FileInfoResult.hasSubFolder)
  return hassubfolder_;
}
inline void FileInfoResult::set_hassubfolder(bool value) {
  set_has_hassubfolder();
  hassubfolder_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FileInfoResult.hasSubFolder)
}

// optional bool isDir = 8;
inline bool FileInfoResult::has_isdir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FileInfoResult::set_has_isdir() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FileInfoResult::clear_has_isdir() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FileInfoResult::clear_isdir() {
  isdir_ = false;
  clear_has_isdir();
}
inline bool FileInfoResult::isdir() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.FileInfoResult.isDir)
  return isdir_;
}
inline void FileInfoResult::set_isdir(bool value) {
  set_has_isdir();
  isdir_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.FileInfoResult.isDir)
}

// -------------------------------------------------------------------

// login_Request

// optional string mediaType = 1 [default = "BAIDU"];
inline bool login_Request::has_mediatype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_Request::set_has_mediatype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login_Request::clear_has_mediatype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login_Request::clear_mediatype() {
  if (mediatype_ != _default_mediatype_) {
    mediatype_->assign(*_default_mediatype_);
  }
  clear_has_mediatype();
}
inline const ::std::string& login_Request::mediatype() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.login_Request.mediaType)
  return *mediatype_;
}
inline void login_Request::set_mediatype(const ::std::string& value) {
  set_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    mediatype_ = new ::std::string;
  }
  mediatype_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.login_Request.mediaType)
}
inline void login_Request::set_mediatype(const char* value) {
  set_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    mediatype_ = new ::std::string;
  }
  mediatype_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.login_Request.mediaType)
}
inline void login_Request::set_mediatype(const char* value, size_t size) {
  set_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    mediatype_ = new ::std::string;
  }
  mediatype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.login_Request.mediaType)
}
inline ::std::string* login_Request::mutable_mediatype() {
  set_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    mediatype_ = new ::std::string(*_default_mediatype_);
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.login_Request.mediaType)
  return mediatype_;
}
inline ::std::string* login_Request::release_mediatype() {
  clear_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    return NULL;
  } else {
    ::std::string* temp = mediatype_;
    mediatype_ = const_cast< ::std::string*>(_default_mediatype_);
    return temp;
  }
}
inline void login_Request::set_allocated_mediatype(::std::string* mediatype) {
  if (mediatype_ != _default_mediatype_) {
    delete mediatype_;
  }
  if (mediatype) {
    set_has_mediatype();
    mediatype_ = mediatype;
  } else {
    clear_has_mediatype();
    mediatype_ = const_cast< ::std::string*>(_default_mediatype_);
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.login_Request.mediaType)
}

// -------------------------------------------------------------------

// login_Response

// required int32 statusCode = 1;
inline bool login_Response::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_Response::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login_Response::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login_Response::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 login_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.login_Response.statusCode)
  return statuscode_;
}
inline void login_Response::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.login_Response.statusCode)
}

// optional .org.cocos2dx.lua.FrontiaUser frontiaUser = 101;
inline bool login_Response::has_frontiauser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_Response::set_has_frontiauser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void login_Response::clear_has_frontiauser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void login_Response::clear_frontiauser() {
  if (frontiauser_ != NULL) frontiauser_->::org::cocos2dx::lua::FrontiaUser::Clear();
  clear_has_frontiauser();
}
inline const ::org::cocos2dx::lua::FrontiaUser& login_Response::frontiauser() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.login_Response.frontiaUser)
  return frontiauser_ != NULL ? *frontiauser_ : *default_instance_->frontiauser_;
}
inline ::org::cocos2dx::lua::FrontiaUser* login_Response::mutable_frontiauser() {
  set_has_frontiauser();
  if (frontiauser_ == NULL) frontiauser_ = new ::org::cocos2dx::lua::FrontiaUser;
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.login_Response.frontiaUser)
  return frontiauser_;
}
inline ::org::cocos2dx::lua::FrontiaUser* login_Response::release_frontiauser() {
  clear_has_frontiauser();
  ::org::cocos2dx::lua::FrontiaUser* temp = frontiauser_;
  frontiauser_ = NULL;
  return temp;
}
inline void login_Response::set_allocated_frontiauser(::org::cocos2dx::lua::FrontiaUser* frontiauser) {
  delete frontiauser_;
  frontiauser_ = frontiauser;
  if (frontiauser) {
    set_has_frontiauser();
  } else {
    clear_has_frontiauser();
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.login_Response.frontiaUser)
}

// optional int32 errCode = 201;
inline bool login_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void login_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void login_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void login_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 login_Response::errcode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.login_Response.errCode)
  return errcode_;
}
inline void login_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.login_Response.errCode)
}

// optional string errMsg = 202;
inline bool login_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void login_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void login_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void login_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& login_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.login_Response.errMsg)
  return *errmsg_;
}
inline void login_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.login_Response.errMsg)
}
inline void login_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.login_Response.errMsg)
}
inline void login_Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.login_Response.errMsg)
}
inline ::std::string* login_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.login_Response.errMsg)
  return errmsg_;
}
inline ::std::string* login_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void login_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.login_Response.errMsg)
}

// -------------------------------------------------------------------

// logout_Request

// optional string mediaType = 1 [default = "BAIDU"];
inline bool logout_Request::has_mediatype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void logout_Request::set_has_mediatype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void logout_Request::clear_has_mediatype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void logout_Request::clear_mediatype() {
  if (mediatype_ != _default_mediatype_) {
    mediatype_->assign(*_default_mediatype_);
  }
  clear_has_mediatype();
}
inline const ::std::string& logout_Request::mediatype() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.logout_Request.mediaType)
  return *mediatype_;
}
inline void logout_Request::set_mediatype(const ::std::string& value) {
  set_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    mediatype_ = new ::std::string;
  }
  mediatype_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.logout_Request.mediaType)
}
inline void logout_Request::set_mediatype(const char* value) {
  set_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    mediatype_ = new ::std::string;
  }
  mediatype_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.logout_Request.mediaType)
}
inline void logout_Request::set_mediatype(const char* value, size_t size) {
  set_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    mediatype_ = new ::std::string;
  }
  mediatype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.logout_Request.mediaType)
}
inline ::std::string* logout_Request::mutable_mediatype() {
  set_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    mediatype_ = new ::std::string(*_default_mediatype_);
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.logout_Request.mediaType)
  return mediatype_;
}
inline ::std::string* logout_Request::release_mediatype() {
  clear_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    return NULL;
  } else {
    ::std::string* temp = mediatype_;
    mediatype_ = const_cast< ::std::string*>(_default_mediatype_);
    return temp;
  }
}
inline void logout_Request::set_allocated_mediatype(::std::string* mediatype) {
  if (mediatype_ != _default_mediatype_) {
    delete mediatype_;
  }
  if (mediatype) {
    set_has_mediatype();
    mediatype_ = mediatype;
  } else {
    clear_has_mediatype();
    mediatype_ = const_cast< ::std::string*>(_default_mediatype_);
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.logout_Request.mediaType)
}

// -------------------------------------------------------------------

// logout_Response

// required int32 issuccess = 1;
inline bool logout_Response::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void logout_Response::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void logout_Response::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void logout_Response::clear_issuccess() {
  issuccess_ = 0;
  clear_has_issuccess();
}
inline ::google::protobuf::int32 logout_Response::issuccess() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.logout_Response.issuccess)
  return issuccess_;
}
inline void logout_Response::set_issuccess(::google::protobuf::int32 value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.logout_Response.issuccess)
}

// -------------------------------------------------------------------

// isLogin_Request

// optional string mediaType = 1 [default = "BAIDU"];
inline bool isLogin_Request::has_mediatype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void isLogin_Request::set_has_mediatype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void isLogin_Request::clear_has_mediatype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void isLogin_Request::clear_mediatype() {
  if (mediatype_ != _default_mediatype_) {
    mediatype_->assign(*_default_mediatype_);
  }
  clear_has_mediatype();
}
inline const ::std::string& isLogin_Request::mediatype() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.isLogin_Request.mediaType)
  return *mediatype_;
}
inline void isLogin_Request::set_mediatype(const ::std::string& value) {
  set_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    mediatype_ = new ::std::string;
  }
  mediatype_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.isLogin_Request.mediaType)
}
inline void isLogin_Request::set_mediatype(const char* value) {
  set_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    mediatype_ = new ::std::string;
  }
  mediatype_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.isLogin_Request.mediaType)
}
inline void isLogin_Request::set_mediatype(const char* value, size_t size) {
  set_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    mediatype_ = new ::std::string;
  }
  mediatype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.isLogin_Request.mediaType)
}
inline ::std::string* isLogin_Request::mutable_mediatype() {
  set_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    mediatype_ = new ::std::string(*_default_mediatype_);
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.isLogin_Request.mediaType)
  return mediatype_;
}
inline ::std::string* isLogin_Request::release_mediatype() {
  clear_has_mediatype();
  if (mediatype_ == _default_mediatype_) {
    return NULL;
  } else {
    ::std::string* temp = mediatype_;
    mediatype_ = const_cast< ::std::string*>(_default_mediatype_);
    return temp;
  }
}
inline void isLogin_Request::set_allocated_mediatype(::std::string* mediatype) {
  if (mediatype_ != _default_mediatype_) {
    delete mediatype_;
  }
  if (mediatype) {
    set_has_mediatype();
    mediatype_ = mediatype;
  } else {
    clear_has_mediatype();
    mediatype_ = const_cast< ::std::string*>(_default_mediatype_);
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.isLogin_Request.mediaType)
}

// -------------------------------------------------------------------

// isLogin_Response

// required int32 issuccess = 1;
inline bool isLogin_Response::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void isLogin_Response::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void isLogin_Response::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void isLogin_Response::clear_issuccess() {
  issuccess_ = 0;
  clear_has_issuccess();
}
inline ::google::protobuf::int32 isLogin_Response::issuccess() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.isLogin_Response.issuccess)
  return issuccess_;
}
inline void isLogin_Response::set_issuccess(::google::protobuf::int32 value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.isLogin_Response.issuccess)
}

// -------------------------------------------------------------------

// makeDir_Request

// required string dirName = 1;
inline bool makeDir_Request::has_dirname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void makeDir_Request::set_has_dirname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void makeDir_Request::clear_has_dirname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void makeDir_Request::clear_dirname() {
  if (dirname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirname_->clear();
  }
  clear_has_dirname();
}
inline const ::std::string& makeDir_Request::dirname() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.makeDir_Request.dirName)
  return *dirname_;
}
inline void makeDir_Request::set_dirname(const ::std::string& value) {
  set_has_dirname();
  if (dirname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirname_ = new ::std::string;
  }
  dirname_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.makeDir_Request.dirName)
}
inline void makeDir_Request::set_dirname(const char* value) {
  set_has_dirname();
  if (dirname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirname_ = new ::std::string;
  }
  dirname_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.makeDir_Request.dirName)
}
inline void makeDir_Request::set_dirname(const char* value, size_t size) {
  set_has_dirname();
  if (dirname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirname_ = new ::std::string;
  }
  dirname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.makeDir_Request.dirName)
}
inline ::std::string* makeDir_Request::mutable_dirname() {
  set_has_dirname();
  if (dirname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.makeDir_Request.dirName)
  return dirname_;
}
inline ::std::string* makeDir_Request::release_dirname() {
  clear_has_dirname();
  if (dirname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dirname_;
    dirname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void makeDir_Request::set_allocated_dirname(::std::string* dirname) {
  if (dirname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dirname_;
  }
  if (dirname) {
    set_has_dirname();
    dirname_ = dirname;
  } else {
    clear_has_dirname();
    dirname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.makeDir_Request.dirName)
}

// -------------------------------------------------------------------

// makeDir_Response

// required int32 statusCode = 1;
inline bool makeDir_Response::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void makeDir_Response::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void makeDir_Response::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void makeDir_Response::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 makeDir_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.makeDir_Response.statusCode)
  return statuscode_;
}
inline void makeDir_Response::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.makeDir_Response.statusCode)
}

// optional .org.cocos2dx.lua.FileInfoResult fileInfoResult = 101;
inline bool makeDir_Response::has_fileinforesult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void makeDir_Response::set_has_fileinforesult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void makeDir_Response::clear_has_fileinforesult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void makeDir_Response::clear_fileinforesult() {
  if (fileinforesult_ != NULL) fileinforesult_->::org::cocos2dx::lua::FileInfoResult::Clear();
  clear_has_fileinforesult();
}
inline const ::org::cocos2dx::lua::FileInfoResult& makeDir_Response::fileinforesult() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.makeDir_Response.fileInfoResult)
  return fileinforesult_ != NULL ? *fileinforesult_ : *default_instance_->fileinforesult_;
}
inline ::org::cocos2dx::lua::FileInfoResult* makeDir_Response::mutable_fileinforesult() {
  set_has_fileinforesult();
  if (fileinforesult_ == NULL) fileinforesult_ = new ::org::cocos2dx::lua::FileInfoResult;
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.makeDir_Response.fileInfoResult)
  return fileinforesult_;
}
inline ::org::cocos2dx::lua::FileInfoResult* makeDir_Response::release_fileinforesult() {
  clear_has_fileinforesult();
  ::org::cocos2dx::lua::FileInfoResult* temp = fileinforesult_;
  fileinforesult_ = NULL;
  return temp;
}
inline void makeDir_Response::set_allocated_fileinforesult(::org::cocos2dx::lua::FileInfoResult* fileinforesult) {
  delete fileinforesult_;
  fileinforesult_ = fileinforesult;
  if (fileinforesult) {
    set_has_fileinforesult();
  } else {
    clear_has_fileinforesult();
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.makeDir_Response.fileInfoResult)
}

// optional int32 errCode = 201;
inline bool makeDir_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void makeDir_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void makeDir_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void makeDir_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 makeDir_Response::errcode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.makeDir_Response.errCode)
  return errcode_;
}
inline void makeDir_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.makeDir_Response.errCode)
}

// optional string errMsg = 202;
inline bool makeDir_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void makeDir_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void makeDir_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void makeDir_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& makeDir_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.makeDir_Response.errMsg)
  return *errmsg_;
}
inline void makeDir_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.makeDir_Response.errMsg)
}
inline void makeDir_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.makeDir_Response.errMsg)
}
inline void makeDir_Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.makeDir_Response.errMsg)
}
inline ::std::string* makeDir_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.makeDir_Response.errMsg)
  return errmsg_;
}
inline ::std::string* makeDir_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void makeDir_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.makeDir_Response.errMsg)
}

// -------------------------------------------------------------------

// deleteFile_Request

// required string dirOrFileName = 1;
inline bool deleteFile_Request::has_dirorfilename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void deleteFile_Request::set_has_dirorfilename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void deleteFile_Request::clear_has_dirorfilename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void deleteFile_Request::clear_dirorfilename() {
  if (dirorfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirorfilename_->clear();
  }
  clear_has_dirorfilename();
}
inline const ::std::string& deleteFile_Request::dirorfilename() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.deleteFile_Request.dirOrFileName)
  return *dirorfilename_;
}
inline void deleteFile_Request::set_dirorfilename(const ::std::string& value) {
  set_has_dirorfilename();
  if (dirorfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirorfilename_ = new ::std::string;
  }
  dirorfilename_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.deleteFile_Request.dirOrFileName)
}
inline void deleteFile_Request::set_dirorfilename(const char* value) {
  set_has_dirorfilename();
  if (dirorfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirorfilename_ = new ::std::string;
  }
  dirorfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.deleteFile_Request.dirOrFileName)
}
inline void deleteFile_Request::set_dirorfilename(const char* value, size_t size) {
  set_has_dirorfilename();
  if (dirorfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirorfilename_ = new ::std::string;
  }
  dirorfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.deleteFile_Request.dirOrFileName)
}
inline ::std::string* deleteFile_Request::mutable_dirorfilename() {
  set_has_dirorfilename();
  if (dirorfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirorfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.deleteFile_Request.dirOrFileName)
  return dirorfilename_;
}
inline ::std::string* deleteFile_Request::release_dirorfilename() {
  clear_has_dirorfilename();
  if (dirorfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dirorfilename_;
    dirorfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void deleteFile_Request::set_allocated_dirorfilename(::std::string* dirorfilename) {
  if (dirorfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dirorfilename_;
  }
  if (dirorfilename) {
    set_has_dirorfilename();
    dirorfilename_ = dirorfilename;
  } else {
    clear_has_dirorfilename();
    dirorfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.deleteFile_Request.dirOrFileName)
}

// -------------------------------------------------------------------

// deleteFile_Response

// required int32 statusCode = 1;
inline bool deleteFile_Response::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void deleteFile_Response::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void deleteFile_Response::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void deleteFile_Response::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 deleteFile_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.deleteFile_Response.statusCode)
  return statuscode_;
}
inline void deleteFile_Response::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.deleteFile_Response.statusCode)
}

// optional string source = 101;
inline bool deleteFile_Response::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void deleteFile_Response::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void deleteFile_Response::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void deleteFile_Response::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& deleteFile_Response::source() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.deleteFile_Response.source)
  return *source_;
}
inline void deleteFile_Response::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.deleteFile_Response.source)
}
inline void deleteFile_Response::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.deleteFile_Response.source)
}
inline void deleteFile_Response::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.deleteFile_Response.source)
}
inline ::std::string* deleteFile_Response::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.deleteFile_Response.source)
  return source_;
}
inline ::std::string* deleteFile_Response::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void deleteFile_Response::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.deleteFile_Response.source)
}

// optional int32 errCode = 201;
inline bool deleteFile_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void deleteFile_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void deleteFile_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void deleteFile_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 deleteFile_Response::errcode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.deleteFile_Response.errCode)
  return errcode_;
}
inline void deleteFile_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.deleteFile_Response.errCode)
}

// optional string errMsg = 202;
inline bool deleteFile_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void deleteFile_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void deleteFile_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void deleteFile_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& deleteFile_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.deleteFile_Response.errMsg)
  return *errmsg_;
}
inline void deleteFile_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.deleteFile_Response.errMsg)
}
inline void deleteFile_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.deleteFile_Response.errMsg)
}
inline void deleteFile_Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.deleteFile_Response.errMsg)
}
inline ::std::string* deleteFile_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.deleteFile_Response.errMsg)
  return errmsg_;
}
inline ::std::string* deleteFile_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void deleteFile_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.deleteFile_Response.errMsg)
}

// -------------------------------------------------------------------

// uploadFile_Request

// required string fromFileName = 1;
inline bool uploadFile_Request::has_fromfilename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void uploadFile_Request::set_has_fromfilename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void uploadFile_Request::clear_has_fromfilename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void uploadFile_Request::clear_fromfilename() {
  if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_->clear();
  }
  clear_has_fromfilename();
}
inline const ::std::string& uploadFile_Request::fromfilename() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.uploadFile_Request.fromFileName)
  return *fromfilename_;
}
inline void uploadFile_Request::set_fromfilename(const ::std::string& value) {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  fromfilename_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.uploadFile_Request.fromFileName)
}
inline void uploadFile_Request::set_fromfilename(const char* value) {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  fromfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.uploadFile_Request.fromFileName)
}
inline void uploadFile_Request::set_fromfilename(const char* value, size_t size) {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  fromfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.uploadFile_Request.fromFileName)
}
inline ::std::string* uploadFile_Request::mutable_fromfilename() {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.uploadFile_Request.fromFileName)
  return fromfilename_;
}
inline ::std::string* uploadFile_Request::release_fromfilename() {
  clear_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fromfilename_;
    fromfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void uploadFile_Request::set_allocated_fromfilename(::std::string* fromfilename) {
  if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromfilename_;
  }
  if (fromfilename) {
    set_has_fromfilename();
    fromfilename_ = fromfilename;
  } else {
    clear_has_fromfilename();
    fromfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.uploadFile_Request.fromFileName)
}

// required string toFileName = 2;
inline bool uploadFile_Request::has_tofilename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void uploadFile_Request::set_has_tofilename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void uploadFile_Request::clear_has_tofilename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void uploadFile_Request::clear_tofilename() {
  if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_->clear();
  }
  clear_has_tofilename();
}
inline const ::std::string& uploadFile_Request::tofilename() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.uploadFile_Request.toFileName)
  return *tofilename_;
}
inline void uploadFile_Request::set_tofilename(const ::std::string& value) {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  tofilename_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.uploadFile_Request.toFileName)
}
inline void uploadFile_Request::set_tofilename(const char* value) {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  tofilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.uploadFile_Request.toFileName)
}
inline void uploadFile_Request::set_tofilename(const char* value, size_t size) {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  tofilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.uploadFile_Request.toFileName)
}
inline ::std::string* uploadFile_Request::mutable_tofilename() {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.uploadFile_Request.toFileName)
  return tofilename_;
}
inline ::std::string* uploadFile_Request::release_tofilename() {
  clear_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tofilename_;
    tofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void uploadFile_Request::set_allocated_tofilename(::std::string* tofilename) {
  if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tofilename_;
  }
  if (tofilename) {
    set_has_tofilename();
    tofilename_ = tofilename;
  } else {
    clear_has_tofilename();
    tofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.uploadFile_Request.toFileName)
}

// -------------------------------------------------------------------

// uploadFile_Response

// required int32 statusCode = 1;
inline bool uploadFile_Response::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void uploadFile_Response::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void uploadFile_Response::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void uploadFile_Response::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 uploadFile_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.uploadFile_Response.statusCode)
  return statuscode_;
}
inline void uploadFile_Response::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.uploadFile_Response.statusCode)
}

// optional string onSuccess_source = 101;
inline bool uploadFile_Response::has_onsuccess_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void uploadFile_Response::set_has_onsuccess_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void uploadFile_Response::clear_has_onsuccess_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void uploadFile_Response::clear_onsuccess_source() {
  if (onsuccess_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_->clear();
  }
  clear_has_onsuccess_source();
}
inline const ::std::string& uploadFile_Response::onsuccess_source() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.uploadFile_Response.onSuccess_source)
  return *onsuccess_source_;
}
inline void uploadFile_Response::set_onsuccess_source(const ::std::string& value) {
  set_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_ = new ::std::string;
  }
  onsuccess_source_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.uploadFile_Response.onSuccess_source)
}
inline void uploadFile_Response::set_onsuccess_source(const char* value) {
  set_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_ = new ::std::string;
  }
  onsuccess_source_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.uploadFile_Response.onSuccess_source)
}
inline void uploadFile_Response::set_onsuccess_source(const char* value, size_t size) {
  set_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_ = new ::std::string;
  }
  onsuccess_source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.uploadFile_Response.onSuccess_source)
}
inline ::std::string* uploadFile_Response::mutable_onsuccess_source() {
  set_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.uploadFile_Response.onSuccess_source)
  return onsuccess_source_;
}
inline ::std::string* uploadFile_Response::release_onsuccess_source() {
  clear_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = onsuccess_source_;
    onsuccess_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void uploadFile_Response::set_allocated_onsuccess_source(::std::string* onsuccess_source) {
  if (onsuccess_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onsuccess_source_;
  }
  if (onsuccess_source) {
    set_has_onsuccess_source();
    onsuccess_source_ = onsuccess_source;
  } else {
    clear_has_onsuccess_source();
    onsuccess_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.uploadFile_Response.onSuccess_source)
}

// optional .org.cocos2dx.lua.FileInfoResult fileInfoResult = 102;
inline bool uploadFile_Response::has_fileinforesult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void uploadFile_Response::set_has_fileinforesult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void uploadFile_Response::clear_has_fileinforesult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void uploadFile_Response::clear_fileinforesult() {
  if (fileinforesult_ != NULL) fileinforesult_->::org::cocos2dx::lua::FileInfoResult::Clear();
  clear_has_fileinforesult();
}
inline const ::org::cocos2dx::lua::FileInfoResult& uploadFile_Response::fileinforesult() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.uploadFile_Response.fileInfoResult)
  return fileinforesult_ != NULL ? *fileinforesult_ : *default_instance_->fileinforesult_;
}
inline ::org::cocos2dx::lua::FileInfoResult* uploadFile_Response::mutable_fileinforesult() {
  set_has_fileinforesult();
  if (fileinforesult_ == NULL) fileinforesult_ = new ::org::cocos2dx::lua::FileInfoResult;
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.uploadFile_Response.fileInfoResult)
  return fileinforesult_;
}
inline ::org::cocos2dx::lua::FileInfoResult* uploadFile_Response::release_fileinforesult() {
  clear_has_fileinforesult();
  ::org::cocos2dx::lua::FileInfoResult* temp = fileinforesult_;
  fileinforesult_ = NULL;
  return temp;
}
inline void uploadFile_Response::set_allocated_fileinforesult(::org::cocos2dx::lua::FileInfoResult* fileinforesult) {
  delete fileinforesult_;
  fileinforesult_ = fileinforesult;
  if (fileinforesult) {
    set_has_fileinforesult();
  } else {
    clear_has_fileinforesult();
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.uploadFile_Response.fileInfoResult)
}

// optional string onFailure_source = 201;
inline bool uploadFile_Response::has_onfailure_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void uploadFile_Response::set_has_onfailure_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void uploadFile_Response::clear_has_onfailure_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void uploadFile_Response::clear_onfailure_source() {
  if (onfailure_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_->clear();
  }
  clear_has_onfailure_source();
}
inline const ::std::string& uploadFile_Response::onfailure_source() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.uploadFile_Response.onFailure_source)
  return *onfailure_source_;
}
inline void uploadFile_Response::set_onfailure_source(const ::std::string& value) {
  set_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_ = new ::std::string;
  }
  onfailure_source_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.uploadFile_Response.onFailure_source)
}
inline void uploadFile_Response::set_onfailure_source(const char* value) {
  set_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_ = new ::std::string;
  }
  onfailure_source_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.uploadFile_Response.onFailure_source)
}
inline void uploadFile_Response::set_onfailure_source(const char* value, size_t size) {
  set_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_ = new ::std::string;
  }
  onfailure_source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.uploadFile_Response.onFailure_source)
}
inline ::std::string* uploadFile_Response::mutable_onfailure_source() {
  set_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.uploadFile_Response.onFailure_source)
  return onfailure_source_;
}
inline ::std::string* uploadFile_Response::release_onfailure_source() {
  clear_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = onfailure_source_;
    onfailure_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void uploadFile_Response::set_allocated_onfailure_source(::std::string* onfailure_source) {
  if (onfailure_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onfailure_source_;
  }
  if (onfailure_source) {
    set_has_onfailure_source();
    onfailure_source_ = onfailure_source;
  } else {
    clear_has_onfailure_source();
    onfailure_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.uploadFile_Response.onFailure_source)
}

// optional int32 errCode = 202;
inline bool uploadFile_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void uploadFile_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void uploadFile_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void uploadFile_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 uploadFile_Response::errcode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.uploadFile_Response.errCode)
  return errcode_;
}
inline void uploadFile_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.uploadFile_Response.errCode)
}

// optional string errMsg = 203;
inline bool uploadFile_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void uploadFile_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void uploadFile_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void uploadFile_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& uploadFile_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.uploadFile_Response.errMsg)
  return *errmsg_;
}
inline void uploadFile_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.uploadFile_Response.errMsg)
}
inline void uploadFile_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.uploadFile_Response.errMsg)
}
inline void uploadFile_Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.uploadFile_Response.errMsg)
}
inline ::std::string* uploadFile_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.uploadFile_Response.errMsg)
  return errmsg_;
}
inline ::std::string* uploadFile_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void uploadFile_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.uploadFile_Response.errMsg)
}

// optional string onProgress_source = 301;
inline bool uploadFile_Response::has_onprogress_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void uploadFile_Response::set_has_onprogress_source() {
  _has_bits_[0] |= 0x00000040u;
}
inline void uploadFile_Response::clear_has_onprogress_source() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void uploadFile_Response::clear_onprogress_source() {
  if (onprogress_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_->clear();
  }
  clear_has_onprogress_source();
}
inline const ::std::string& uploadFile_Response::onprogress_source() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.uploadFile_Response.onProgress_source)
  return *onprogress_source_;
}
inline void uploadFile_Response::set_onprogress_source(const ::std::string& value) {
  set_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_ = new ::std::string;
  }
  onprogress_source_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.uploadFile_Response.onProgress_source)
}
inline void uploadFile_Response::set_onprogress_source(const char* value) {
  set_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_ = new ::std::string;
  }
  onprogress_source_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.uploadFile_Response.onProgress_source)
}
inline void uploadFile_Response::set_onprogress_source(const char* value, size_t size) {
  set_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_ = new ::std::string;
  }
  onprogress_source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.uploadFile_Response.onProgress_source)
}
inline ::std::string* uploadFile_Response::mutable_onprogress_source() {
  set_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.uploadFile_Response.onProgress_source)
  return onprogress_source_;
}
inline ::std::string* uploadFile_Response::release_onprogress_source() {
  clear_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = onprogress_source_;
    onprogress_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void uploadFile_Response::set_allocated_onprogress_source(::std::string* onprogress_source) {
  if (onprogress_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onprogress_source_;
  }
  if (onprogress_source) {
    set_has_onprogress_source();
    onprogress_source_ = onprogress_source;
  } else {
    clear_has_onprogress_source();
    onprogress_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.uploadFile_Response.onProgress_source)
}

// optional int64 bytes = 302;
inline bool uploadFile_Response::has_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void uploadFile_Response::set_has_bytes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void uploadFile_Response::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void uploadFile_Response::clear_bytes() {
  bytes_ = GOOGLE_LONGLONG(0);
  clear_has_bytes();
}
inline ::google::protobuf::int64 uploadFile_Response::bytes() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.uploadFile_Response.bytes)
  return bytes_;
}
inline void uploadFile_Response::set_bytes(::google::protobuf::int64 value) {
  set_has_bytes();
  bytes_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.uploadFile_Response.bytes)
}

// optional int64 total = 303;
inline bool uploadFile_Response::has_total() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void uploadFile_Response::set_has_total() {
  _has_bits_[0] |= 0x00000100u;
}
inline void uploadFile_Response::clear_has_total() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void uploadFile_Response::clear_total() {
  total_ = GOOGLE_LONGLONG(0);
  clear_has_total();
}
inline ::google::protobuf::int64 uploadFile_Response::total() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.uploadFile_Response.total)
  return total_;
}
inline void uploadFile_Response::set_total(::google::protobuf::int64 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.uploadFile_Response.total)
}

// -------------------------------------------------------------------

// stopTransferring_Request

// required string fromFileName = 1;
inline bool stopTransferring_Request::has_fromfilename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stopTransferring_Request::set_has_fromfilename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stopTransferring_Request::clear_has_fromfilename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stopTransferring_Request::clear_fromfilename() {
  if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_->clear();
  }
  clear_has_fromfilename();
}
inline const ::std::string& stopTransferring_Request::fromfilename() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.stopTransferring_Request.fromFileName)
  return *fromfilename_;
}
inline void stopTransferring_Request::set_fromfilename(const ::std::string& value) {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  fromfilename_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.stopTransferring_Request.fromFileName)
}
inline void stopTransferring_Request::set_fromfilename(const char* value) {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  fromfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.stopTransferring_Request.fromFileName)
}
inline void stopTransferring_Request::set_fromfilename(const char* value, size_t size) {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  fromfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.stopTransferring_Request.fromFileName)
}
inline ::std::string* stopTransferring_Request::mutable_fromfilename() {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.stopTransferring_Request.fromFileName)
  return fromfilename_;
}
inline ::std::string* stopTransferring_Request::release_fromfilename() {
  clear_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fromfilename_;
    fromfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stopTransferring_Request::set_allocated_fromfilename(::std::string* fromfilename) {
  if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromfilename_;
  }
  if (fromfilename) {
    set_has_fromfilename();
    fromfilename_ = fromfilename;
  } else {
    clear_has_fromfilename();
    fromfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.stopTransferring_Request.fromFileName)
}

// required string toFileName = 2;
inline bool stopTransferring_Request::has_tofilename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stopTransferring_Request::set_has_tofilename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stopTransferring_Request::clear_has_tofilename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stopTransferring_Request::clear_tofilename() {
  if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_->clear();
  }
  clear_has_tofilename();
}
inline const ::std::string& stopTransferring_Request::tofilename() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.stopTransferring_Request.toFileName)
  return *tofilename_;
}
inline void stopTransferring_Request::set_tofilename(const ::std::string& value) {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  tofilename_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.stopTransferring_Request.toFileName)
}
inline void stopTransferring_Request::set_tofilename(const char* value) {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  tofilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.stopTransferring_Request.toFileName)
}
inline void stopTransferring_Request::set_tofilename(const char* value, size_t size) {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  tofilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.stopTransferring_Request.toFileName)
}
inline ::std::string* stopTransferring_Request::mutable_tofilename() {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.stopTransferring_Request.toFileName)
  return tofilename_;
}
inline ::std::string* stopTransferring_Request::release_tofilename() {
  clear_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tofilename_;
    tofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stopTransferring_Request::set_allocated_tofilename(::std::string* tofilename) {
  if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tofilename_;
  }
  if (tofilename) {
    set_has_tofilename();
    tofilename_ = tofilename;
  } else {
    clear_has_tofilename();
    tofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.stopTransferring_Request.toFileName)
}

// -------------------------------------------------------------------

// stopTransferring_Response

// required int32 issuccess = 1;
inline bool stopTransferring_Response::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stopTransferring_Response::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stopTransferring_Response::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stopTransferring_Response::clear_issuccess() {
  issuccess_ = 0;
  clear_has_issuccess();
}
inline ::google::protobuf::int32 stopTransferring_Response::issuccess() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.stopTransferring_Response.issuccess)
  return issuccess_;
}
inline void stopTransferring_Response::set_issuccess(::google::protobuf::int32 value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.stopTransferring_Response.issuccess)
}

// -------------------------------------------------------------------

// downloadFile_Request

// required string fromFileName = 1;
inline bool downloadFile_Request::has_fromfilename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void downloadFile_Request::set_has_fromfilename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void downloadFile_Request::clear_has_fromfilename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void downloadFile_Request::clear_fromfilename() {
  if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_->clear();
  }
  clear_has_fromfilename();
}
inline const ::std::string& downloadFile_Request::fromfilename() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFile_Request.fromFileName)
  return *fromfilename_;
}
inline void downloadFile_Request::set_fromfilename(const ::std::string& value) {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  fromfilename_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFile_Request.fromFileName)
}
inline void downloadFile_Request::set_fromfilename(const char* value) {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  fromfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFile_Request.fromFileName)
}
inline void downloadFile_Request::set_fromfilename(const char* value, size_t size) {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  fromfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFile_Request.fromFileName)
}
inline ::std::string* downloadFile_Request::mutable_fromfilename() {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFile_Request.fromFileName)
  return fromfilename_;
}
inline ::std::string* downloadFile_Request::release_fromfilename() {
  clear_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fromfilename_;
    fromfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFile_Request::set_allocated_fromfilename(::std::string* fromfilename) {
  if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromfilename_;
  }
  if (fromfilename) {
    set_has_fromfilename();
    fromfilename_ = fromfilename;
  } else {
    clear_has_fromfilename();
    fromfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFile_Request.fromFileName)
}

// required string toFileName = 2;
inline bool downloadFile_Request::has_tofilename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void downloadFile_Request::set_has_tofilename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void downloadFile_Request::clear_has_tofilename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void downloadFile_Request::clear_tofilename() {
  if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_->clear();
  }
  clear_has_tofilename();
}
inline const ::std::string& downloadFile_Request::tofilename() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFile_Request.toFileName)
  return *tofilename_;
}
inline void downloadFile_Request::set_tofilename(const ::std::string& value) {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  tofilename_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFile_Request.toFileName)
}
inline void downloadFile_Request::set_tofilename(const char* value) {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  tofilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFile_Request.toFileName)
}
inline void downloadFile_Request::set_tofilename(const char* value, size_t size) {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  tofilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFile_Request.toFileName)
}
inline ::std::string* downloadFile_Request::mutable_tofilename() {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFile_Request.toFileName)
  return tofilename_;
}
inline ::std::string* downloadFile_Request::release_tofilename() {
  clear_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tofilename_;
    tofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFile_Request::set_allocated_tofilename(::std::string* tofilename) {
  if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tofilename_;
  }
  if (tofilename) {
    set_has_tofilename();
    tofilename_ = tofilename;
  } else {
    clear_has_tofilename();
    tofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFile_Request.toFileName)
}

// -------------------------------------------------------------------

// downloadFile_Response

// required int32 statusCode = 1;
inline bool downloadFile_Response::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void downloadFile_Response::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void downloadFile_Response::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void downloadFile_Response::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 downloadFile_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFile_Response.statusCode)
  return statuscode_;
}
inline void downloadFile_Response::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFile_Response.statusCode)
}

// optional string onSuccess_source = 101;
inline bool downloadFile_Response::has_onsuccess_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void downloadFile_Response::set_has_onsuccess_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void downloadFile_Response::clear_has_onsuccess_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void downloadFile_Response::clear_onsuccess_source() {
  if (onsuccess_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_->clear();
  }
  clear_has_onsuccess_source();
}
inline const ::std::string& downloadFile_Response::onsuccess_source() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFile_Response.onSuccess_source)
  return *onsuccess_source_;
}
inline void downloadFile_Response::set_onsuccess_source(const ::std::string& value) {
  set_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_ = new ::std::string;
  }
  onsuccess_source_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFile_Response.onSuccess_source)
}
inline void downloadFile_Response::set_onsuccess_source(const char* value) {
  set_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_ = new ::std::string;
  }
  onsuccess_source_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFile_Response.onSuccess_source)
}
inline void downloadFile_Response::set_onsuccess_source(const char* value, size_t size) {
  set_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_ = new ::std::string;
  }
  onsuccess_source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFile_Response.onSuccess_source)
}
inline ::std::string* downloadFile_Response::mutable_onsuccess_source() {
  set_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFile_Response.onSuccess_source)
  return onsuccess_source_;
}
inline ::std::string* downloadFile_Response::release_onsuccess_source() {
  clear_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = onsuccess_source_;
    onsuccess_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFile_Response::set_allocated_onsuccess_source(::std::string* onsuccess_source) {
  if (onsuccess_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onsuccess_source_;
  }
  if (onsuccess_source) {
    set_has_onsuccess_source();
    onsuccess_source_ = onsuccess_source;
  } else {
    clear_has_onsuccess_source();
    onsuccess_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFile_Response.onSuccess_source)
}

// optional string newTargetName = 102;
inline bool downloadFile_Response::has_newtargetname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void downloadFile_Response::set_has_newtargetname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void downloadFile_Response::clear_has_newtargetname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void downloadFile_Response::clear_newtargetname() {
  if (newtargetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newtargetname_->clear();
  }
  clear_has_newtargetname();
}
inline const ::std::string& downloadFile_Response::newtargetname() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFile_Response.newTargetName)
  return *newtargetname_;
}
inline void downloadFile_Response::set_newtargetname(const ::std::string& value) {
  set_has_newtargetname();
  if (newtargetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newtargetname_ = new ::std::string;
  }
  newtargetname_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFile_Response.newTargetName)
}
inline void downloadFile_Response::set_newtargetname(const char* value) {
  set_has_newtargetname();
  if (newtargetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newtargetname_ = new ::std::string;
  }
  newtargetname_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFile_Response.newTargetName)
}
inline void downloadFile_Response::set_newtargetname(const char* value, size_t size) {
  set_has_newtargetname();
  if (newtargetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newtargetname_ = new ::std::string;
  }
  newtargetname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFile_Response.newTargetName)
}
inline ::std::string* downloadFile_Response::mutable_newtargetname() {
  set_has_newtargetname();
  if (newtargetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newtargetname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFile_Response.newTargetName)
  return newtargetname_;
}
inline ::std::string* downloadFile_Response::release_newtargetname() {
  clear_has_newtargetname();
  if (newtargetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = newtargetname_;
    newtargetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFile_Response::set_allocated_newtargetname(::std::string* newtargetname) {
  if (newtargetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newtargetname_;
  }
  if (newtargetname) {
    set_has_newtargetname();
    newtargetname_ = newtargetname;
  } else {
    clear_has_newtargetname();
    newtargetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFile_Response.newTargetName)
}

// optional string onFailure_source = 201;
inline bool downloadFile_Response::has_onfailure_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void downloadFile_Response::set_has_onfailure_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void downloadFile_Response::clear_has_onfailure_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void downloadFile_Response::clear_onfailure_source() {
  if (onfailure_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_->clear();
  }
  clear_has_onfailure_source();
}
inline const ::std::string& downloadFile_Response::onfailure_source() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFile_Response.onFailure_source)
  return *onfailure_source_;
}
inline void downloadFile_Response::set_onfailure_source(const ::std::string& value) {
  set_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_ = new ::std::string;
  }
  onfailure_source_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFile_Response.onFailure_source)
}
inline void downloadFile_Response::set_onfailure_source(const char* value) {
  set_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_ = new ::std::string;
  }
  onfailure_source_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFile_Response.onFailure_source)
}
inline void downloadFile_Response::set_onfailure_source(const char* value, size_t size) {
  set_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_ = new ::std::string;
  }
  onfailure_source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFile_Response.onFailure_source)
}
inline ::std::string* downloadFile_Response::mutable_onfailure_source() {
  set_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFile_Response.onFailure_source)
  return onfailure_source_;
}
inline ::std::string* downloadFile_Response::release_onfailure_source() {
  clear_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = onfailure_source_;
    onfailure_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFile_Response::set_allocated_onfailure_source(::std::string* onfailure_source) {
  if (onfailure_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onfailure_source_;
  }
  if (onfailure_source) {
    set_has_onfailure_source();
    onfailure_source_ = onfailure_source;
  } else {
    clear_has_onfailure_source();
    onfailure_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFile_Response.onFailure_source)
}

// optional int32 errCode = 202;
inline bool downloadFile_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void downloadFile_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void downloadFile_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void downloadFile_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 downloadFile_Response::errcode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFile_Response.errCode)
  return errcode_;
}
inline void downloadFile_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFile_Response.errCode)
}

// optional string errMsg = 203;
inline bool downloadFile_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void downloadFile_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void downloadFile_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void downloadFile_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& downloadFile_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFile_Response.errMsg)
  return *errmsg_;
}
inline void downloadFile_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFile_Response.errMsg)
}
inline void downloadFile_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFile_Response.errMsg)
}
inline void downloadFile_Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFile_Response.errMsg)
}
inline ::std::string* downloadFile_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFile_Response.errMsg)
  return errmsg_;
}
inline ::std::string* downloadFile_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFile_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFile_Response.errMsg)
}

// optional string onProgress_source = 301;
inline bool downloadFile_Response::has_onprogress_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void downloadFile_Response::set_has_onprogress_source() {
  _has_bits_[0] |= 0x00000040u;
}
inline void downloadFile_Response::clear_has_onprogress_source() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void downloadFile_Response::clear_onprogress_source() {
  if (onprogress_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_->clear();
  }
  clear_has_onprogress_source();
}
inline const ::std::string& downloadFile_Response::onprogress_source() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFile_Response.onProgress_source)
  return *onprogress_source_;
}
inline void downloadFile_Response::set_onprogress_source(const ::std::string& value) {
  set_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_ = new ::std::string;
  }
  onprogress_source_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFile_Response.onProgress_source)
}
inline void downloadFile_Response::set_onprogress_source(const char* value) {
  set_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_ = new ::std::string;
  }
  onprogress_source_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFile_Response.onProgress_source)
}
inline void downloadFile_Response::set_onprogress_source(const char* value, size_t size) {
  set_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_ = new ::std::string;
  }
  onprogress_source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFile_Response.onProgress_source)
}
inline ::std::string* downloadFile_Response::mutable_onprogress_source() {
  set_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFile_Response.onProgress_source)
  return onprogress_source_;
}
inline ::std::string* downloadFile_Response::release_onprogress_source() {
  clear_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = onprogress_source_;
    onprogress_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFile_Response::set_allocated_onprogress_source(::std::string* onprogress_source) {
  if (onprogress_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onprogress_source_;
  }
  if (onprogress_source) {
    set_has_onprogress_source();
    onprogress_source_ = onprogress_source;
  } else {
    clear_has_onprogress_source();
    onprogress_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFile_Response.onProgress_source)
}

// optional int64 bytes = 302;
inline bool downloadFile_Response::has_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void downloadFile_Response::set_has_bytes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void downloadFile_Response::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void downloadFile_Response::clear_bytes() {
  bytes_ = GOOGLE_LONGLONG(0);
  clear_has_bytes();
}
inline ::google::protobuf::int64 downloadFile_Response::bytes() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFile_Response.bytes)
  return bytes_;
}
inline void downloadFile_Response::set_bytes(::google::protobuf::int64 value) {
  set_has_bytes();
  bytes_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFile_Response.bytes)
}

// optional int64 total = 303;
inline bool downloadFile_Response::has_total() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void downloadFile_Response::set_has_total() {
  _has_bits_[0] |= 0x00000100u;
}
inline void downloadFile_Response::clear_has_total() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void downloadFile_Response::clear_total() {
  total_ = GOOGLE_LONGLONG(0);
  clear_has_total();
}
inline ::google::protobuf::int64 downloadFile_Response::total() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFile_Response.total)
  return total_;
}
inline void downloadFile_Response::set_total(::google::protobuf::int64 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFile_Response.total)
}

// -------------------------------------------------------------------

// downloadFileFromStream_Request

// required string fromFileName = 1;
inline bool downloadFileFromStream_Request::has_fromfilename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void downloadFileFromStream_Request::set_has_fromfilename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void downloadFileFromStream_Request::clear_has_fromfilename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void downloadFileFromStream_Request::clear_fromfilename() {
  if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_->clear();
  }
  clear_has_fromfilename();
}
inline const ::std::string& downloadFileFromStream_Request::fromfilename() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFileFromStream_Request.fromFileName)
  return *fromfilename_;
}
inline void downloadFileFromStream_Request::set_fromfilename(const ::std::string& value) {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  fromfilename_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFileFromStream_Request.fromFileName)
}
inline void downloadFileFromStream_Request::set_fromfilename(const char* value) {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  fromfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFileFromStream_Request.fromFileName)
}
inline void downloadFileFromStream_Request::set_fromfilename(const char* value, size_t size) {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  fromfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFileFromStream_Request.fromFileName)
}
inline ::std::string* downloadFileFromStream_Request::mutable_fromfilename() {
  set_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFileFromStream_Request.fromFileName)
  return fromfilename_;
}
inline ::std::string* downloadFileFromStream_Request::release_fromfilename() {
  clear_has_fromfilename();
  if (fromfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fromfilename_;
    fromfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFileFromStream_Request::set_allocated_fromfilename(::std::string* fromfilename) {
  if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromfilename_;
  }
  if (fromfilename) {
    set_has_fromfilename();
    fromfilename_ = fromfilename;
  } else {
    clear_has_fromfilename();
    fromfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFileFromStream_Request.fromFileName)
}

// required string toFileName = 2;
inline bool downloadFileFromStream_Request::has_tofilename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void downloadFileFromStream_Request::set_has_tofilename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void downloadFileFromStream_Request::clear_has_tofilename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void downloadFileFromStream_Request::clear_tofilename() {
  if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_->clear();
  }
  clear_has_tofilename();
}
inline const ::std::string& downloadFileFromStream_Request::tofilename() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFileFromStream_Request.toFileName)
  return *tofilename_;
}
inline void downloadFileFromStream_Request::set_tofilename(const ::std::string& value) {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  tofilename_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFileFromStream_Request.toFileName)
}
inline void downloadFileFromStream_Request::set_tofilename(const char* value) {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  tofilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFileFromStream_Request.toFileName)
}
inline void downloadFileFromStream_Request::set_tofilename(const char* value, size_t size) {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  tofilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFileFromStream_Request.toFileName)
}
inline ::std::string* downloadFileFromStream_Request::mutable_tofilename() {
  set_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tofilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFileFromStream_Request.toFileName)
  return tofilename_;
}
inline ::std::string* downloadFileFromStream_Request::release_tofilename() {
  clear_has_tofilename();
  if (tofilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tofilename_;
    tofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFileFromStream_Request::set_allocated_tofilename(::std::string* tofilename) {
  if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tofilename_;
  }
  if (tofilename) {
    set_has_tofilename();
    tofilename_ = tofilename;
  } else {
    clear_has_tofilename();
    tofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFileFromStream_Request.toFileName)
}

// -------------------------------------------------------------------

// downloadFileFromStream_Response

// required int32 statusCode = 1;
inline bool downloadFileFromStream_Response::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void downloadFileFromStream_Response::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void downloadFileFromStream_Response::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void downloadFileFromStream_Response::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 downloadFileFromStream_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFileFromStream_Response.statusCode)
  return statuscode_;
}
inline void downloadFileFromStream_Response::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFileFromStream_Response.statusCode)
}

// optional string onSuccess_source = 101;
inline bool downloadFileFromStream_Response::has_onsuccess_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void downloadFileFromStream_Response::set_has_onsuccess_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void downloadFileFromStream_Response::clear_has_onsuccess_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void downloadFileFromStream_Response::clear_onsuccess_source() {
  if (onsuccess_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_->clear();
  }
  clear_has_onsuccess_source();
}
inline const ::std::string& downloadFileFromStream_Response::onsuccess_source() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFileFromStream_Response.onSuccess_source)
  return *onsuccess_source_;
}
inline void downloadFileFromStream_Response::set_onsuccess_source(const ::std::string& value) {
  set_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_ = new ::std::string;
  }
  onsuccess_source_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFileFromStream_Response.onSuccess_source)
}
inline void downloadFileFromStream_Response::set_onsuccess_source(const char* value) {
  set_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_ = new ::std::string;
  }
  onsuccess_source_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFileFromStream_Response.onSuccess_source)
}
inline void downloadFileFromStream_Response::set_onsuccess_source(const char* value, size_t size) {
  set_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_ = new ::std::string;
  }
  onsuccess_source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFileFromStream_Response.onSuccess_source)
}
inline ::std::string* downloadFileFromStream_Response::mutable_onsuccess_source() {
  set_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onsuccess_source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFileFromStream_Response.onSuccess_source)
  return onsuccess_source_;
}
inline ::std::string* downloadFileFromStream_Response::release_onsuccess_source() {
  clear_has_onsuccess_source();
  if (onsuccess_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = onsuccess_source_;
    onsuccess_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFileFromStream_Response::set_allocated_onsuccess_source(::std::string* onsuccess_source) {
  if (onsuccess_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onsuccess_source_;
  }
  if (onsuccess_source) {
    set_has_onsuccess_source();
    onsuccess_source_ = onsuccess_source;
  } else {
    clear_has_onsuccess_source();
    onsuccess_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFileFromStream_Response.onSuccess_source)
}

// optional string newTargetName = 102;
inline bool downloadFileFromStream_Response::has_newtargetname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void downloadFileFromStream_Response::set_has_newtargetname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void downloadFileFromStream_Response::clear_has_newtargetname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void downloadFileFromStream_Response::clear_newtargetname() {
  if (newtargetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newtargetname_->clear();
  }
  clear_has_newtargetname();
}
inline const ::std::string& downloadFileFromStream_Response::newtargetname() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFileFromStream_Response.newTargetName)
  return *newtargetname_;
}
inline void downloadFileFromStream_Response::set_newtargetname(const ::std::string& value) {
  set_has_newtargetname();
  if (newtargetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newtargetname_ = new ::std::string;
  }
  newtargetname_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFileFromStream_Response.newTargetName)
}
inline void downloadFileFromStream_Response::set_newtargetname(const char* value) {
  set_has_newtargetname();
  if (newtargetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newtargetname_ = new ::std::string;
  }
  newtargetname_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFileFromStream_Response.newTargetName)
}
inline void downloadFileFromStream_Response::set_newtargetname(const char* value, size_t size) {
  set_has_newtargetname();
  if (newtargetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newtargetname_ = new ::std::string;
  }
  newtargetname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFileFromStream_Response.newTargetName)
}
inline ::std::string* downloadFileFromStream_Response::mutable_newtargetname() {
  set_has_newtargetname();
  if (newtargetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    newtargetname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFileFromStream_Response.newTargetName)
  return newtargetname_;
}
inline ::std::string* downloadFileFromStream_Response::release_newtargetname() {
  clear_has_newtargetname();
  if (newtargetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = newtargetname_;
    newtargetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFileFromStream_Response::set_allocated_newtargetname(::std::string* newtargetname) {
  if (newtargetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newtargetname_;
  }
  if (newtargetname) {
    set_has_newtargetname();
    newtargetname_ = newtargetname;
  } else {
    clear_has_newtargetname();
    newtargetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFileFromStream_Response.newTargetName)
}

// optional string onFailure_source = 201;
inline bool downloadFileFromStream_Response::has_onfailure_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void downloadFileFromStream_Response::set_has_onfailure_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void downloadFileFromStream_Response::clear_has_onfailure_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void downloadFileFromStream_Response::clear_onfailure_source() {
  if (onfailure_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_->clear();
  }
  clear_has_onfailure_source();
}
inline const ::std::string& downloadFileFromStream_Response::onfailure_source() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFileFromStream_Response.onFailure_source)
  return *onfailure_source_;
}
inline void downloadFileFromStream_Response::set_onfailure_source(const ::std::string& value) {
  set_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_ = new ::std::string;
  }
  onfailure_source_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFileFromStream_Response.onFailure_source)
}
inline void downloadFileFromStream_Response::set_onfailure_source(const char* value) {
  set_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_ = new ::std::string;
  }
  onfailure_source_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFileFromStream_Response.onFailure_source)
}
inline void downloadFileFromStream_Response::set_onfailure_source(const char* value, size_t size) {
  set_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_ = new ::std::string;
  }
  onfailure_source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFileFromStream_Response.onFailure_source)
}
inline ::std::string* downloadFileFromStream_Response::mutable_onfailure_source() {
  set_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onfailure_source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFileFromStream_Response.onFailure_source)
  return onfailure_source_;
}
inline ::std::string* downloadFileFromStream_Response::release_onfailure_source() {
  clear_has_onfailure_source();
  if (onfailure_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = onfailure_source_;
    onfailure_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFileFromStream_Response::set_allocated_onfailure_source(::std::string* onfailure_source) {
  if (onfailure_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onfailure_source_;
  }
  if (onfailure_source) {
    set_has_onfailure_source();
    onfailure_source_ = onfailure_source;
  } else {
    clear_has_onfailure_source();
    onfailure_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFileFromStream_Response.onFailure_source)
}

// optional int32 errCode = 202;
inline bool downloadFileFromStream_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void downloadFileFromStream_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void downloadFileFromStream_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void downloadFileFromStream_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 downloadFileFromStream_Response::errcode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFileFromStream_Response.errCode)
  return errcode_;
}
inline void downloadFileFromStream_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFileFromStream_Response.errCode)
}

// optional string errMsg = 203;
inline bool downloadFileFromStream_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void downloadFileFromStream_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void downloadFileFromStream_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void downloadFileFromStream_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& downloadFileFromStream_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFileFromStream_Response.errMsg)
  return *errmsg_;
}
inline void downloadFileFromStream_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFileFromStream_Response.errMsg)
}
inline void downloadFileFromStream_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFileFromStream_Response.errMsg)
}
inline void downloadFileFromStream_Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFileFromStream_Response.errMsg)
}
inline ::std::string* downloadFileFromStream_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFileFromStream_Response.errMsg)
  return errmsg_;
}
inline ::std::string* downloadFileFromStream_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFileFromStream_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFileFromStream_Response.errMsg)
}

// optional string onProgress_source = 301;
inline bool downloadFileFromStream_Response::has_onprogress_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void downloadFileFromStream_Response::set_has_onprogress_source() {
  _has_bits_[0] |= 0x00000040u;
}
inline void downloadFileFromStream_Response::clear_has_onprogress_source() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void downloadFileFromStream_Response::clear_onprogress_source() {
  if (onprogress_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_->clear();
  }
  clear_has_onprogress_source();
}
inline const ::std::string& downloadFileFromStream_Response::onprogress_source() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFileFromStream_Response.onProgress_source)
  return *onprogress_source_;
}
inline void downloadFileFromStream_Response::set_onprogress_source(const ::std::string& value) {
  set_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_ = new ::std::string;
  }
  onprogress_source_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFileFromStream_Response.onProgress_source)
}
inline void downloadFileFromStream_Response::set_onprogress_source(const char* value) {
  set_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_ = new ::std::string;
  }
  onprogress_source_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.downloadFileFromStream_Response.onProgress_source)
}
inline void downloadFileFromStream_Response::set_onprogress_source(const char* value, size_t size) {
  set_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_ = new ::std::string;
  }
  onprogress_source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.downloadFileFromStream_Response.onProgress_source)
}
inline ::std::string* downloadFileFromStream_Response::mutable_onprogress_source() {
  set_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    onprogress_source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.downloadFileFromStream_Response.onProgress_source)
  return onprogress_source_;
}
inline ::std::string* downloadFileFromStream_Response::release_onprogress_source() {
  clear_has_onprogress_source();
  if (onprogress_source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = onprogress_source_;
    onprogress_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void downloadFileFromStream_Response::set_allocated_onprogress_source(::std::string* onprogress_source) {
  if (onprogress_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onprogress_source_;
  }
  if (onprogress_source) {
    set_has_onprogress_source();
    onprogress_source_ = onprogress_source;
  } else {
    clear_has_onprogress_source();
    onprogress_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.downloadFileFromStream_Response.onProgress_source)
}

// optional int64 bytes = 302;
inline bool downloadFileFromStream_Response::has_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void downloadFileFromStream_Response::set_has_bytes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void downloadFileFromStream_Response::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void downloadFileFromStream_Response::clear_bytes() {
  bytes_ = GOOGLE_LONGLONG(0);
  clear_has_bytes();
}
inline ::google::protobuf::int64 downloadFileFromStream_Response::bytes() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFileFromStream_Response.bytes)
  return bytes_;
}
inline void downloadFileFromStream_Response::set_bytes(::google::protobuf::int64 value) {
  set_has_bytes();
  bytes_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFileFromStream_Response.bytes)
}

// optional int64 total = 303;
inline bool downloadFileFromStream_Response::has_total() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void downloadFileFromStream_Response::set_has_total() {
  _has_bits_[0] |= 0x00000100u;
}
inline void downloadFileFromStream_Response::clear_has_total() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void downloadFileFromStream_Response::clear_total() {
  total_ = GOOGLE_LONGLONG(0);
  clear_has_total();
}
inline ::google::protobuf::int64 downloadFileFromStream_Response::total() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.downloadFileFromStream_Response.total)
  return total_;
}
inline void downloadFileFromStream_Response::set_total(::google::protobuf::int64 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.downloadFileFromStream_Response.total)
}

// -------------------------------------------------------------------

// list_Request

// required string dirName = 1;
inline bool list_Request::has_dirname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_Request::set_has_dirname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_Request::clear_has_dirname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_Request::clear_dirname() {
  if (dirname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirname_->clear();
  }
  clear_has_dirname();
}
inline const ::std::string& list_Request::dirname() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.list_Request.dirName)
  return *dirname_;
}
inline void list_Request::set_dirname(const ::std::string& value) {
  set_has_dirname();
  if (dirname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirname_ = new ::std::string;
  }
  dirname_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.list_Request.dirName)
}
inline void list_Request::set_dirname(const char* value) {
  set_has_dirname();
  if (dirname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirname_ = new ::std::string;
  }
  dirname_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.list_Request.dirName)
}
inline void list_Request::set_dirname(const char* value, size_t size) {
  set_has_dirname();
  if (dirname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirname_ = new ::std::string;
  }
  dirname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.list_Request.dirName)
}
inline ::std::string* list_Request::mutable_dirname() {
  set_has_dirname();
  if (dirname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.list_Request.dirName)
  return dirname_;
}
inline ::std::string* list_Request::release_dirname() {
  clear_has_dirname();
  if (dirname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dirname_;
    dirname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void list_Request::set_allocated_dirname(::std::string* dirname) {
  if (dirname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dirname_;
  }
  if (dirname) {
    set_has_dirname();
    dirname_ = dirname;
  } else {
    clear_has_dirname();
    dirname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.list_Request.dirName)
}

// -------------------------------------------------------------------

// list_Response

// required int32 statusCode = 1;
inline bool list_Response::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_Response::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_Response::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_Response::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 list_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.list_Response.statusCode)
  return statuscode_;
}
inline void list_Response::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.list_Response.statusCode)
}

// repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
inline int list_Response::fileinforesultlist_size() const {
  return fileinforesultlist_.size();
}
inline void list_Response::clear_fileinforesultlist() {
  fileinforesultlist_.Clear();
}
inline const ::org::cocos2dx::lua::FileInfoResult& list_Response::fileinforesultlist(int index) const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.list_Response.fileInfoResultList)
  return fileinforesultlist_.Get(index);
}
inline ::org::cocos2dx::lua::FileInfoResult* list_Response::mutable_fileinforesultlist(int index) {
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.list_Response.fileInfoResultList)
  return fileinforesultlist_.Mutable(index);
}
inline ::org::cocos2dx::lua::FileInfoResult* list_Response::add_fileinforesultlist() {
  // @@protoc_insertion_point(field_add:org.cocos2dx.lua.list_Response.fileInfoResultList)
  return fileinforesultlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >&
list_Response::fileinforesultlist() const {
  // @@protoc_insertion_point(field_list:org.cocos2dx.lua.list_Response.fileInfoResultList)
  return fileinforesultlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >*
list_Response::mutable_fileinforesultlist() {
  // @@protoc_insertion_point(field_mutable_list:org.cocos2dx.lua.list_Response.fileInfoResultList)
  return &fileinforesultlist_;
}

// optional int32 errCode = 201;
inline bool list_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void list_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void list_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void list_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 list_Response::errcode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.list_Response.errCode)
  return errcode_;
}
inline void list_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.list_Response.errCode)
}

// optional string errMsg = 202;
inline bool list_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void list_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void list_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void list_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& list_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.list_Response.errMsg)
  return *errmsg_;
}
inline void list_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.list_Response.errMsg)
}
inline void list_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.list_Response.errMsg)
}
inline void list_Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.list_Response.errMsg)
}
inline ::std::string* list_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.list_Response.errMsg)
  return errmsg_;
}
inline ::std::string* list_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void list_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.list_Response.errMsg)
}

// -------------------------------------------------------------------

// imageStream_Request

// -------------------------------------------------------------------

// imageStream_Response

// required int32 statusCode = 1;
inline bool imageStream_Response::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void imageStream_Response::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void imageStream_Response::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void imageStream_Response::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 imageStream_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.imageStream_Response.statusCode)
  return statuscode_;
}
inline void imageStream_Response::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.imageStream_Response.statusCode)
}

// repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
inline int imageStream_Response::fileinforesultlist_size() const {
  return fileinforesultlist_.size();
}
inline void imageStream_Response::clear_fileinforesultlist() {
  fileinforesultlist_.Clear();
}
inline const ::org::cocos2dx::lua::FileInfoResult& imageStream_Response::fileinforesultlist(int index) const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.imageStream_Response.fileInfoResultList)
  return fileinforesultlist_.Get(index);
}
inline ::org::cocos2dx::lua::FileInfoResult* imageStream_Response::mutable_fileinforesultlist(int index) {
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.imageStream_Response.fileInfoResultList)
  return fileinforesultlist_.Mutable(index);
}
inline ::org::cocos2dx::lua::FileInfoResult* imageStream_Response::add_fileinforesultlist() {
  // @@protoc_insertion_point(field_add:org.cocos2dx.lua.imageStream_Response.fileInfoResultList)
  return fileinforesultlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >&
imageStream_Response::fileinforesultlist() const {
  // @@protoc_insertion_point(field_list:org.cocos2dx.lua.imageStream_Response.fileInfoResultList)
  return fileinforesultlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >*
imageStream_Response::mutable_fileinforesultlist() {
  // @@protoc_insertion_point(field_mutable_list:org.cocos2dx.lua.imageStream_Response.fileInfoResultList)
  return &fileinforesultlist_;
}

// optional int32 errCode = 201;
inline bool imageStream_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void imageStream_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void imageStream_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void imageStream_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 imageStream_Response::errcode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.imageStream_Response.errCode)
  return errcode_;
}
inline void imageStream_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.imageStream_Response.errCode)
}

// optional string errMsg = 202;
inline bool imageStream_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void imageStream_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void imageStream_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void imageStream_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& imageStream_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.imageStream_Response.errMsg)
  return *errmsg_;
}
inline void imageStream_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.imageStream_Response.errMsg)
}
inline void imageStream_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.imageStream_Response.errMsg)
}
inline void imageStream_Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.imageStream_Response.errMsg)
}
inline ::std::string* imageStream_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.imageStream_Response.errMsg)
  return errmsg_;
}
inline ::std::string* imageStream_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void imageStream_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.imageStream_Response.errMsg)
}

// -------------------------------------------------------------------

// audioStream_Request

// -------------------------------------------------------------------

// audioStream_Response

// required int32 statusCode = 1;
inline bool audioStream_Response::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void audioStream_Response::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void audioStream_Response::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void audioStream_Response::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 audioStream_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.audioStream_Response.statusCode)
  return statuscode_;
}
inline void audioStream_Response::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.audioStream_Response.statusCode)
}

// repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
inline int audioStream_Response::fileinforesultlist_size() const {
  return fileinforesultlist_.size();
}
inline void audioStream_Response::clear_fileinforesultlist() {
  fileinforesultlist_.Clear();
}
inline const ::org::cocos2dx::lua::FileInfoResult& audioStream_Response::fileinforesultlist(int index) const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.audioStream_Response.fileInfoResultList)
  return fileinforesultlist_.Get(index);
}
inline ::org::cocos2dx::lua::FileInfoResult* audioStream_Response::mutable_fileinforesultlist(int index) {
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.audioStream_Response.fileInfoResultList)
  return fileinforesultlist_.Mutable(index);
}
inline ::org::cocos2dx::lua::FileInfoResult* audioStream_Response::add_fileinforesultlist() {
  // @@protoc_insertion_point(field_add:org.cocos2dx.lua.audioStream_Response.fileInfoResultList)
  return fileinforesultlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >&
audioStream_Response::fileinforesultlist() const {
  // @@protoc_insertion_point(field_list:org.cocos2dx.lua.audioStream_Response.fileInfoResultList)
  return fileinforesultlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >*
audioStream_Response::mutable_fileinforesultlist() {
  // @@protoc_insertion_point(field_mutable_list:org.cocos2dx.lua.audioStream_Response.fileInfoResultList)
  return &fileinforesultlist_;
}

// optional int32 errCode = 201;
inline bool audioStream_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void audioStream_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void audioStream_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void audioStream_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 audioStream_Response::errcode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.audioStream_Response.errCode)
  return errcode_;
}
inline void audioStream_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.audioStream_Response.errCode)
}

// optional string errMsg = 202;
inline bool audioStream_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void audioStream_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void audioStream_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void audioStream_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& audioStream_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.audioStream_Response.errMsg)
  return *errmsg_;
}
inline void audioStream_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.audioStream_Response.errMsg)
}
inline void audioStream_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.audioStream_Response.errMsg)
}
inline void audioStream_Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.audioStream_Response.errMsg)
}
inline ::std::string* audioStream_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.audioStream_Response.errMsg)
  return errmsg_;
}
inline ::std::string* audioStream_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void audioStream_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.audioStream_Response.errMsg)
}

// -------------------------------------------------------------------

// videoStream_Request

// -------------------------------------------------------------------

// videoStream_Response

// required int32 statusCode = 1;
inline bool videoStream_Response::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void videoStream_Response::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void videoStream_Response::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void videoStream_Response::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 videoStream_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.videoStream_Response.statusCode)
  return statuscode_;
}
inline void videoStream_Response::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.videoStream_Response.statusCode)
}

// repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
inline int videoStream_Response::fileinforesultlist_size() const {
  return fileinforesultlist_.size();
}
inline void videoStream_Response::clear_fileinforesultlist() {
  fileinforesultlist_.Clear();
}
inline const ::org::cocos2dx::lua::FileInfoResult& videoStream_Response::fileinforesultlist(int index) const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.videoStream_Response.fileInfoResultList)
  return fileinforesultlist_.Get(index);
}
inline ::org::cocos2dx::lua::FileInfoResult* videoStream_Response::mutable_fileinforesultlist(int index) {
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.videoStream_Response.fileInfoResultList)
  return fileinforesultlist_.Mutable(index);
}
inline ::org::cocos2dx::lua::FileInfoResult* videoStream_Response::add_fileinforesultlist() {
  // @@protoc_insertion_point(field_add:org.cocos2dx.lua.videoStream_Response.fileInfoResultList)
  return fileinforesultlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >&
videoStream_Response::fileinforesultlist() const {
  // @@protoc_insertion_point(field_list:org.cocos2dx.lua.videoStream_Response.fileInfoResultList)
  return fileinforesultlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >*
videoStream_Response::mutable_fileinforesultlist() {
  // @@protoc_insertion_point(field_mutable_list:org.cocos2dx.lua.videoStream_Response.fileInfoResultList)
  return &fileinforesultlist_;
}

// optional int32 errCode = 201;
inline bool videoStream_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void videoStream_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void videoStream_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void videoStream_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 videoStream_Response::errcode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.videoStream_Response.errCode)
  return errcode_;
}
inline void videoStream_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.videoStream_Response.errCode)
}

// optional string errMsg = 202;
inline bool videoStream_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void videoStream_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void videoStream_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void videoStream_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& videoStream_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.videoStream_Response.errMsg)
  return *errmsg_;
}
inline void videoStream_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.videoStream_Response.errMsg)
}
inline void videoStream_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.videoStream_Response.errMsg)
}
inline void videoStream_Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.videoStream_Response.errMsg)
}
inline ::std::string* videoStream_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.videoStream_Response.errMsg)
  return errmsg_;
}
inline ::std::string* videoStream_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void videoStream_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.videoStream_Response.errMsg)
}

// -------------------------------------------------------------------

// docStream_Request

// -------------------------------------------------------------------

// docStream_Response

// required int32 statusCode = 1;
inline bool docStream_Response::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void docStream_Response::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void docStream_Response::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void docStream_Response::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 docStream_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.docStream_Response.statusCode)
  return statuscode_;
}
inline void docStream_Response::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.docStream_Response.statusCode)
}

// repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
inline int docStream_Response::fileinforesultlist_size() const {
  return fileinforesultlist_.size();
}
inline void docStream_Response::clear_fileinforesultlist() {
  fileinforesultlist_.Clear();
}
inline const ::org::cocos2dx::lua::FileInfoResult& docStream_Response::fileinforesultlist(int index) const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.docStream_Response.fileInfoResultList)
  return fileinforesultlist_.Get(index);
}
inline ::org::cocos2dx::lua::FileInfoResult* docStream_Response::mutable_fileinforesultlist(int index) {
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.docStream_Response.fileInfoResultList)
  return fileinforesultlist_.Mutable(index);
}
inline ::org::cocos2dx::lua::FileInfoResult* docStream_Response::add_fileinforesultlist() {
  // @@protoc_insertion_point(field_add:org.cocos2dx.lua.docStream_Response.fileInfoResultList)
  return fileinforesultlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >&
docStream_Response::fileinforesultlist() const {
  // @@protoc_insertion_point(field_list:org.cocos2dx.lua.docStream_Response.fileInfoResultList)
  return fileinforesultlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::org::cocos2dx::lua::FileInfoResult >*
docStream_Response::mutable_fileinforesultlist() {
  // @@protoc_insertion_point(field_mutable_list:org.cocos2dx.lua.docStream_Response.fileInfoResultList)
  return &fileinforesultlist_;
}

// optional int32 errCode = 201;
inline bool docStream_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void docStream_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void docStream_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void docStream_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 docStream_Response::errcode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.docStream_Response.errCode)
  return errcode_;
}
inline void docStream_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.docStream_Response.errCode)
}

// optional string errMsg = 202;
inline bool docStream_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void docStream_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void docStream_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void docStream_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& docStream_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.docStream_Response.errMsg)
  return *errmsg_;
}
inline void docStream_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.docStream_Response.errMsg)
}
inline void docStream_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.docStream_Response.errMsg)
}
inline void docStream_Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.docStream_Response.errMsg)
}
inline ::std::string* docStream_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.docStream_Response.errMsg)
  return errmsg_;
}
inline ::std::string* docStream_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void docStream_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.docStream_Response.errMsg)
}

// -------------------------------------------------------------------

// quota_Request

// -------------------------------------------------------------------

// quota_Response

// required int32 statusCode = 1;
inline bool quota_Response::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void quota_Response::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void quota_Response::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void quota_Response::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 quota_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.quota_Response.statusCode)
  return statuscode_;
}
inline void quota_Response::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.quota_Response.statusCode)
}

// optional int64 total = 101;
inline bool quota_Response::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void quota_Response::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void quota_Response::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void quota_Response::clear_total() {
  total_ = GOOGLE_LONGLONG(0);
  clear_has_total();
}
inline ::google::protobuf::int64 quota_Response::total() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.quota_Response.total)
  return total_;
}
inline void quota_Response::set_total(::google::protobuf::int64 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.quota_Response.total)
}

// optional int64 used = 102;
inline bool quota_Response::has_used() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void quota_Response::set_has_used() {
  _has_bits_[0] |= 0x00000004u;
}
inline void quota_Response::clear_has_used() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void quota_Response::clear_used() {
  used_ = GOOGLE_LONGLONG(0);
  clear_has_used();
}
inline ::google::protobuf::int64 quota_Response::used() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.quota_Response.used)
  return used_;
}
inline void quota_Response::set_used(::google::protobuf::int64 value) {
  set_has_used();
  used_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.quota_Response.used)
}

// optional int32 errCode = 201;
inline bool quota_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void quota_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void quota_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void quota_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 quota_Response::errcode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.quota_Response.errCode)
  return errcode_;
}
inline void quota_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.quota_Response.errCode)
}

// optional string errMsg = 202;
inline bool quota_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void quota_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void quota_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void quota_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& quota_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.quota_Response.errMsg)
  return *errmsg_;
}
inline void quota_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.quota_Response.errMsg)
}
inline void quota_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.quota_Response.errMsg)
}
inline void quota_Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.quota_Response.errMsg)
}
inline ::std::string* quota_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.quota_Response.errMsg)
  return errmsg_;
}
inline ::std::string* quota_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void quota_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.quota_Response.errMsg)
}

// -------------------------------------------------------------------

// thumbnail_Request

// required string fileName = 1;
inline bool thumbnail_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void thumbnail_Request::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void thumbnail_Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void thumbnail_Request::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& thumbnail_Request::filename() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.thumbnail_Request.fileName)
  return *filename_;
}
inline void thumbnail_Request::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.thumbnail_Request.fileName)
}
inline void thumbnail_Request::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.thumbnail_Request.fileName)
}
inline void thumbnail_Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.thumbnail_Request.fileName)
}
inline ::std::string* thumbnail_Request::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.thumbnail_Request.fileName)
  return filename_;
}
inline ::std::string* thumbnail_Request::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void thumbnail_Request::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.thumbnail_Request.fileName)
}

// optional int32 quality = 2 [default = 10];
inline bool thumbnail_Request::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void thumbnail_Request::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void thumbnail_Request::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void thumbnail_Request::clear_quality() {
  quality_ = 10;
  clear_has_quality();
}
inline ::google::protobuf::int32 thumbnail_Request::quality() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.thumbnail_Request.quality)
  return quality_;
}
inline void thumbnail_Request::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.thumbnail_Request.quality)
}

// optional int32 width = 3 [default = 10];
inline bool thumbnail_Request::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void thumbnail_Request::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void thumbnail_Request::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void thumbnail_Request::clear_width() {
  width_ = 10;
  clear_has_width();
}
inline ::google::protobuf::int32 thumbnail_Request::width() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.thumbnail_Request.width)
  return width_;
}
inline void thumbnail_Request::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.thumbnail_Request.width)
}

// optional int32 height = 4 [default = 10];
inline bool thumbnail_Request::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void thumbnail_Request::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void thumbnail_Request::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void thumbnail_Request::clear_height() {
  height_ = 10;
  clear_has_height();
}
inline ::google::protobuf::int32 thumbnail_Request::height() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.thumbnail_Request.height)
  return height_;
}
inline void thumbnail_Request::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.thumbnail_Request.height)
}

// -------------------------------------------------------------------

// thumbnail_Response

// required int32 statusCode = 1;
inline bool thumbnail_Response::has_statuscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void thumbnail_Response::set_has_statuscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void thumbnail_Response::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void thumbnail_Response::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 thumbnail_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.thumbnail_Response.statusCode)
  return statuscode_;
}
inline void thumbnail_Response::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.thumbnail_Response.statusCode)
}

// optional string bitmapStr = 101;
inline bool thumbnail_Response::has_bitmapstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void thumbnail_Response::set_has_bitmapstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void thumbnail_Response::clear_has_bitmapstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void thumbnail_Response::clear_bitmapstr() {
  if (bitmapstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bitmapstr_->clear();
  }
  clear_has_bitmapstr();
}
inline const ::std::string& thumbnail_Response::bitmapstr() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.thumbnail_Response.bitmapStr)
  return *bitmapstr_;
}
inline void thumbnail_Response::set_bitmapstr(const ::std::string& value) {
  set_has_bitmapstr();
  if (bitmapstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bitmapstr_ = new ::std::string;
  }
  bitmapstr_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.thumbnail_Response.bitmapStr)
}
inline void thumbnail_Response::set_bitmapstr(const char* value) {
  set_has_bitmapstr();
  if (bitmapstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bitmapstr_ = new ::std::string;
  }
  bitmapstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.thumbnail_Response.bitmapStr)
}
inline void thumbnail_Response::set_bitmapstr(const char* value, size_t size) {
  set_has_bitmapstr();
  if (bitmapstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bitmapstr_ = new ::std::string;
  }
  bitmapstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.thumbnail_Response.bitmapStr)
}
inline ::std::string* thumbnail_Response::mutable_bitmapstr() {
  set_has_bitmapstr();
  if (bitmapstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bitmapstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.thumbnail_Response.bitmapStr)
  return bitmapstr_;
}
inline ::std::string* thumbnail_Response::release_bitmapstr() {
  clear_has_bitmapstr();
  if (bitmapstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bitmapstr_;
    bitmapstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void thumbnail_Response::set_allocated_bitmapstr(::std::string* bitmapstr) {
  if (bitmapstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bitmapstr_;
  }
  if (bitmapstr) {
    set_has_bitmapstr();
    bitmapstr_ = bitmapstr;
  } else {
    clear_has_bitmapstr();
    bitmapstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.thumbnail_Response.bitmapStr)
}

// optional int32 errCode = 201;
inline bool thumbnail_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void thumbnail_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void thumbnail_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void thumbnail_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 thumbnail_Response::errcode() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.thumbnail_Response.errCode)
  return errcode_;
}
inline void thumbnail_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.thumbnail_Response.errCode)
}

// optional string errMsg = 202;
inline bool thumbnail_Response::has_errmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void thumbnail_Response::set_has_errmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void thumbnail_Response::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void thumbnail_Response::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& thumbnail_Response::errmsg() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.thumbnail_Response.errMsg)
  return *errmsg_;
}
inline void thumbnail_Response::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.thumbnail_Response.errMsg)
}
inline void thumbnail_Response::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.thumbnail_Response.errMsg)
}
inline void thumbnail_Response::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.thumbnail_Response.errMsg)
}
inline ::std::string* thumbnail_Response::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.thumbnail_Response.errMsg)
  return errmsg_;
}
inline ::std::string* thumbnail_Response::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void thumbnail_Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.thumbnail_Response.errMsg)
}

// -------------------------------------------------------------------

// vibrate_Request

// optional int32 time = 1 [default = 10];
inline bool vibrate_Request::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vibrate_Request::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vibrate_Request::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vibrate_Request::clear_time() {
  time_ = 10;
  clear_has_time();
}
inline ::google::protobuf::int32 vibrate_Request::time() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.vibrate_Request.time)
  return time_;
}
inline void vibrate_Request::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.vibrate_Request.time)
}

// -------------------------------------------------------------------

// vibrate_Response

// required int32 issuccess = 1;
inline bool vibrate_Response::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vibrate_Response::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vibrate_Response::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vibrate_Response::clear_issuccess() {
  issuccess_ = 0;
  clear_has_issuccess();
}
inline ::google::protobuf::int32 vibrate_Response::issuccess() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.vibrate_Response.issuccess)
  return issuccess_;
}
inline void vibrate_Response::set_issuccess(::google::protobuf::int32 value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.vibrate_Response.issuccess)
}

// -------------------------------------------------------------------

// vibrateWithPattern_Request

// repeated int32 pattern = 1;
inline int vibrateWithPattern_Request::pattern_size() const {
  return pattern_.size();
}
inline void vibrateWithPattern_Request::clear_pattern() {
  pattern_.Clear();
}
inline ::google::protobuf::int32 vibrateWithPattern_Request::pattern(int index) const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.vibrateWithPattern_Request.pattern)
  return pattern_.Get(index);
}
inline void vibrateWithPattern_Request::set_pattern(int index, ::google::protobuf::int32 value) {
  pattern_.Set(index, value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.vibrateWithPattern_Request.pattern)
}
inline void vibrateWithPattern_Request::add_pattern(::google::protobuf::int32 value) {
  pattern_.Add(value);
  // @@protoc_insertion_point(field_add:org.cocos2dx.lua.vibrateWithPattern_Request.pattern)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
vibrateWithPattern_Request::pattern() const {
  // @@protoc_insertion_point(field_list:org.cocos2dx.lua.vibrateWithPattern_Request.pattern)
  return pattern_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
vibrateWithPattern_Request::mutable_pattern() {
  // @@protoc_insertion_point(field_mutable_list:org.cocos2dx.lua.vibrateWithPattern_Request.pattern)
  return &pattern_;
}

// optional int32 repeatTime = 2 [default = 1];
inline bool vibrateWithPattern_Request::has_repeattime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void vibrateWithPattern_Request::set_has_repeattime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void vibrateWithPattern_Request::clear_has_repeattime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void vibrateWithPattern_Request::clear_repeattime() {
  repeattime_ = 1;
  clear_has_repeattime();
}
inline ::google::protobuf::int32 vibrateWithPattern_Request::repeattime() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.vibrateWithPattern_Request.repeatTime)
  return repeattime_;
}
inline void vibrateWithPattern_Request::set_repeattime(::google::protobuf::int32 value) {
  set_has_repeattime();
  repeattime_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.vibrateWithPattern_Request.repeatTime)
}

// -------------------------------------------------------------------

// vibrateWithPattern_Response

// required int32 issuccess = 1;
inline bool vibrateWithPattern_Response::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vibrateWithPattern_Response::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vibrateWithPattern_Response::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vibrateWithPattern_Response::clear_issuccess() {
  issuccess_ = 0;
  clear_has_issuccess();
}
inline ::google::protobuf::int32 vibrateWithPattern_Response::issuccess() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.vibrateWithPattern_Response.issuccess)
  return issuccess_;
}
inline void vibrateWithPattern_Response::set_issuccess(::google::protobuf::int32 value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.vibrateWithPattern_Response.issuccess)
}

// -------------------------------------------------------------------

// cancelVibrate_Request

// -------------------------------------------------------------------

// cancelVibrate_Response

// required int32 issuccess = 1;
inline bool cancelVibrate_Response::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cancelVibrate_Response::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cancelVibrate_Response::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cancelVibrate_Response::clear_issuccess() {
  issuccess_ = 0;
  clear_has_issuccess();
}
inline ::google::protobuf::int32 cancelVibrate_Response::issuccess() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.cancelVibrate_Response.issuccess)
  return issuccess_;
}
inline void cancelVibrate_Response::set_issuccess(::google::protobuf::int32 value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.cancelVibrate_Response.issuccess)
}

// -------------------------------------------------------------------

// AudioManager_getStreamVolume_Request

// required int32 streamType = 1 [default = 3];
inline bool AudioManager_getStreamVolume_Request::has_streamtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioManager_getStreamVolume_Request::set_has_streamtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioManager_getStreamVolume_Request::clear_has_streamtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioManager_getStreamVolume_Request::clear_streamtype() {
  streamtype_ = 3;
  clear_has_streamtype();
}
inline ::google::protobuf::int32 AudioManager_getStreamVolume_Request::streamtype() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.AudioManager_getStreamVolume_Request.streamType)
  return streamtype_;
}
inline void AudioManager_getStreamVolume_Request::set_streamtype(::google::protobuf::int32 value) {
  set_has_streamtype();
  streamtype_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.AudioManager_getStreamVolume_Request.streamType)
}

// -------------------------------------------------------------------

// AudioManager_getStreamVolume_Response

// required int32 issuccess = 1;
inline bool AudioManager_getStreamVolume_Response::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioManager_getStreamVolume_Response::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioManager_getStreamVolume_Response::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioManager_getStreamVolume_Response::clear_issuccess() {
  issuccess_ = 0;
  clear_has_issuccess();
}
inline ::google::protobuf::int32 AudioManager_getStreamVolume_Response::issuccess() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.AudioManager_getStreamVolume_Response.issuccess)
  return issuccess_;
}
inline void AudioManager_getStreamVolume_Response::set_issuccess(::google::protobuf::int32 value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.AudioManager_getStreamVolume_Response.issuccess)
}

// required int32 value = 2;
inline bool AudioManager_getStreamVolume_Response::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioManager_getStreamVolume_Response::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioManager_getStreamVolume_Response::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioManager_getStreamVolume_Response::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 AudioManager_getStreamVolume_Response::value() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.AudioManager_getStreamVolume_Response.value)
  return value_;
}
inline void AudioManager_getStreamVolume_Response::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.AudioManager_getStreamVolume_Response.value)
}

// -------------------------------------------------------------------

// AudioManager_setStreamVolume_Request

// required int32 streamType = 1 [default = 3];
inline bool AudioManager_setStreamVolume_Request::has_streamtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioManager_setStreamVolume_Request::set_has_streamtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioManager_setStreamVolume_Request::clear_has_streamtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioManager_setStreamVolume_Request::clear_streamtype() {
  streamtype_ = 3;
  clear_has_streamtype();
}
inline ::google::protobuf::int32 AudioManager_setStreamVolume_Request::streamtype() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.AudioManager_setStreamVolume_Request.streamType)
  return streamtype_;
}
inline void AudioManager_setStreamVolume_Request::set_streamtype(::google::protobuf::int32 value) {
  set_has_streamtype();
  streamtype_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.AudioManager_setStreamVolume_Request.streamType)
}

// required int32 value = 2;
inline bool AudioManager_setStreamVolume_Request::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioManager_setStreamVolume_Request::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioManager_setStreamVolume_Request::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioManager_setStreamVolume_Request::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 AudioManager_setStreamVolume_Request::value() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.AudioManager_setStreamVolume_Request.value)
  return value_;
}
inline void AudioManager_setStreamVolume_Request::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.AudioManager_setStreamVolume_Request.value)
}

// -------------------------------------------------------------------

// AudioManager_setStreamVolume_Response

// required int32 issuccess = 1;
inline bool AudioManager_setStreamVolume_Response::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioManager_setStreamVolume_Response::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioManager_setStreamVolume_Response::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioManager_setStreamVolume_Response::clear_issuccess() {
  issuccess_ = 0;
  clear_has_issuccess();
}
inline ::google::protobuf::int32 AudioManager_setStreamVolume_Response::issuccess() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.AudioManager_setStreamVolume_Response.issuccess)
  return issuccess_;
}
inline void AudioManager_setStreamVolume_Response::set_issuccess(::google::protobuf::int32 value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.AudioManager_setStreamVolume_Response.issuccess)
}

// -------------------------------------------------------------------

// AudioManager_getStreamMaxVolume_Request

// required int32 streamType = 1 [default = 3];
inline bool AudioManager_getStreamMaxVolume_Request::has_streamtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioManager_getStreamMaxVolume_Request::set_has_streamtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioManager_getStreamMaxVolume_Request::clear_has_streamtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioManager_getStreamMaxVolume_Request::clear_streamtype() {
  streamtype_ = 3;
  clear_has_streamtype();
}
inline ::google::protobuf::int32 AudioManager_getStreamMaxVolume_Request::streamtype() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Request.streamType)
  return streamtype_;
}
inline void AudioManager_getStreamMaxVolume_Request::set_streamtype(::google::protobuf::int32 value) {
  set_has_streamtype();
  streamtype_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Request.streamType)
}

// -------------------------------------------------------------------

// AudioManager_getStreamMaxVolume_Response

// required int32 issuccess = 1;
inline bool AudioManager_getStreamMaxVolume_Response::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioManager_getStreamMaxVolume_Response::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioManager_getStreamMaxVolume_Response::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioManager_getStreamMaxVolume_Response::clear_issuccess() {
  issuccess_ = 0;
  clear_has_issuccess();
}
inline ::google::protobuf::int32 AudioManager_getStreamMaxVolume_Response::issuccess() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response.issuccess)
  return issuccess_;
}
inline void AudioManager_getStreamMaxVolume_Response::set_issuccess(::google::protobuf::int32 value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response.issuccess)
}

// required int32 value = 2;
inline bool AudioManager_getStreamMaxVolume_Response::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioManager_getStreamMaxVolume_Response::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioManager_getStreamMaxVolume_Response::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioManager_getStreamMaxVolume_Response::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 AudioManager_getStreamMaxVolume_Response::value() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response.value)
  return value_;
}
inline void AudioManager_getStreamMaxVolume_Response::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response.value)
}

// -------------------------------------------------------------------

// AudioManager_setStreamMute_Request

// required int32 streamType = 1 [default = 3];
inline bool AudioManager_setStreamMute_Request::has_streamtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioManager_setStreamMute_Request::set_has_streamtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioManager_setStreamMute_Request::clear_has_streamtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioManager_setStreamMute_Request::clear_streamtype() {
  streamtype_ = 3;
  clear_has_streamtype();
}
inline ::google::protobuf::int32 AudioManager_setStreamMute_Request::streamtype() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.AudioManager_setStreamMute_Request.streamType)
  return streamtype_;
}
inline void AudioManager_setStreamMute_Request::set_streamtype(::google::protobuf::int32 value) {
  set_has_streamtype();
  streamtype_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.AudioManager_setStreamMute_Request.streamType)
}

// required int32 value = 2;
inline bool AudioManager_setStreamMute_Request::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioManager_setStreamMute_Request::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioManager_setStreamMute_Request::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioManager_setStreamMute_Request::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 AudioManager_setStreamMute_Request::value() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.AudioManager_setStreamMute_Request.value)
  return value_;
}
inline void AudioManager_setStreamMute_Request::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.AudioManager_setStreamMute_Request.value)
}

// -------------------------------------------------------------------

// AudioManager_setStreamMute_Response

// required int32 issuccess = 1;
inline bool AudioManager_setStreamMute_Response::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioManager_setStreamMute_Response::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioManager_setStreamMute_Response::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioManager_setStreamMute_Response::clear_issuccess() {
  issuccess_ = 0;
  clear_has_issuccess();
}
inline ::google::protobuf::int32 AudioManager_setStreamMute_Response::issuccess() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.AudioManager_setStreamMute_Response.issuccess)
  return issuccess_;
}
inline void AudioManager_setStreamMute_Response::set_issuccess(::google::protobuf::int32 value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.AudioManager_setStreamMute_Response.issuccess)
}

// -------------------------------------------------------------------

// openURL_Request

// optional string url = 1;
inline bool openURL_Request::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void openURL_Request::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void openURL_Request::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void openURL_Request::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& openURL_Request::url() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.openURL_Request.url)
  return *url_;
}
inline void openURL_Request::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.openURL_Request.url)
}
inline void openURL_Request::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:org.cocos2dx.lua.openURL_Request.url)
}
inline void openURL_Request::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.cocos2dx.lua.openURL_Request.url)
}
inline ::std::string* openURL_Request::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:org.cocos2dx.lua.openURL_Request.url)
  return url_;
}
inline ::std::string* openURL_Request::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void openURL_Request::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:org.cocos2dx.lua.openURL_Request.url)
}

// -------------------------------------------------------------------

// openURL_Response

// -------------------------------------------------------------------

// getMemoryInfo_Request

// -------------------------------------------------------------------

// getMemoryInfo_Response

// required int64 availMem = 1;
inline bool getMemoryInfo_Response::has_availmem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getMemoryInfo_Response::set_has_availmem() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getMemoryInfo_Response::clear_has_availmem() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getMemoryInfo_Response::clear_availmem() {
  availmem_ = GOOGLE_LONGLONG(0);
  clear_has_availmem();
}
inline ::google::protobuf::int64 getMemoryInfo_Response::availmem() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.getMemoryInfo_Response.availMem)
  return availmem_;
}
inline void getMemoryInfo_Response::set_availmem(::google::protobuf::int64 value) {
  set_has_availmem();
  availmem_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.getMemoryInfo_Response.availMem)
}

// required int64 totalMem = 2;
inline bool getMemoryInfo_Response::has_totalmem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getMemoryInfo_Response::set_has_totalmem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getMemoryInfo_Response::clear_has_totalmem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getMemoryInfo_Response::clear_totalmem() {
  totalmem_ = GOOGLE_LONGLONG(0);
  clear_has_totalmem();
}
inline ::google::protobuf::int64 getMemoryInfo_Response::totalmem() const {
  // @@protoc_insertion_point(field_get:org.cocos2dx.lua.getMemoryInfo_Response.totalMem)
  return totalmem_;
}
inline void getMemoryInfo_Response::set_totalmem(::google::protobuf::int64 value) {
  set_has_totalmem();
  totalmem_ = value;
  // @@protoc_insertion_point(field_set:org.cocos2dx.lua.getMemoryInfo_Response.totalMem)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lua
}  // namespace cocos2dx
}  // namespace org

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LocalBridgePB_2eproto__INCLUDED
