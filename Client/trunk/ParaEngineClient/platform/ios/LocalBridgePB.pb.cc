// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LocalBridgePB.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LocalBridgePB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace cocos2dx {
namespace lua {

namespace {

const ::google::protobuf::Descriptor* FrontiaUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrontiaUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileInfoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* logout_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  logout_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* logout_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  logout_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* isLogin_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  isLogin_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* isLogin_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  isLogin_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* makeDir_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  makeDir_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* makeDir_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  makeDir_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* deleteFile_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  deleteFile_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* deleteFile_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  deleteFile_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* uploadFile_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  uploadFile_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* uploadFile_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  uploadFile_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* stopTransferring_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stopTransferring_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* stopTransferring_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stopTransferring_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* downloadFile_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  downloadFile_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* downloadFile_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  downloadFile_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* downloadFileFromStream_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  downloadFileFromStream_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* downloadFileFromStream_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  downloadFileFromStream_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* list_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  list_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* list_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  list_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* imageStream_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  imageStream_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* imageStream_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  imageStream_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* audioStream_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  audioStream_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* audioStream_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  audioStream_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* videoStream_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  videoStream_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* videoStream_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  videoStream_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* docStream_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  docStream_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* docStream_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  docStream_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* quota_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  quota_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* quota_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  quota_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* thumbnail_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  thumbnail_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* thumbnail_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  thumbnail_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* vibrate_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vibrate_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* vibrate_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vibrate_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* vibrateWithPattern_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vibrateWithPattern_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* vibrateWithPattern_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vibrateWithPattern_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* cancelVibrate_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cancelVibrate_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* cancelVibrate_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cancelVibrate_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioManager_getStreamVolume_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioManager_getStreamVolume_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioManager_getStreamVolume_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioManager_getStreamVolume_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioManager_setStreamVolume_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioManager_setStreamVolume_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioManager_setStreamVolume_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioManager_setStreamVolume_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioManager_getStreamMaxVolume_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioManager_getStreamMaxVolume_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioManager_getStreamMaxVolume_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioManager_getStreamMaxVolume_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioManager_setStreamMute_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioManager_setStreamMute_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioManager_setStreamMute_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioManager_setStreamMute_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* openURL_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  openURL_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* openURL_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  openURL_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* getMemoryInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getMemoryInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* getMemoryInfo_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getMemoryInfo_Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LocalBridgePB_2eproto() {
  protobuf_AddDesc_LocalBridgePB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LocalBridgePB.proto");
  GOOGLE_CHECK(file != NULL);
  FrontiaUser_descriptor_ = file->message_type(0);
  static const int FrontiaUser_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontiaUser, accesstoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontiaUser, baiduaccesstoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontiaUser, baiduexpiresin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontiaUser, expiresin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontiaUser, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontiaUser, mediauserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontiaUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontiaUser, platform_),
  };
  FrontiaUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrontiaUser_descriptor_,
      FrontiaUser::default_instance_,
      FrontiaUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontiaUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrontiaUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrontiaUser));
  FileInfoResult_descriptor_ = file->message_type(1);
  static const int FileInfoResult_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoResult, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoResult, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoResult, modifytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoResult, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoResult, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoResult, hassubfolder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoResult, isdir_),
  };
  FileInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileInfoResult_descriptor_,
      FileInfoResult::default_instance_,
      FileInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileInfoResult));
  login_Request_descriptor_ = file->message_type(2);
  static const int login_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_Request, mediatype_),
  };
  login_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_Request_descriptor_,
      login_Request::default_instance_,
      login_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_Request));
  login_Response_descriptor_ = file->message_type(3);
  static const int login_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_Response, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_Response, frontiauser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_Response, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_Response, errmsg_),
  };
  login_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_Response_descriptor_,
      login_Response::default_instance_,
      login_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_Response));
  logout_Request_descriptor_ = file->message_type(4);
  static const int logout_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_Request, mediatype_),
  };
  logout_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      logout_Request_descriptor_,
      logout_Request::default_instance_,
      logout_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(logout_Request));
  logout_Response_descriptor_ = file->message_type(5);
  static const int logout_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_Response, issuccess_),
  };
  logout_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      logout_Response_descriptor_,
      logout_Response::default_instance_,
      logout_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(logout_Response));
  isLogin_Request_descriptor_ = file->message_type(6);
  static const int isLogin_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(isLogin_Request, mediatype_),
  };
  isLogin_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      isLogin_Request_descriptor_,
      isLogin_Request::default_instance_,
      isLogin_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(isLogin_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(isLogin_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(isLogin_Request));
  isLogin_Response_descriptor_ = file->message_type(7);
  static const int isLogin_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(isLogin_Response, issuccess_),
  };
  isLogin_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      isLogin_Response_descriptor_,
      isLogin_Response::default_instance_,
      isLogin_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(isLogin_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(isLogin_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(isLogin_Response));
  makeDir_Request_descriptor_ = file->message_type(8);
  static const int makeDir_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(makeDir_Request, dirname_),
  };
  makeDir_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      makeDir_Request_descriptor_,
      makeDir_Request::default_instance_,
      makeDir_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(makeDir_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(makeDir_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(makeDir_Request));
  makeDir_Response_descriptor_ = file->message_type(9);
  static const int makeDir_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(makeDir_Response, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(makeDir_Response, fileinforesult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(makeDir_Response, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(makeDir_Response, errmsg_),
  };
  makeDir_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      makeDir_Response_descriptor_,
      makeDir_Response::default_instance_,
      makeDir_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(makeDir_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(makeDir_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(makeDir_Response));
  deleteFile_Request_descriptor_ = file->message_type(10);
  static const int deleteFile_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteFile_Request, dirorfilename_),
  };
  deleteFile_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      deleteFile_Request_descriptor_,
      deleteFile_Request::default_instance_,
      deleteFile_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteFile_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteFile_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(deleteFile_Request));
  deleteFile_Response_descriptor_ = file->message_type(11);
  static const int deleteFile_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteFile_Response, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteFile_Response, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteFile_Response, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteFile_Response, errmsg_),
  };
  deleteFile_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      deleteFile_Response_descriptor_,
      deleteFile_Response::default_instance_,
      deleteFile_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteFile_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deleteFile_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(deleteFile_Response));
  uploadFile_Request_descriptor_ = file->message_type(12);
  static const int uploadFile_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Request, fromfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Request, tofilename_),
  };
  uploadFile_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      uploadFile_Request_descriptor_,
      uploadFile_Request::default_instance_,
      uploadFile_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(uploadFile_Request));
  uploadFile_Response_descriptor_ = file->message_type(13);
  static const int uploadFile_Response_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Response, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Response, onsuccess_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Response, fileinforesult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Response, onfailure_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Response, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Response, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Response, onprogress_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Response, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Response, total_),
  };
  uploadFile_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      uploadFile_Response_descriptor_,
      uploadFile_Response::default_instance_,
      uploadFile_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uploadFile_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(uploadFile_Response));
  stopTransferring_Request_descriptor_ = file->message_type(14);
  static const int stopTransferring_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stopTransferring_Request, fromfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stopTransferring_Request, tofilename_),
  };
  stopTransferring_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stopTransferring_Request_descriptor_,
      stopTransferring_Request::default_instance_,
      stopTransferring_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stopTransferring_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stopTransferring_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stopTransferring_Request));
  stopTransferring_Response_descriptor_ = file->message_type(15);
  static const int stopTransferring_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stopTransferring_Response, issuccess_),
  };
  stopTransferring_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stopTransferring_Response_descriptor_,
      stopTransferring_Response::default_instance_,
      stopTransferring_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stopTransferring_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stopTransferring_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stopTransferring_Response));
  downloadFile_Request_descriptor_ = file->message_type(16);
  static const int downloadFile_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Request, fromfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Request, tofilename_),
  };
  downloadFile_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      downloadFile_Request_descriptor_,
      downloadFile_Request::default_instance_,
      downloadFile_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(downloadFile_Request));
  downloadFile_Response_descriptor_ = file->message_type(17);
  static const int downloadFile_Response_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Response, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Response, onsuccess_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Response, newtargetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Response, onfailure_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Response, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Response, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Response, onprogress_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Response, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Response, total_),
  };
  downloadFile_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      downloadFile_Response_descriptor_,
      downloadFile_Response::default_instance_,
      downloadFile_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFile_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(downloadFile_Response));
  downloadFileFromStream_Request_descriptor_ = file->message_type(18);
  static const int downloadFileFromStream_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Request, fromfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Request, tofilename_),
  };
  downloadFileFromStream_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      downloadFileFromStream_Request_descriptor_,
      downloadFileFromStream_Request::default_instance_,
      downloadFileFromStream_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(downloadFileFromStream_Request));
  downloadFileFromStream_Response_descriptor_ = file->message_type(19);
  static const int downloadFileFromStream_Response_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Response, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Response, onsuccess_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Response, newtargetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Response, onfailure_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Response, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Response, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Response, onprogress_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Response, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Response, total_),
  };
  downloadFileFromStream_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      downloadFileFromStream_Response_descriptor_,
      downloadFileFromStream_Response::default_instance_,
      downloadFileFromStream_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(downloadFileFromStream_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(downloadFileFromStream_Response));
  list_Request_descriptor_ = file->message_type(20);
  static const int list_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_Request, dirname_),
  };
  list_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      list_Request_descriptor_,
      list_Request::default_instance_,
      list_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(list_Request));
  list_Response_descriptor_ = file->message_type(21);
  static const int list_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_Response, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_Response, fileinforesultlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_Response, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_Response, errmsg_),
  };
  list_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      list_Response_descriptor_,
      list_Response::default_instance_,
      list_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(list_Response));
  imageStream_Request_descriptor_ = file->message_type(22);
  static const int imageStream_Request_offsets_[1] = {
  };
  imageStream_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      imageStream_Request_descriptor_,
      imageStream_Request::default_instance_,
      imageStream_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageStream_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageStream_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(imageStream_Request));
  imageStream_Response_descriptor_ = file->message_type(23);
  static const int imageStream_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageStream_Response, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageStream_Response, fileinforesultlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageStream_Response, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageStream_Response, errmsg_),
  };
  imageStream_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      imageStream_Response_descriptor_,
      imageStream_Response::default_instance_,
      imageStream_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageStream_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageStream_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(imageStream_Response));
  audioStream_Request_descriptor_ = file->message_type(24);
  static const int audioStream_Request_offsets_[1] = {
  };
  audioStream_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      audioStream_Request_descriptor_,
      audioStream_Request::default_instance_,
      audioStream_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(audioStream_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(audioStream_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(audioStream_Request));
  audioStream_Response_descriptor_ = file->message_type(25);
  static const int audioStream_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(audioStream_Response, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(audioStream_Response, fileinforesultlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(audioStream_Response, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(audioStream_Response, errmsg_),
  };
  audioStream_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      audioStream_Response_descriptor_,
      audioStream_Response::default_instance_,
      audioStream_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(audioStream_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(audioStream_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(audioStream_Response));
  videoStream_Request_descriptor_ = file->message_type(26);
  static const int videoStream_Request_offsets_[1] = {
  };
  videoStream_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      videoStream_Request_descriptor_,
      videoStream_Request::default_instance_,
      videoStream_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(videoStream_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(videoStream_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(videoStream_Request));
  videoStream_Response_descriptor_ = file->message_type(27);
  static const int videoStream_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(videoStream_Response, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(videoStream_Response, fileinforesultlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(videoStream_Response, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(videoStream_Response, errmsg_),
  };
  videoStream_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      videoStream_Response_descriptor_,
      videoStream_Response::default_instance_,
      videoStream_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(videoStream_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(videoStream_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(videoStream_Response));
  docStream_Request_descriptor_ = file->message_type(28);
  static const int docStream_Request_offsets_[1] = {
  };
  docStream_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      docStream_Request_descriptor_,
      docStream_Request::default_instance_,
      docStream_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(docStream_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(docStream_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(docStream_Request));
  docStream_Response_descriptor_ = file->message_type(29);
  static const int docStream_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(docStream_Response, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(docStream_Response, fileinforesultlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(docStream_Response, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(docStream_Response, errmsg_),
  };
  docStream_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      docStream_Response_descriptor_,
      docStream_Response::default_instance_,
      docStream_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(docStream_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(docStream_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(docStream_Response));
  quota_Request_descriptor_ = file->message_type(30);
  static const int quota_Request_offsets_[1] = {
  };
  quota_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      quota_Request_descriptor_,
      quota_Request::default_instance_,
      quota_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quota_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quota_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(quota_Request));
  quota_Response_descriptor_ = file->message_type(31);
  static const int quota_Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quota_Response, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quota_Response, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quota_Response, used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quota_Response, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quota_Response, errmsg_),
  };
  quota_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      quota_Response_descriptor_,
      quota_Response::default_instance_,
      quota_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quota_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quota_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(quota_Response));
  thumbnail_Request_descriptor_ = file->message_type(32);
  static const int thumbnail_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thumbnail_Request, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thumbnail_Request, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thumbnail_Request, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thumbnail_Request, height_),
  };
  thumbnail_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      thumbnail_Request_descriptor_,
      thumbnail_Request::default_instance_,
      thumbnail_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thumbnail_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thumbnail_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(thumbnail_Request));
  thumbnail_Response_descriptor_ = file->message_type(33);
  static const int thumbnail_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thumbnail_Response, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thumbnail_Response, bitmapstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thumbnail_Response, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thumbnail_Response, errmsg_),
  };
  thumbnail_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      thumbnail_Response_descriptor_,
      thumbnail_Response::default_instance_,
      thumbnail_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thumbnail_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(thumbnail_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(thumbnail_Response));
  vibrate_Request_descriptor_ = file->message_type(34);
  static const int vibrate_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vibrate_Request, time_),
  };
  vibrate_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vibrate_Request_descriptor_,
      vibrate_Request::default_instance_,
      vibrate_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vibrate_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vibrate_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vibrate_Request));
  vibrate_Response_descriptor_ = file->message_type(35);
  static const int vibrate_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vibrate_Response, issuccess_),
  };
  vibrate_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vibrate_Response_descriptor_,
      vibrate_Response::default_instance_,
      vibrate_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vibrate_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vibrate_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vibrate_Response));
  vibrateWithPattern_Request_descriptor_ = file->message_type(36);
  static const int vibrateWithPattern_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vibrateWithPattern_Request, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vibrateWithPattern_Request, repeattime_),
  };
  vibrateWithPattern_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vibrateWithPattern_Request_descriptor_,
      vibrateWithPattern_Request::default_instance_,
      vibrateWithPattern_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vibrateWithPattern_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vibrateWithPattern_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vibrateWithPattern_Request));
  vibrateWithPattern_Response_descriptor_ = file->message_type(37);
  static const int vibrateWithPattern_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vibrateWithPattern_Response, issuccess_),
  };
  vibrateWithPattern_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vibrateWithPattern_Response_descriptor_,
      vibrateWithPattern_Response::default_instance_,
      vibrateWithPattern_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vibrateWithPattern_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vibrateWithPattern_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vibrateWithPattern_Response));
  cancelVibrate_Request_descriptor_ = file->message_type(38);
  static const int cancelVibrate_Request_offsets_[1] = {
  };
  cancelVibrate_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cancelVibrate_Request_descriptor_,
      cancelVibrate_Request::default_instance_,
      cancelVibrate_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelVibrate_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelVibrate_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cancelVibrate_Request));
  cancelVibrate_Response_descriptor_ = file->message_type(39);
  static const int cancelVibrate_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelVibrate_Response, issuccess_),
  };
  cancelVibrate_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cancelVibrate_Response_descriptor_,
      cancelVibrate_Response::default_instance_,
      cancelVibrate_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelVibrate_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelVibrate_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cancelVibrate_Response));
  AudioManager_getStreamVolume_Request_descriptor_ = file->message_type(40);
  static const int AudioManager_getStreamVolume_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamVolume_Request, streamtype_),
  };
  AudioManager_getStreamVolume_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioManager_getStreamVolume_Request_descriptor_,
      AudioManager_getStreamVolume_Request::default_instance_,
      AudioManager_getStreamVolume_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamVolume_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamVolume_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioManager_getStreamVolume_Request));
  AudioManager_getStreamVolume_Response_descriptor_ = file->message_type(41);
  static const int AudioManager_getStreamVolume_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamVolume_Response, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamVolume_Response, value_),
  };
  AudioManager_getStreamVolume_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioManager_getStreamVolume_Response_descriptor_,
      AudioManager_getStreamVolume_Response::default_instance_,
      AudioManager_getStreamVolume_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamVolume_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamVolume_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioManager_getStreamVolume_Response));
  AudioManager_setStreamVolume_Request_descriptor_ = file->message_type(42);
  static const int AudioManager_setStreamVolume_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamVolume_Request, streamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamVolume_Request, value_),
  };
  AudioManager_setStreamVolume_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioManager_setStreamVolume_Request_descriptor_,
      AudioManager_setStreamVolume_Request::default_instance_,
      AudioManager_setStreamVolume_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamVolume_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamVolume_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioManager_setStreamVolume_Request));
  AudioManager_setStreamVolume_Response_descriptor_ = file->message_type(43);
  static const int AudioManager_setStreamVolume_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamVolume_Response, issuccess_),
  };
  AudioManager_setStreamVolume_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioManager_setStreamVolume_Response_descriptor_,
      AudioManager_setStreamVolume_Response::default_instance_,
      AudioManager_setStreamVolume_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamVolume_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamVolume_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioManager_setStreamVolume_Response));
  AudioManager_getStreamMaxVolume_Request_descriptor_ = file->message_type(44);
  static const int AudioManager_getStreamMaxVolume_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamMaxVolume_Request, streamtype_),
  };
  AudioManager_getStreamMaxVolume_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioManager_getStreamMaxVolume_Request_descriptor_,
      AudioManager_getStreamMaxVolume_Request::default_instance_,
      AudioManager_getStreamMaxVolume_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamMaxVolume_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamMaxVolume_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioManager_getStreamMaxVolume_Request));
  AudioManager_getStreamMaxVolume_Response_descriptor_ = file->message_type(45);
  static const int AudioManager_getStreamMaxVolume_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamMaxVolume_Response, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamMaxVolume_Response, value_),
  };
  AudioManager_getStreamMaxVolume_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioManager_getStreamMaxVolume_Response_descriptor_,
      AudioManager_getStreamMaxVolume_Response::default_instance_,
      AudioManager_getStreamMaxVolume_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamMaxVolume_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_getStreamMaxVolume_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioManager_getStreamMaxVolume_Response));
  AudioManager_setStreamMute_Request_descriptor_ = file->message_type(46);
  static const int AudioManager_setStreamMute_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamMute_Request, streamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamMute_Request, value_),
  };
  AudioManager_setStreamMute_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioManager_setStreamMute_Request_descriptor_,
      AudioManager_setStreamMute_Request::default_instance_,
      AudioManager_setStreamMute_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamMute_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamMute_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioManager_setStreamMute_Request));
  AudioManager_setStreamMute_Response_descriptor_ = file->message_type(47);
  static const int AudioManager_setStreamMute_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamMute_Response, issuccess_),
  };
  AudioManager_setStreamMute_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioManager_setStreamMute_Response_descriptor_,
      AudioManager_setStreamMute_Response::default_instance_,
      AudioManager_setStreamMute_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamMute_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioManager_setStreamMute_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioManager_setStreamMute_Response));
  openURL_Request_descriptor_ = file->message_type(48);
  static const int openURL_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openURL_Request, url_),
  };
  openURL_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      openURL_Request_descriptor_,
      openURL_Request::default_instance_,
      openURL_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openURL_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openURL_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(openURL_Request));
  openURL_Response_descriptor_ = file->message_type(49);
  static const int openURL_Response_offsets_[1] = {
  };
  openURL_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      openURL_Response_descriptor_,
      openURL_Response::default_instance_,
      openURL_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openURL_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(openURL_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(openURL_Response));
  getMemoryInfo_Request_descriptor_ = file->message_type(50);
  static const int getMemoryInfo_Request_offsets_[1] = {
  };
  getMemoryInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getMemoryInfo_Request_descriptor_,
      getMemoryInfo_Request::default_instance_,
      getMemoryInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getMemoryInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getMemoryInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getMemoryInfo_Request));
  getMemoryInfo_Response_descriptor_ = file->message_type(51);
  static const int getMemoryInfo_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getMemoryInfo_Response, availmem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getMemoryInfo_Response, totalmem_),
  };
  getMemoryInfo_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getMemoryInfo_Response_descriptor_,
      getMemoryInfo_Response::default_instance_,
      getMemoryInfo_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getMemoryInfo_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getMemoryInfo_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getMemoryInfo_Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LocalBridgePB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrontiaUser_descriptor_, &FrontiaUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileInfoResult_descriptor_, &FileInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_Request_descriptor_, &login_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_Response_descriptor_, &login_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    logout_Request_descriptor_, &logout_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    logout_Response_descriptor_, &logout_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    isLogin_Request_descriptor_, &isLogin_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    isLogin_Response_descriptor_, &isLogin_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    makeDir_Request_descriptor_, &makeDir_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    makeDir_Response_descriptor_, &makeDir_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    deleteFile_Request_descriptor_, &deleteFile_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    deleteFile_Response_descriptor_, &deleteFile_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    uploadFile_Request_descriptor_, &uploadFile_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    uploadFile_Response_descriptor_, &uploadFile_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stopTransferring_Request_descriptor_, &stopTransferring_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stopTransferring_Response_descriptor_, &stopTransferring_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    downloadFile_Request_descriptor_, &downloadFile_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    downloadFile_Response_descriptor_, &downloadFile_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    downloadFileFromStream_Request_descriptor_, &downloadFileFromStream_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    downloadFileFromStream_Response_descriptor_, &downloadFileFromStream_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    list_Request_descriptor_, &list_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    list_Response_descriptor_, &list_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    imageStream_Request_descriptor_, &imageStream_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    imageStream_Response_descriptor_, &imageStream_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    audioStream_Request_descriptor_, &audioStream_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    audioStream_Response_descriptor_, &audioStream_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    videoStream_Request_descriptor_, &videoStream_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    videoStream_Response_descriptor_, &videoStream_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    docStream_Request_descriptor_, &docStream_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    docStream_Response_descriptor_, &docStream_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    quota_Request_descriptor_, &quota_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    quota_Response_descriptor_, &quota_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    thumbnail_Request_descriptor_, &thumbnail_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    thumbnail_Response_descriptor_, &thumbnail_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vibrate_Request_descriptor_, &vibrate_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vibrate_Response_descriptor_, &vibrate_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vibrateWithPattern_Request_descriptor_, &vibrateWithPattern_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vibrateWithPattern_Response_descriptor_, &vibrateWithPattern_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cancelVibrate_Request_descriptor_, &cancelVibrate_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cancelVibrate_Response_descriptor_, &cancelVibrate_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioManager_getStreamVolume_Request_descriptor_, &AudioManager_getStreamVolume_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioManager_getStreamVolume_Response_descriptor_, &AudioManager_getStreamVolume_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioManager_setStreamVolume_Request_descriptor_, &AudioManager_setStreamVolume_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioManager_setStreamVolume_Response_descriptor_, &AudioManager_setStreamVolume_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioManager_getStreamMaxVolume_Request_descriptor_, &AudioManager_getStreamMaxVolume_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioManager_getStreamMaxVolume_Response_descriptor_, &AudioManager_getStreamMaxVolume_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioManager_setStreamMute_Request_descriptor_, &AudioManager_setStreamMute_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioManager_setStreamMute_Response_descriptor_, &AudioManager_setStreamMute_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    openURL_Request_descriptor_, &openURL_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    openURL_Response_descriptor_, &openURL_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getMemoryInfo_Request_descriptor_, &getMemoryInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getMemoryInfo_Response_descriptor_, &getMemoryInfo_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LocalBridgePB_2eproto() {
  delete FrontiaUser::default_instance_;
  delete FrontiaUser_reflection_;
  delete FileInfoResult::default_instance_;
  delete FileInfoResult_reflection_;
  delete login_Request::default_instance_;
  delete login_Request_reflection_;
  delete login_Request::_default_mediatype_;
  delete login_Response::default_instance_;
  delete login_Response_reflection_;
  delete logout_Request::default_instance_;
  delete logout_Request_reflection_;
  delete logout_Request::_default_mediatype_;
  delete logout_Response::default_instance_;
  delete logout_Response_reflection_;
  delete isLogin_Request::default_instance_;
  delete isLogin_Request_reflection_;
  delete isLogin_Request::_default_mediatype_;
  delete isLogin_Response::default_instance_;
  delete isLogin_Response_reflection_;
  delete makeDir_Request::default_instance_;
  delete makeDir_Request_reflection_;
  delete makeDir_Response::default_instance_;
  delete makeDir_Response_reflection_;
  delete deleteFile_Request::default_instance_;
  delete deleteFile_Request_reflection_;
  delete deleteFile_Response::default_instance_;
  delete deleteFile_Response_reflection_;
  delete uploadFile_Request::default_instance_;
  delete uploadFile_Request_reflection_;
  delete uploadFile_Response::default_instance_;
  delete uploadFile_Response_reflection_;
  delete stopTransferring_Request::default_instance_;
  delete stopTransferring_Request_reflection_;
  delete stopTransferring_Response::default_instance_;
  delete stopTransferring_Response_reflection_;
  delete downloadFile_Request::default_instance_;
  delete downloadFile_Request_reflection_;
  delete downloadFile_Response::default_instance_;
  delete downloadFile_Response_reflection_;
  delete downloadFileFromStream_Request::default_instance_;
  delete downloadFileFromStream_Request_reflection_;
  delete downloadFileFromStream_Response::default_instance_;
  delete downloadFileFromStream_Response_reflection_;
  delete list_Request::default_instance_;
  delete list_Request_reflection_;
  delete list_Response::default_instance_;
  delete list_Response_reflection_;
  delete imageStream_Request::default_instance_;
  delete imageStream_Request_reflection_;
  delete imageStream_Response::default_instance_;
  delete imageStream_Response_reflection_;
  delete audioStream_Request::default_instance_;
  delete audioStream_Request_reflection_;
  delete audioStream_Response::default_instance_;
  delete audioStream_Response_reflection_;
  delete videoStream_Request::default_instance_;
  delete videoStream_Request_reflection_;
  delete videoStream_Response::default_instance_;
  delete videoStream_Response_reflection_;
  delete docStream_Request::default_instance_;
  delete docStream_Request_reflection_;
  delete docStream_Response::default_instance_;
  delete docStream_Response_reflection_;
  delete quota_Request::default_instance_;
  delete quota_Request_reflection_;
  delete quota_Response::default_instance_;
  delete quota_Response_reflection_;
  delete thumbnail_Request::default_instance_;
  delete thumbnail_Request_reflection_;
  delete thumbnail_Response::default_instance_;
  delete thumbnail_Response_reflection_;
  delete vibrate_Request::default_instance_;
  delete vibrate_Request_reflection_;
  delete vibrate_Response::default_instance_;
  delete vibrate_Response_reflection_;
  delete vibrateWithPattern_Request::default_instance_;
  delete vibrateWithPattern_Request_reflection_;
  delete vibrateWithPattern_Response::default_instance_;
  delete vibrateWithPattern_Response_reflection_;
  delete cancelVibrate_Request::default_instance_;
  delete cancelVibrate_Request_reflection_;
  delete cancelVibrate_Response::default_instance_;
  delete cancelVibrate_Response_reflection_;
  delete AudioManager_getStreamVolume_Request::default_instance_;
  delete AudioManager_getStreamVolume_Request_reflection_;
  delete AudioManager_getStreamVolume_Response::default_instance_;
  delete AudioManager_getStreamVolume_Response_reflection_;
  delete AudioManager_setStreamVolume_Request::default_instance_;
  delete AudioManager_setStreamVolume_Request_reflection_;
  delete AudioManager_setStreamVolume_Response::default_instance_;
  delete AudioManager_setStreamVolume_Response_reflection_;
  delete AudioManager_getStreamMaxVolume_Request::default_instance_;
  delete AudioManager_getStreamMaxVolume_Request_reflection_;
  delete AudioManager_getStreamMaxVolume_Response::default_instance_;
  delete AudioManager_getStreamMaxVolume_Response_reflection_;
  delete AudioManager_setStreamMute_Request::default_instance_;
  delete AudioManager_setStreamMute_Request_reflection_;
  delete AudioManager_setStreamMute_Response::default_instance_;
  delete AudioManager_setStreamMute_Response_reflection_;
  delete openURL_Request::default_instance_;
  delete openURL_Request_reflection_;
  delete openURL_Response::default_instance_;
  delete openURL_Response_reflection_;
  delete getMemoryInfo_Request::default_instance_;
  delete getMemoryInfo_Request_reflection_;
  delete getMemoryInfo_Response::default_instance_;
  delete getMemoryInfo_Response_reflection_;
}

void protobuf_AddDesc_LocalBridgePB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023LocalBridgePB.proto\022\020org.cocos2dx.lua\""
    "\250\001\n\013FrontiaUser\022\023\n\013accessToken\030\001 \001(\t\022\030\n\020"
    "baiduAccessToken\030\002 \001(\t\022\026\n\016baiduExpiresIn"
    "\030\003 \001(\003\022\021\n\texpiresIn\030\004 \001(\003\022\n\n\002id\030\005 \001(\t\022\023\n"
    "\013mediaUserId\030\006 \001(\t\022\014\n\004name\030\007 \001(\t\022\020\n\010plat"
    "form\030\010 \001(\t\"\222\001\n\016FileInfoResult\022\022\n\ncreateT"
    "ime\030\001 \001(\003\022\n\n\002id\030\002 \001(\003\022\013\n\003md5\030\003 \001(\t\022\022\n\nmo"
    "difyTime\030\004 \001(\003\022\014\n\004path\030\005 \001(\t\022\014\n\004size\030\006 \001"
    "(\003\022\024\n\014hasSubFolder\030\007 \001(\010\022\r\n\005isDir\030\010 \001(\010\""
    ")\n\rlogin_Request\022\030\n\tmediaType\030\001 \001(\t:\005BAI"
    "DU\"{\n\016login_Response\022\022\n\nstatusCode\030\001 \002(\005"
    "\0222\n\013frontiaUser\030e \001(\0132\035.org.cocos2dx.lua"
    ".FrontiaUser\022\020\n\007errCode\030\311\001 \001(\005\022\017\n\006errMsg"
    "\030\312\001 \001(\t\"*\n\016logout_Request\022\030\n\tmediaType\030\001"
    " \001(\t:\005BAIDU\"$\n\017logout_Response\022\021\n\tissucc"
    "ess\030\001 \002(\005\"+\n\017isLogin_Request\022\030\n\tmediaTyp"
    "e\030\001 \001(\t:\005BAIDU\"%\n\020isLogin_Response\022\021\n\tis"
    "success\030\001 \002(\005\"\"\n\017makeDir_Request\022\017\n\007dirN"
    "ame\030\001 \002(\t\"\203\001\n\020makeDir_Response\022\022\n\nstatus"
    "Code\030\001 \002(\005\0228\n\016fileInfoResult\030e \001(\0132 .org"
    ".cocos2dx.lua.FileInfoResult\022\020\n\007errCode\030"
    "\311\001 \001(\005\022\017\n\006errMsg\030\312\001 \001(\t\"+\n\022deleteFile_Re"
    "quest\022\025\n\rdirOrFileName\030\001 \002(\t\"\\\n\023deleteFi"
    "le_Response\022\022\n\nstatusCode\030\001 \002(\005\022\016\n\006sourc"
    "e\030e \001(\t\022\020\n\007errCode\030\311\001 \001(\005\022\017\n\006errMsg\030\312\001 \001"
    "(\t\">\n\022uploadFile_Request\022\024\n\014fromFileName"
    "\030\001 \002(\t\022\022\n\ntoFileName\030\002 \002(\t\"\367\001\n\023uploadFil"
    "e_Response\022\022\n\nstatusCode\030\001 \002(\005\022\030\n\020onSucc"
    "ess_source\030e \001(\t\0228\n\016fileInfoResult\030f \001(\013"
    "2 .org.cocos2dx.lua.FileInfoResult\022\031\n\020on"
    "Failure_source\030\311\001 \001(\t\022\020\n\007errCode\030\312\001 \001(\005\022"
    "\017\n\006errMsg\030\313\001 \001(\t\022\032\n\021onProgress_source\030\255\002"
    " \001(\t\022\016\n\005bytes\030\256\002 \001(\003\022\016\n\005total\030\257\002 \001(\003\"D\n\030"
    "stopTransferring_Request\022\024\n\014fromFileName"
    "\030\001 \002(\t\022\022\n\ntoFileName\030\002 \002(\t\".\n\031stopTransf"
    "erring_Response\022\021\n\tissuccess\030\001 \002(\005\"@\n\024do"
    "wnloadFile_Request\022\024\n\014fromFileName\030\001 \002(\t"
    "\022\022\n\ntoFileName\030\002 \002(\t\"\326\001\n\025downloadFile_Re"
    "sponse\022\022\n\nstatusCode\030\001 \002(\005\022\030\n\020onSuccess_"
    "source\030e \001(\t\022\025\n\rnewTargetName\030f \001(\t\022\031\n\020o"
    "nFailure_source\030\311\001 \001(\t\022\020\n\007errCode\030\312\001 \001(\005"
    "\022\017\n\006errMsg\030\313\001 \001(\t\022\032\n\021onProgress_source\030\255"
    "\002 \001(\t\022\016\n\005bytes\030\256\002 \001(\003\022\016\n\005total\030\257\002 \001(\003\"J\n"
    "\036downloadFileFromStream_Request\022\024\n\014fromF"
    "ileName\030\001 \002(\t\022\022\n\ntoFileName\030\002 \002(\t\"\340\001\n\037do"
    "wnloadFileFromStream_Response\022\022\n\nstatusC"
    "ode\030\001 \002(\005\022\030\n\020onSuccess_source\030e \001(\t\022\025\n\rn"
    "ewTargetName\030f \001(\t\022\031\n\020onFailure_source\030\311"
    "\001 \001(\t\022\020\n\007errCode\030\312\001 \001(\005\022\017\n\006errMsg\030\313\001 \001(\t"
    "\022\032\n\021onProgress_source\030\255\002 \001(\t\022\016\n\005bytes\030\256\002"
    " \001(\003\022\016\n\005total\030\257\002 \001(\003\"\037\n\014list_Request\022\017\n\007"
    "dirName\030\001 \002(\t\"\204\001\n\rlist_Response\022\022\n\nstatu"
    "sCode\030\001 \002(\005\022<\n\022fileInfoResultList\030e \003(\0132"
    " .org.cocos2dx.lua.FileInfoResult\022\020\n\007err"
    "Code\030\311\001 \001(\005\022\017\n\006errMsg\030\312\001 \001(\t\"\025\n\023imageStr"
    "eam_Request\"\213\001\n\024imageStream_Response\022\022\n\n"
    "statusCode\030\001 \002(\005\022<\n\022fileInfoResultList\030e"
    " \003(\0132 .org.cocos2dx.lua.FileInfoResult\022\020"
    "\n\007errCode\030\311\001 \001(\005\022\017\n\006errMsg\030\312\001 \001(\t\"\025\n\023aud"
    "ioStream_Request\"\213\001\n\024audioStream_Respons"
    "e\022\022\n\nstatusCode\030\001 \002(\005\022<\n\022fileInfoResultL"
    "ist\030e \003(\0132 .org.cocos2dx.lua.FileInfoRes"
    "ult\022\020\n\007errCode\030\311\001 \001(\005\022\017\n\006errMsg\030\312\001 \001(\t\"\025"
    "\n\023videoStream_Request\"\213\001\n\024videoStream_Re"
    "sponse\022\022\n\nstatusCode\030\001 \002(\005\022<\n\022fileInfoRe"
    "sultList\030e \003(\0132 .org.cocos2dx.lua.FileIn"
    "foResult\022\020\n\007errCode\030\311\001 \001(\005\022\017\n\006errMsg\030\312\001 "
    "\001(\t\"\023\n\021docStream_Request\"\211\001\n\022docStream_R"
    "esponse\022\022\n\nstatusCode\030\001 \002(\005\022<\n\022fileInfoR"
    "esultList\030e \003(\0132 .org.cocos2dx.lua.FileI"
    "nfoResult\022\020\n\007errCode\030\311\001 \001(\005\022\017\n\006errMsg\030\312\001"
    " \001(\t\"\017\n\rquota_Request\"d\n\016quota_Response\022"
    "\022\n\nstatusCode\030\001 \002(\005\022\r\n\005total\030e \001(\003\022\014\n\004us"
    "ed\030f \001(\003\022\020\n\007errCode\030\311\001 \001(\005\022\017\n\006errMsg\030\312\001 "
    "\001(\t\"a\n\021thumbnail_Request\022\020\n\010fileName\030\001 \002"
    "(\t\022\023\n\007quality\030\002 \001(\005:\00210\022\021\n\005width\030\003 \001(\005:\002"
    "10\022\022\n\006height\030\004 \001(\005:\00210\"^\n\022thumbnail_Resp"
    "onse\022\022\n\nstatusCode\030\001 \002(\005\022\021\n\tbitmapStr\030e "
    "\001(\t\022\020\n\007errCode\030\311\001 \001(\005\022\017\n\006errMsg\030\312\001 \001(\t\"#"
    "\n\017vibrate_Request\022\020\n\004time\030\001 \001(\005:\00210\"%\n\020v"
    "ibrate_Response\022\021\n\tissuccess\030\001 \002(\005\"D\n\032vi"
    "brateWithPattern_Request\022\017\n\007pattern\030\001 \003("
    "\005\022\025\n\nrepeatTime\030\002 \001(\005:\0011\"0\n\033vibrateWithP"
    "attern_Response\022\021\n\tissuccess\030\001 \002(\005\"\027\n\025ca"
    "ncelVibrate_Request\"+\n\026cancelVibrate_Res"
    "ponse\022\021\n\tissuccess\030\001 \002(\005\"=\n$AudioManager"
    "_getStreamVolume_Request\022\025\n\nstreamType\030\001"
    " \002(\005:\0013\"I\n%AudioManager_getStreamVolume_"
    "Response\022\021\n\tissuccess\030\001 \002(\005\022\r\n\005value\030\002 \002"
    "(\005\"L\n$AudioManager_setStreamVolume_Reque"
    "st\022\025\n\nstreamType\030\001 \002(\005:\0013\022\r\n\005value\030\002 \002(\005"
    "\":\n%AudioManager_setStreamVolume_Respons"
    "e\022\021\n\tissuccess\030\001 \002(\005\"@\n\'AudioManager_get"
    "StreamMaxVolume_Request\022\025\n\nstreamType\030\001 "
    "\002(\005:\0013\"L\n(AudioManager_getStreamMaxVolum"
    "e_Response\022\021\n\tissuccess\030\001 \002(\005\022\r\n\005value\030\002"
    " \002(\005\"J\n\"AudioManager_setStreamMute_Reque"
    "st\022\025\n\nstreamType\030\001 \002(\005:\0013\022\r\n\005value\030\002 \002(\005"
    "\"8\n#AudioManager_setStreamMute_Response\022"
    "\021\n\tissuccess\030\001 \002(\005\"\036\n\017openURL_Request\022\013\n"
    "\003url\030\001 \001(\t\"\022\n\020openURL_Response\"\027\n\025getMem"
    "oryInfo_Request\"<\n\026getMemoryInfo_Respons"
    "e\022\020\n\010availMem\030\001 \002(\003\022\020\n\010totalMem\030\002 \002(\003", 4117);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LocalBridgePB.proto", &protobuf_RegisterTypes);
  FrontiaUser::default_instance_ = new FrontiaUser();
  FileInfoResult::default_instance_ = new FileInfoResult();
  login_Request::_default_mediatype_ =
      new ::std::string("BAIDU", 5);
  login_Request::default_instance_ = new login_Request();
  login_Response::default_instance_ = new login_Response();
  logout_Request::_default_mediatype_ =
      new ::std::string("BAIDU", 5);
  logout_Request::default_instance_ = new logout_Request();
  logout_Response::default_instance_ = new logout_Response();
  isLogin_Request::_default_mediatype_ =
      new ::std::string("BAIDU", 5);
  isLogin_Request::default_instance_ = new isLogin_Request();
  isLogin_Response::default_instance_ = new isLogin_Response();
  makeDir_Request::default_instance_ = new makeDir_Request();
  makeDir_Response::default_instance_ = new makeDir_Response();
  deleteFile_Request::default_instance_ = new deleteFile_Request();
  deleteFile_Response::default_instance_ = new deleteFile_Response();
  uploadFile_Request::default_instance_ = new uploadFile_Request();
  uploadFile_Response::default_instance_ = new uploadFile_Response();
  stopTransferring_Request::default_instance_ = new stopTransferring_Request();
  stopTransferring_Response::default_instance_ = new stopTransferring_Response();
  downloadFile_Request::default_instance_ = new downloadFile_Request();
  downloadFile_Response::default_instance_ = new downloadFile_Response();
  downloadFileFromStream_Request::default_instance_ = new downloadFileFromStream_Request();
  downloadFileFromStream_Response::default_instance_ = new downloadFileFromStream_Response();
  list_Request::default_instance_ = new list_Request();
  list_Response::default_instance_ = new list_Response();
  imageStream_Request::default_instance_ = new imageStream_Request();
  imageStream_Response::default_instance_ = new imageStream_Response();
  audioStream_Request::default_instance_ = new audioStream_Request();
  audioStream_Response::default_instance_ = new audioStream_Response();
  videoStream_Request::default_instance_ = new videoStream_Request();
  videoStream_Response::default_instance_ = new videoStream_Response();
  docStream_Request::default_instance_ = new docStream_Request();
  docStream_Response::default_instance_ = new docStream_Response();
  quota_Request::default_instance_ = new quota_Request();
  quota_Response::default_instance_ = new quota_Response();
  thumbnail_Request::default_instance_ = new thumbnail_Request();
  thumbnail_Response::default_instance_ = new thumbnail_Response();
  vibrate_Request::default_instance_ = new vibrate_Request();
  vibrate_Response::default_instance_ = new vibrate_Response();
  vibrateWithPattern_Request::default_instance_ = new vibrateWithPattern_Request();
  vibrateWithPattern_Response::default_instance_ = new vibrateWithPattern_Response();
  cancelVibrate_Request::default_instance_ = new cancelVibrate_Request();
  cancelVibrate_Response::default_instance_ = new cancelVibrate_Response();
  AudioManager_getStreamVolume_Request::default_instance_ = new AudioManager_getStreamVolume_Request();
  AudioManager_getStreamVolume_Response::default_instance_ = new AudioManager_getStreamVolume_Response();
  AudioManager_setStreamVolume_Request::default_instance_ = new AudioManager_setStreamVolume_Request();
  AudioManager_setStreamVolume_Response::default_instance_ = new AudioManager_setStreamVolume_Response();
  AudioManager_getStreamMaxVolume_Request::default_instance_ = new AudioManager_getStreamMaxVolume_Request();
  AudioManager_getStreamMaxVolume_Response::default_instance_ = new AudioManager_getStreamMaxVolume_Response();
  AudioManager_setStreamMute_Request::default_instance_ = new AudioManager_setStreamMute_Request();
  AudioManager_setStreamMute_Response::default_instance_ = new AudioManager_setStreamMute_Response();
  openURL_Request::default_instance_ = new openURL_Request();
  openURL_Response::default_instance_ = new openURL_Response();
  getMemoryInfo_Request::default_instance_ = new getMemoryInfo_Request();
  getMemoryInfo_Response::default_instance_ = new getMemoryInfo_Response();
  FrontiaUser::default_instance_->InitAsDefaultInstance();
  FileInfoResult::default_instance_->InitAsDefaultInstance();
  login_Request::default_instance_->InitAsDefaultInstance();
  login_Response::default_instance_->InitAsDefaultInstance();
  logout_Request::default_instance_->InitAsDefaultInstance();
  logout_Response::default_instance_->InitAsDefaultInstance();
  isLogin_Request::default_instance_->InitAsDefaultInstance();
  isLogin_Response::default_instance_->InitAsDefaultInstance();
  makeDir_Request::default_instance_->InitAsDefaultInstance();
  makeDir_Response::default_instance_->InitAsDefaultInstance();
  deleteFile_Request::default_instance_->InitAsDefaultInstance();
  deleteFile_Response::default_instance_->InitAsDefaultInstance();
  uploadFile_Request::default_instance_->InitAsDefaultInstance();
  uploadFile_Response::default_instance_->InitAsDefaultInstance();
  stopTransferring_Request::default_instance_->InitAsDefaultInstance();
  stopTransferring_Response::default_instance_->InitAsDefaultInstance();
  downloadFile_Request::default_instance_->InitAsDefaultInstance();
  downloadFile_Response::default_instance_->InitAsDefaultInstance();
  downloadFileFromStream_Request::default_instance_->InitAsDefaultInstance();
  downloadFileFromStream_Response::default_instance_->InitAsDefaultInstance();
  list_Request::default_instance_->InitAsDefaultInstance();
  list_Response::default_instance_->InitAsDefaultInstance();
  imageStream_Request::default_instance_->InitAsDefaultInstance();
  imageStream_Response::default_instance_->InitAsDefaultInstance();
  audioStream_Request::default_instance_->InitAsDefaultInstance();
  audioStream_Response::default_instance_->InitAsDefaultInstance();
  videoStream_Request::default_instance_->InitAsDefaultInstance();
  videoStream_Response::default_instance_->InitAsDefaultInstance();
  docStream_Request::default_instance_->InitAsDefaultInstance();
  docStream_Response::default_instance_->InitAsDefaultInstance();
  quota_Request::default_instance_->InitAsDefaultInstance();
  quota_Response::default_instance_->InitAsDefaultInstance();
  thumbnail_Request::default_instance_->InitAsDefaultInstance();
  thumbnail_Response::default_instance_->InitAsDefaultInstance();
  vibrate_Request::default_instance_->InitAsDefaultInstance();
  vibrate_Response::default_instance_->InitAsDefaultInstance();
  vibrateWithPattern_Request::default_instance_->InitAsDefaultInstance();
  vibrateWithPattern_Response::default_instance_->InitAsDefaultInstance();
  cancelVibrate_Request::default_instance_->InitAsDefaultInstance();
  cancelVibrate_Response::default_instance_->InitAsDefaultInstance();
  AudioManager_getStreamVolume_Request::default_instance_->InitAsDefaultInstance();
  AudioManager_getStreamVolume_Response::default_instance_->InitAsDefaultInstance();
  AudioManager_setStreamVolume_Request::default_instance_->InitAsDefaultInstance();
  AudioManager_setStreamVolume_Response::default_instance_->InitAsDefaultInstance();
  AudioManager_getStreamMaxVolume_Request::default_instance_->InitAsDefaultInstance();
  AudioManager_getStreamMaxVolume_Response::default_instance_->InitAsDefaultInstance();
  AudioManager_setStreamMute_Request::default_instance_->InitAsDefaultInstance();
  AudioManager_setStreamMute_Response::default_instance_->InitAsDefaultInstance();
  openURL_Request::default_instance_->InitAsDefaultInstance();
  openURL_Response::default_instance_->InitAsDefaultInstance();
  getMemoryInfo_Request::default_instance_->InitAsDefaultInstance();
  getMemoryInfo_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LocalBridgePB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LocalBridgePB_2eproto {
  StaticDescriptorInitializer_LocalBridgePB_2eproto() {
    protobuf_AddDesc_LocalBridgePB_2eproto();
  }
} static_descriptor_initializer_LocalBridgePB_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FrontiaUser::kAccessTokenFieldNumber;
const int FrontiaUser::kBaiduAccessTokenFieldNumber;
const int FrontiaUser::kBaiduExpiresInFieldNumber;
const int FrontiaUser::kExpiresInFieldNumber;
const int FrontiaUser::kIdFieldNumber;
const int FrontiaUser::kMediaUserIdFieldNumber;
const int FrontiaUser::kNameFieldNumber;
const int FrontiaUser::kPlatformFieldNumber;
#endif  // !_MSC_VER

FrontiaUser::FrontiaUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.FrontiaUser)
}

void FrontiaUser::InitAsDefaultInstance() {
}

FrontiaUser::FrontiaUser(const FrontiaUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.FrontiaUser)
}

void FrontiaUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baiduaccesstoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baiduexpiresin_ = GOOGLE_LONGLONG(0);
  expiresin_ = GOOGLE_LONGLONG(0);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mediauserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrontiaUser::~FrontiaUser() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.FrontiaUser)
  SharedDtor();
}

void FrontiaUser::SharedDtor() {
  if (accesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accesstoken_;
  }
  if (baiduaccesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete baiduaccesstoken_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (mediauserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mediauserid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void FrontiaUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrontiaUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrontiaUser_descriptor_;
}

const FrontiaUser& FrontiaUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

FrontiaUser* FrontiaUser::default_instance_ = NULL;

FrontiaUser* FrontiaUser::New() const {
  return new FrontiaUser;
}

void FrontiaUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FrontiaUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(baiduexpiresin_, expiresin_);
    if (has_accesstoken()) {
      if (accesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accesstoken_->clear();
      }
    }
    if (has_baiduaccesstoken()) {
      if (baiduaccesstoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        baiduaccesstoken_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_mediauserid()) {
      if (mediauserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mediauserid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrontiaUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.FrontiaUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string accessToken = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesstoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accesstoken().data(), this->accesstoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accesstoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_baiduAccessToken;
        break;
      }

      // optional string baiduAccessToken = 2;
      case 2: {
        if (tag == 18) {
         parse_baiduAccessToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_baiduaccesstoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->baiduaccesstoken().data(), this->baiduaccesstoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "baiduaccesstoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_baiduExpiresIn;
        break;
      }

      // optional int64 baiduExpiresIn = 3;
      case 3: {
        if (tag == 24) {
         parse_baiduExpiresIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &baiduexpiresin_)));
          set_has_baiduexpiresin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expiresIn;
        break;
      }

      // optional int64 expiresIn = 4;
      case 4: {
        if (tag == 32) {
         parse_expiresIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiresin_)));
          set_has_expiresin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_id;
        break;
      }

      // optional string id = 5;
      case 5: {
        if (tag == 42) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mediaUserId;
        break;
      }

      // optional string mediaUserId = 6;
      case 6: {
        if (tag == 50) {
         parse_mediaUserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mediauserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mediauserid().data(), this->mediauserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mediauserid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_platform;
        break;
      }

      // optional string platform = 8;
      case 8: {
        if (tag == 66) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.FrontiaUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.FrontiaUser)
  return false;
#undef DO_
}

void FrontiaUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.FrontiaUser)
  // optional string accessToken = 1;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accesstoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->accesstoken(), output);
  }

  // optional string baiduAccessToken = 2;
  if (has_baiduaccesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->baiduaccesstoken().data(), this->baiduaccesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "baiduaccesstoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->baiduaccesstoken(), output);
  }

  // optional int64 baiduExpiresIn = 3;
  if (has_baiduexpiresin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->baiduexpiresin(), output);
  }

  // optional int64 expiresIn = 4;
  if (has_expiresin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expiresin(), output);
  }

  // optional string id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->id(), output);
  }

  // optional string mediaUserId = 6;
  if (has_mediauserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediauserid().data(), this->mediauserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediauserid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mediauserid(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional string platform = 8;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->platform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.FrontiaUser)
}

::google::protobuf::uint8* FrontiaUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.FrontiaUser)
  // optional string accessToken = 1;
  if (has_accesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accesstoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accesstoken(), target);
  }

  // optional string baiduAccessToken = 2;
  if (has_baiduaccesstoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->baiduaccesstoken().data(), this->baiduaccesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "baiduaccesstoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->baiduaccesstoken(), target);
  }

  // optional int64 baiduExpiresIn = 3;
  if (has_baiduexpiresin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->baiduexpiresin(), target);
  }

  // optional int64 expiresIn = 4;
  if (has_expiresin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expiresin(), target);
  }

  // optional string id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->id(), target);
  }

  // optional string mediaUserId = 6;
  if (has_mediauserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediauserid().data(), this->mediauserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediauserid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mediauserid(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional string platform = 8;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->platform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.FrontiaUser)
  return target;
}

int FrontiaUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string accessToken = 1;
    if (has_accesstoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accesstoken());
    }

    // optional string baiduAccessToken = 2;
    if (has_baiduaccesstoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->baiduaccesstoken());
    }

    // optional int64 baiduExpiresIn = 3;
    if (has_baiduexpiresin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->baiduexpiresin());
    }

    // optional int64 expiresIn = 4;
    if (has_expiresin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiresin());
    }

    // optional string id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string mediaUserId = 6;
    if (has_mediauserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mediauserid());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string platform = 8;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrontiaUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrontiaUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrontiaUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrontiaUser::MergeFrom(const FrontiaUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accesstoken()) {
      set_accesstoken(from.accesstoken());
    }
    if (from.has_baiduaccesstoken()) {
      set_baiduaccesstoken(from.baiduaccesstoken());
    }
    if (from.has_baiduexpiresin()) {
      set_baiduexpiresin(from.baiduexpiresin());
    }
    if (from.has_expiresin()) {
      set_expiresin(from.expiresin());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mediauserid()) {
      set_mediauserid(from.mediauserid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrontiaUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrontiaUser::CopyFrom(const FrontiaUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrontiaUser::IsInitialized() const {

  return true;
}

void FrontiaUser::Swap(FrontiaUser* other) {
  if (other != this) {
    std::swap(accesstoken_, other->accesstoken_);
    std::swap(baiduaccesstoken_, other->baiduaccesstoken_);
    std::swap(baiduexpiresin_, other->baiduexpiresin_);
    std::swap(expiresin_, other->expiresin_);
    std::swap(id_, other->id_);
    std::swap(mediauserid_, other->mediauserid_);
    std::swap(name_, other->name_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrontiaUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrontiaUser_descriptor_;
  metadata.reflection = FrontiaUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileInfoResult::kCreateTimeFieldNumber;
const int FileInfoResult::kIdFieldNumber;
const int FileInfoResult::kMd5FieldNumber;
const int FileInfoResult::kModifyTimeFieldNumber;
const int FileInfoResult::kPathFieldNumber;
const int FileInfoResult::kSizeFieldNumber;
const int FileInfoResult::kHasSubFolderFieldNumber;
const int FileInfoResult::kIsDirFieldNumber;
#endif  // !_MSC_VER

FileInfoResult::FileInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.FileInfoResult)
}

void FileInfoResult::InitAsDefaultInstance() {
}

FileInfoResult::FileInfoResult(const FileInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.FileInfoResult)
}

void FileInfoResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  id_ = GOOGLE_LONGLONG(0);
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifytime_ = GOOGLE_LONGLONG(0);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_LONGLONG(0);
  hassubfolder_ = false;
  isdir_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileInfoResult::~FileInfoResult() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.FileInfoResult)
  SharedDtor();
}

void FileInfoResult::SharedDtor() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileInfoResult_descriptor_;
}

const FileInfoResult& FileInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

FileInfoResult* FileInfoResult::default_instance_ = NULL;

FileInfoResult* FileInfoResult::New() const {
  return new FileInfoResult;
}

void FileInfoResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FileInfoResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(createtime_, id_);
    ZR_(size_, isdir_);
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        md5_->clear();
      }
    }
    modifytime_ = GOOGLE_LONGLONG(0);
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.FileInfoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 createTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_md5;
        break;
      }

      // optional string md5 = 3;
      case 3: {
        if (tag == 26) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_modifyTime;
        break;
      }

      // optional int64 modifyTime = 4;
      case 4: {
        if (tag == 32) {
         parse_modifyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modifytime_)));
          set_has_modifytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_path;
        break;
      }

      // optional string path = 5;
      case 5: {
        if (tag == 42) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_size;
        break;
      }

      // optional int64 size = 6;
      case 6: {
        if (tag == 48) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hasSubFolder;
        break;
      }

      // optional bool hasSubFolder = 7;
      case 7: {
        if (tag == 56) {
         parse_hasSubFolder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hassubfolder_)));
          set_has_hassubfolder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_isDir;
        break;
      }

      // optional bool isDir = 8;
      case 8: {
        if (tag == 64) {
         parse_isDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdir_)));
          set_has_isdir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.FileInfoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.FileInfoResult)
  return false;
#undef DO_
}

void FileInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.FileInfoResult)
  // optional int64 createTime = 1;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->createtime(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional string md5 = 3;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->md5(), output);
  }

  // optional int64 modifyTime = 4;
  if (has_modifytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->modifytime(), output);
  }

  // optional string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->path(), output);
  }

  // optional int64 size = 6;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->size(), output);
  }

  // optional bool hasSubFolder = 7;
  if (has_hassubfolder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hassubfolder(), output);
  }

  // optional bool isDir = 8;
  if (has_isdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isdir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.FileInfoResult)
}

::google::protobuf::uint8* FileInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.FileInfoResult)
  // optional int64 createTime = 1;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->createtime(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional string md5 = 3;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->md5(), target);
  }

  // optional int64 modifyTime = 4;
  if (has_modifytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->modifytime(), target);
  }

  // optional string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->path(), target);
  }

  // optional int64 size = 6;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->size(), target);
  }

  // optional bool hasSubFolder = 7;
  if (has_hassubfolder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->hassubfolder(), target);
  }

  // optional bool isDir = 8;
  if (has_isdir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isdir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.FileInfoResult)
  return target;
}

int FileInfoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 createTime = 1;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string md5 = 3;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional int64 modifyTime = 4;
    if (has_modifytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->modifytime());
    }

    // optional string path = 5;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional int64 size = 6;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // optional bool hasSubFolder = 7;
    if (has_hassubfolder()) {
      total_size += 1 + 1;
    }

    // optional bool isDir = 8;
    if (has_isdir()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileInfoResult::MergeFrom(const FileInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
    if (from.has_modifytime()) {
      set_modifytime(from.modifytime());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_hassubfolder()) {
      set_hassubfolder(from.hassubfolder());
    }
    if (from.has_isdir()) {
      set_isdir(from.isdir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfoResult::CopyFrom(const FileInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfoResult::IsInitialized() const {

  return true;
}

void FileInfoResult::Swap(FileInfoResult* other) {
  if (other != this) {
    std::swap(createtime_, other->createtime_);
    std::swap(id_, other->id_);
    std::swap(md5_, other->md5_);
    std::swap(modifytime_, other->modifytime_);
    std::swap(path_, other->path_);
    std::swap(size_, other->size_);
    std::swap(hassubfolder_, other->hassubfolder_);
    std::swap(isdir_, other->isdir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileInfoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileInfoResult_descriptor_;
  metadata.reflection = FileInfoResult_reflection_;
  return metadata;
}


// ===================================================================

::std::string* login_Request::_default_mediatype_ = NULL;
#ifndef _MSC_VER
const int login_Request::kMediaTypeFieldNumber;
#endif  // !_MSC_VER

login_Request::login_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.login_Request)
}

void login_Request::InitAsDefaultInstance() {
}

login_Request::login_Request(const login_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.login_Request)
}

void login_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mediatype_ = const_cast< ::std::string*>(_default_mediatype_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_Request::~login_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.login_Request)
  SharedDtor();
}

void login_Request::SharedDtor() {
  if (mediatype_ != _default_mediatype_) {
    delete mediatype_;
  }
  if (this != default_instance_) {
  }
}

void login_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_Request_descriptor_;
}

const login_Request& login_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

login_Request* login_Request::default_instance_ = NULL;

login_Request* login_Request::New() const {
  return new login_Request;
}

void login_Request::Clear() {
  if (has_mediatype()) {
    if (mediatype_ != _default_mediatype_) {
      mediatype_->assign(*_default_mediatype_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.login_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mediaType = 1 [default = "BAIDU"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mediatype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mediatype().data(), this->mediatype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mediatype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.login_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.login_Request)
  return false;
#undef DO_
}

void login_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.login_Request)
  // optional string mediaType = 1 [default = "BAIDU"];
  if (has_mediatype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediatype().data(), this->mediatype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediatype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mediatype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.login_Request)
}

::google::protobuf::uint8* login_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.login_Request)
  // optional string mediaType = 1 [default = "BAIDU"];
  if (has_mediatype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediatype().data(), this->mediatype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediatype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mediatype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.login_Request)
  return target;
}

int login_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mediaType = 1 [default = "BAIDU"];
    if (has_mediatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mediatype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_Request::MergeFrom(const login_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mediatype()) {
      set_mediatype(from.mediatype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_Request::CopyFrom(const login_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_Request::IsInitialized() const {

  return true;
}

void login_Request::Swap(login_Request* other) {
  if (other != this) {
    std::swap(mediatype_, other->mediatype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_Request_descriptor_;
  metadata.reflection = login_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_Response::kStatusCodeFieldNumber;
const int login_Response::kFrontiaUserFieldNumber;
const int login_Response::kErrCodeFieldNumber;
const int login_Response::kErrMsgFieldNumber;
#endif  // !_MSC_VER

login_Response::login_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.login_Response)
}

void login_Response::InitAsDefaultInstance() {
  frontiauser_ = const_cast< ::org::cocos2dx::lua::FrontiaUser*>(&::org::cocos2dx::lua::FrontiaUser::default_instance());
}

login_Response::login_Response(const login_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.login_Response)
}

void login_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  frontiauser_ = NULL;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_Response::~login_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.login_Response)
  SharedDtor();
}

void login_Response::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
    delete frontiauser_;
  }
}

void login_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_Response_descriptor_;
}

const login_Response& login_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

login_Response* login_Response::default_instance_ = NULL;

login_Response* login_Response::New() const {
  return new login_Response;
}

void login_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<login_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(statuscode_, errcode_);
    if (has_frontiauser()) {
      if (frontiauser_ != NULL) frontiauser_->::org::cocos2dx::lua::FrontiaUser::Clear();
    }
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.login_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_frontiaUser;
        break;
      }

      // optional .org.cocos2dx.lua.FrontiaUser frontiaUser = 101;
      case 101: {
        if (tag == 810) {
         parse_frontiaUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frontiauser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1608)) goto parse_errCode;
        break;
      }

      // optional int32 errCode = 201;
      case 201: {
        if (tag == 1608) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 202;
      case 202: {
        if (tag == 1618) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.login_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.login_Response)
  return false;
#undef DO_
}

void login_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.login_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // optional .org.cocos2dx.lua.FrontiaUser frontiaUser = 101;
  if (has_frontiauser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->frontiauser(), output);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->errcode(), output);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      202, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.login_Response)
}

::google::protobuf::uint8* login_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.login_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // optional .org.cocos2dx.lua.FrontiaUser frontiaUser = 101;
  if (has_frontiauser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->frontiauser(), target);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->errcode(), target);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        202, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.login_Response)
  return target;
}

int login_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional .org.cocos2dx.lua.FrontiaUser frontiaUser = 101;
    if (has_frontiauser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frontiauser());
    }

    // optional int32 errCode = 201;
    if (has_errcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 202;
    if (has_errmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_Response::MergeFrom(const login_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_frontiauser()) {
      mutable_frontiauser()->::org::cocos2dx::lua::FrontiaUser::MergeFrom(from.frontiauser());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_Response::CopyFrom(const login_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void login_Response::Swap(login_Response* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(frontiauser_, other->frontiauser_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_Response_descriptor_;
  metadata.reflection = login_Response_reflection_;
  return metadata;
}


// ===================================================================

::std::string* logout_Request::_default_mediatype_ = NULL;
#ifndef _MSC_VER
const int logout_Request::kMediaTypeFieldNumber;
#endif  // !_MSC_VER

logout_Request::logout_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.logout_Request)
}

void logout_Request::InitAsDefaultInstance() {
}

logout_Request::logout_Request(const logout_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.logout_Request)
}

void logout_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mediatype_ = const_cast< ::std::string*>(_default_mediatype_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

logout_Request::~logout_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.logout_Request)
  SharedDtor();
}

void logout_Request::SharedDtor() {
  if (mediatype_ != _default_mediatype_) {
    delete mediatype_;
  }
  if (this != default_instance_) {
  }
}

void logout_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* logout_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return logout_Request_descriptor_;
}

const logout_Request& logout_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

logout_Request* logout_Request::default_instance_ = NULL;

logout_Request* logout_Request::New() const {
  return new logout_Request;
}

void logout_Request::Clear() {
  if (has_mediatype()) {
    if (mediatype_ != _default_mediatype_) {
      mediatype_->assign(*_default_mediatype_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool logout_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.logout_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mediaType = 1 [default = "BAIDU"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mediatype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mediatype().data(), this->mediatype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mediatype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.logout_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.logout_Request)
  return false;
#undef DO_
}

void logout_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.logout_Request)
  // optional string mediaType = 1 [default = "BAIDU"];
  if (has_mediatype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediatype().data(), this->mediatype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediatype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mediatype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.logout_Request)
}

::google::protobuf::uint8* logout_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.logout_Request)
  // optional string mediaType = 1 [default = "BAIDU"];
  if (has_mediatype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediatype().data(), this->mediatype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediatype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mediatype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.logout_Request)
  return target;
}

int logout_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mediaType = 1 [default = "BAIDU"];
    if (has_mediatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mediatype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void logout_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const logout_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const logout_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void logout_Request::MergeFrom(const logout_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mediatype()) {
      set_mediatype(from.mediatype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void logout_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logout_Request::CopyFrom(const logout_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logout_Request::IsInitialized() const {

  return true;
}

void logout_Request::Swap(logout_Request* other) {
  if (other != this) {
    std::swap(mediatype_, other->mediatype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata logout_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = logout_Request_descriptor_;
  metadata.reflection = logout_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int logout_Response::kIssuccessFieldNumber;
#endif  // !_MSC_VER

logout_Response::logout_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.logout_Response)
}

void logout_Response::InitAsDefaultInstance() {
}

logout_Response::logout_Response(const logout_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.logout_Response)
}

void logout_Response::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

logout_Response::~logout_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.logout_Response)
  SharedDtor();
}

void logout_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void logout_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* logout_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return logout_Response_descriptor_;
}

const logout_Response& logout_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

logout_Response* logout_Response::default_instance_ = NULL;

logout_Response* logout_Response::New() const {
  return new logout_Response;
}

void logout_Response::Clear() {
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool logout_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.logout_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 issuccess = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.logout_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.logout_Response)
  return false;
#undef DO_
}

void logout_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.logout_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->issuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.logout_Response)
}

::google::protobuf::uint8* logout_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.logout_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->issuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.logout_Response)
  return target;
}

int logout_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 issuccess = 1;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issuccess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void logout_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const logout_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const logout_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void logout_Response::MergeFrom(const logout_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void logout_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logout_Response::CopyFrom(const logout_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logout_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void logout_Response::Swap(logout_Response* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata logout_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = logout_Response_descriptor_;
  metadata.reflection = logout_Response_reflection_;
  return metadata;
}


// ===================================================================

::std::string* isLogin_Request::_default_mediatype_ = NULL;
#ifndef _MSC_VER
const int isLogin_Request::kMediaTypeFieldNumber;
#endif  // !_MSC_VER

isLogin_Request::isLogin_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.isLogin_Request)
}

void isLogin_Request::InitAsDefaultInstance() {
}

isLogin_Request::isLogin_Request(const isLogin_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.isLogin_Request)
}

void isLogin_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mediatype_ = const_cast< ::std::string*>(_default_mediatype_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

isLogin_Request::~isLogin_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.isLogin_Request)
  SharedDtor();
}

void isLogin_Request::SharedDtor() {
  if (mediatype_ != _default_mediatype_) {
    delete mediatype_;
  }
  if (this != default_instance_) {
  }
}

void isLogin_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* isLogin_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return isLogin_Request_descriptor_;
}

const isLogin_Request& isLogin_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

isLogin_Request* isLogin_Request::default_instance_ = NULL;

isLogin_Request* isLogin_Request::New() const {
  return new isLogin_Request;
}

void isLogin_Request::Clear() {
  if (has_mediatype()) {
    if (mediatype_ != _default_mediatype_) {
      mediatype_->assign(*_default_mediatype_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool isLogin_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.isLogin_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mediaType = 1 [default = "BAIDU"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mediatype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mediatype().data(), this->mediatype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mediatype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.isLogin_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.isLogin_Request)
  return false;
#undef DO_
}

void isLogin_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.isLogin_Request)
  // optional string mediaType = 1 [default = "BAIDU"];
  if (has_mediatype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediatype().data(), this->mediatype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediatype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mediatype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.isLogin_Request)
}

::google::protobuf::uint8* isLogin_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.isLogin_Request)
  // optional string mediaType = 1 [default = "BAIDU"];
  if (has_mediatype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediatype().data(), this->mediatype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediatype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mediatype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.isLogin_Request)
  return target;
}

int isLogin_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mediaType = 1 [default = "BAIDU"];
    if (has_mediatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mediatype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void isLogin_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const isLogin_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const isLogin_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void isLogin_Request::MergeFrom(const isLogin_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mediatype()) {
      set_mediatype(from.mediatype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void isLogin_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void isLogin_Request::CopyFrom(const isLogin_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isLogin_Request::IsInitialized() const {

  return true;
}

void isLogin_Request::Swap(isLogin_Request* other) {
  if (other != this) {
    std::swap(mediatype_, other->mediatype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata isLogin_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = isLogin_Request_descriptor_;
  metadata.reflection = isLogin_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int isLogin_Response::kIssuccessFieldNumber;
#endif  // !_MSC_VER

isLogin_Response::isLogin_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.isLogin_Response)
}

void isLogin_Response::InitAsDefaultInstance() {
}

isLogin_Response::isLogin_Response(const isLogin_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.isLogin_Response)
}

void isLogin_Response::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

isLogin_Response::~isLogin_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.isLogin_Response)
  SharedDtor();
}

void isLogin_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void isLogin_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* isLogin_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return isLogin_Response_descriptor_;
}

const isLogin_Response& isLogin_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

isLogin_Response* isLogin_Response::default_instance_ = NULL;

isLogin_Response* isLogin_Response::New() const {
  return new isLogin_Response;
}

void isLogin_Response::Clear() {
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool isLogin_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.isLogin_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 issuccess = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.isLogin_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.isLogin_Response)
  return false;
#undef DO_
}

void isLogin_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.isLogin_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->issuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.isLogin_Response)
}

::google::protobuf::uint8* isLogin_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.isLogin_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->issuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.isLogin_Response)
  return target;
}

int isLogin_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 issuccess = 1;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issuccess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void isLogin_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const isLogin_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const isLogin_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void isLogin_Response::MergeFrom(const isLogin_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void isLogin_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void isLogin_Response::CopyFrom(const isLogin_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isLogin_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void isLogin_Response::Swap(isLogin_Response* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata isLogin_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = isLogin_Response_descriptor_;
  metadata.reflection = isLogin_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int makeDir_Request::kDirNameFieldNumber;
#endif  // !_MSC_VER

makeDir_Request::makeDir_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.makeDir_Request)
}

void makeDir_Request::InitAsDefaultInstance() {
}

makeDir_Request::makeDir_Request(const makeDir_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.makeDir_Request)
}

void makeDir_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dirname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

makeDir_Request::~makeDir_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.makeDir_Request)
  SharedDtor();
}

void makeDir_Request::SharedDtor() {
  if (dirname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dirname_;
  }
  if (this != default_instance_) {
  }
}

void makeDir_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* makeDir_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return makeDir_Request_descriptor_;
}

const makeDir_Request& makeDir_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

makeDir_Request* makeDir_Request::default_instance_ = NULL;

makeDir_Request* makeDir_Request::New() const {
  return new makeDir_Request;
}

void makeDir_Request::Clear() {
  if (has_dirname()) {
    if (dirname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      dirname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool makeDir_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.makeDir_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dirName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dirname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dirname().data(), this->dirname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dirname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.makeDir_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.makeDir_Request)
  return false;
#undef DO_
}

void makeDir_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.makeDir_Request)
  // required string dirName = 1;
  if (has_dirname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dirname().data(), this->dirname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dirname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dirname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.makeDir_Request)
}

::google::protobuf::uint8* makeDir_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.makeDir_Request)
  // required string dirName = 1;
  if (has_dirname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dirname().data(), this->dirname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dirname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dirname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.makeDir_Request)
  return target;
}

int makeDir_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dirName = 1;
    if (has_dirname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dirname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void makeDir_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const makeDir_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const makeDir_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void makeDir_Request::MergeFrom(const makeDir_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dirname()) {
      set_dirname(from.dirname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void makeDir_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void makeDir_Request::CopyFrom(const makeDir_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool makeDir_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void makeDir_Request::Swap(makeDir_Request* other) {
  if (other != this) {
    std::swap(dirname_, other->dirname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata makeDir_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = makeDir_Request_descriptor_;
  metadata.reflection = makeDir_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int makeDir_Response::kStatusCodeFieldNumber;
const int makeDir_Response::kFileInfoResultFieldNumber;
const int makeDir_Response::kErrCodeFieldNumber;
const int makeDir_Response::kErrMsgFieldNumber;
#endif  // !_MSC_VER

makeDir_Response::makeDir_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.makeDir_Response)
}

void makeDir_Response::InitAsDefaultInstance() {
  fileinforesult_ = const_cast< ::org::cocos2dx::lua::FileInfoResult*>(&::org::cocos2dx::lua::FileInfoResult::default_instance());
}

makeDir_Response::makeDir_Response(const makeDir_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.makeDir_Response)
}

void makeDir_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  fileinforesult_ = NULL;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

makeDir_Response::~makeDir_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.makeDir_Response)
  SharedDtor();
}

void makeDir_Response::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
    delete fileinforesult_;
  }
}

void makeDir_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* makeDir_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return makeDir_Response_descriptor_;
}

const makeDir_Response& makeDir_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

makeDir_Response* makeDir_Response::default_instance_ = NULL;

makeDir_Response* makeDir_Response::New() const {
  return new makeDir_Response;
}

void makeDir_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<makeDir_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(statuscode_, errcode_);
    if (has_fileinforesult()) {
      if (fileinforesult_ != NULL) fileinforesult_->::org::cocos2dx::lua::FileInfoResult::Clear();
    }
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool makeDir_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.makeDir_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_fileInfoResult;
        break;
      }

      // optional .org.cocos2dx.lua.FileInfoResult fileInfoResult = 101;
      case 101: {
        if (tag == 810) {
         parse_fileInfoResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fileinforesult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1608)) goto parse_errCode;
        break;
      }

      // optional int32 errCode = 201;
      case 201: {
        if (tag == 1608) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 202;
      case 202: {
        if (tag == 1618) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.makeDir_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.makeDir_Response)
  return false;
#undef DO_
}

void makeDir_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.makeDir_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // optional .org.cocos2dx.lua.FileInfoResult fileInfoResult = 101;
  if (has_fileinforesult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->fileinforesult(), output);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->errcode(), output);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      202, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.makeDir_Response)
}

::google::protobuf::uint8* makeDir_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.makeDir_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // optional .org.cocos2dx.lua.FileInfoResult fileInfoResult = 101;
  if (has_fileinforesult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->fileinforesult(), target);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->errcode(), target);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        202, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.makeDir_Response)
  return target;
}

int makeDir_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional .org.cocos2dx.lua.FileInfoResult fileInfoResult = 101;
    if (has_fileinforesult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fileinforesult());
    }

    // optional int32 errCode = 201;
    if (has_errcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 202;
    if (has_errmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void makeDir_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const makeDir_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const makeDir_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void makeDir_Response::MergeFrom(const makeDir_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_fileinforesult()) {
      mutable_fileinforesult()->::org::cocos2dx::lua::FileInfoResult::MergeFrom(from.fileinforesult());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void makeDir_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void makeDir_Response::CopyFrom(const makeDir_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool makeDir_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void makeDir_Response::Swap(makeDir_Response* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(fileinforesult_, other->fileinforesult_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata makeDir_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = makeDir_Response_descriptor_;
  metadata.reflection = makeDir_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int deleteFile_Request::kDirOrFileNameFieldNumber;
#endif  // !_MSC_VER

deleteFile_Request::deleteFile_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.deleteFile_Request)
}

void deleteFile_Request::InitAsDefaultInstance() {
}

deleteFile_Request::deleteFile_Request(const deleteFile_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.deleteFile_Request)
}

void deleteFile_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dirorfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

deleteFile_Request::~deleteFile_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.deleteFile_Request)
  SharedDtor();
}

void deleteFile_Request::SharedDtor() {
  if (dirorfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dirorfilename_;
  }
  if (this != default_instance_) {
  }
}

void deleteFile_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* deleteFile_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return deleteFile_Request_descriptor_;
}

const deleteFile_Request& deleteFile_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

deleteFile_Request* deleteFile_Request::default_instance_ = NULL;

deleteFile_Request* deleteFile_Request::New() const {
  return new deleteFile_Request;
}

void deleteFile_Request::Clear() {
  if (has_dirorfilename()) {
    if (dirorfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      dirorfilename_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool deleteFile_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.deleteFile_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dirOrFileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dirorfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dirorfilename().data(), this->dirorfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dirorfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.deleteFile_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.deleteFile_Request)
  return false;
#undef DO_
}

void deleteFile_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.deleteFile_Request)
  // required string dirOrFileName = 1;
  if (has_dirorfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dirorfilename().data(), this->dirorfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dirorfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dirorfilename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.deleteFile_Request)
}

::google::protobuf::uint8* deleteFile_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.deleteFile_Request)
  // required string dirOrFileName = 1;
  if (has_dirorfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dirorfilename().data(), this->dirorfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dirorfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dirorfilename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.deleteFile_Request)
  return target;
}

int deleteFile_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dirOrFileName = 1;
    if (has_dirorfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dirorfilename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void deleteFile_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const deleteFile_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const deleteFile_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void deleteFile_Request::MergeFrom(const deleteFile_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dirorfilename()) {
      set_dirorfilename(from.dirorfilename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void deleteFile_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deleteFile_Request::CopyFrom(const deleteFile_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deleteFile_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void deleteFile_Request::Swap(deleteFile_Request* other) {
  if (other != this) {
    std::swap(dirorfilename_, other->dirorfilename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata deleteFile_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = deleteFile_Request_descriptor_;
  metadata.reflection = deleteFile_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int deleteFile_Response::kStatusCodeFieldNumber;
const int deleteFile_Response::kSourceFieldNumber;
const int deleteFile_Response::kErrCodeFieldNumber;
const int deleteFile_Response::kErrMsgFieldNumber;
#endif  // !_MSC_VER

deleteFile_Response::deleteFile_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.deleteFile_Response)
}

void deleteFile_Response::InitAsDefaultInstance() {
}

deleteFile_Response::deleteFile_Response(const deleteFile_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.deleteFile_Response)
}

void deleteFile_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

deleteFile_Response::~deleteFile_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.deleteFile_Response)
  SharedDtor();
}

void deleteFile_Response::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void deleteFile_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* deleteFile_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return deleteFile_Response_descriptor_;
}

const deleteFile_Response& deleteFile_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

deleteFile_Response* deleteFile_Response::default_instance_ = NULL;

deleteFile_Response* deleteFile_Response::New() const {
  return new deleteFile_Response;
}

void deleteFile_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<deleteFile_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(statuscode_, errcode_);
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool deleteFile_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.deleteFile_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_source;
        break;
      }

      // optional string source = 101;
      case 101: {
        if (tag == 810) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1608)) goto parse_errCode;
        break;
      }

      // optional int32 errCode = 201;
      case 201: {
        if (tag == 1608) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 202;
      case 202: {
        if (tag == 1618) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.deleteFile_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.deleteFile_Response)
  return false;
#undef DO_
}

void deleteFile_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.deleteFile_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // optional string source = 101;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->source(), output);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->errcode(), output);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      202, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.deleteFile_Response)
}

::google::protobuf::uint8* deleteFile_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.deleteFile_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // optional string source = 101;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->source(), target);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->errcode(), target);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        202, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.deleteFile_Response)
  return target;
}

int deleteFile_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional string source = 101;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional int32 errCode = 201;
    if (has_errcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 202;
    if (has_errmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void deleteFile_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const deleteFile_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const deleteFile_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void deleteFile_Response::MergeFrom(const deleteFile_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void deleteFile_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deleteFile_Response::CopyFrom(const deleteFile_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deleteFile_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void deleteFile_Response::Swap(deleteFile_Response* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(source_, other->source_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata deleteFile_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = deleteFile_Response_descriptor_;
  metadata.reflection = deleteFile_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int uploadFile_Request::kFromFileNameFieldNumber;
const int uploadFile_Request::kToFileNameFieldNumber;
#endif  // !_MSC_VER

uploadFile_Request::uploadFile_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.uploadFile_Request)
}

void uploadFile_Request::InitAsDefaultInstance() {
}

uploadFile_Request::uploadFile_Request(const uploadFile_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.uploadFile_Request)
}

void uploadFile_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fromfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

uploadFile_Request::~uploadFile_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.uploadFile_Request)
  SharedDtor();
}

void uploadFile_Request::SharedDtor() {
  if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromfilename_;
  }
  if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tofilename_;
  }
  if (this != default_instance_) {
  }
}

void uploadFile_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* uploadFile_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return uploadFile_Request_descriptor_;
}

const uploadFile_Request& uploadFile_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

uploadFile_Request* uploadFile_Request::default_instance_ = NULL;

uploadFile_Request* uploadFile_Request::New() const {
  return new uploadFile_Request;
}

void uploadFile_Request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_fromfilename()) {
      if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fromfilename_->clear();
      }
    }
    if (has_tofilename()) {
      if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tofilename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool uploadFile_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.uploadFile_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fromFileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromfilename().data(), this->fromfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fromfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_toFileName;
        break;
      }

      // required string toFileName = 2;
      case 2: {
        if (tag == 18) {
         parse_toFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tofilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tofilename().data(), this->tofilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tofilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.uploadFile_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.uploadFile_Request)
  return false;
#undef DO_
}

void uploadFile_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.uploadFile_Request)
  // required string fromFileName = 1;
  if (has_fromfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromfilename().data(), this->fromfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fromfilename(), output);
  }

  // required string toFileName = 2;
  if (has_tofilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tofilename().data(), this->tofilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tofilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tofilename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.uploadFile_Request)
}

::google::protobuf::uint8* uploadFile_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.uploadFile_Request)
  // required string fromFileName = 1;
  if (has_fromfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromfilename().data(), this->fromfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromfilename(), target);
  }

  // required string toFileName = 2;
  if (has_tofilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tofilename().data(), this->tofilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tofilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tofilename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.uploadFile_Request)
  return target;
}

int uploadFile_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fromFileName = 1;
    if (has_fromfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromfilename());
    }

    // required string toFileName = 2;
    if (has_tofilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tofilename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void uploadFile_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const uploadFile_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const uploadFile_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void uploadFile_Request::MergeFrom(const uploadFile_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromfilename()) {
      set_fromfilename(from.fromfilename());
    }
    if (from.has_tofilename()) {
      set_tofilename(from.tofilename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void uploadFile_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uploadFile_Request::CopyFrom(const uploadFile_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uploadFile_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void uploadFile_Request::Swap(uploadFile_Request* other) {
  if (other != this) {
    std::swap(fromfilename_, other->fromfilename_);
    std::swap(tofilename_, other->tofilename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata uploadFile_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = uploadFile_Request_descriptor_;
  metadata.reflection = uploadFile_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int uploadFile_Response::kStatusCodeFieldNumber;
const int uploadFile_Response::kOnSuccessSourceFieldNumber;
const int uploadFile_Response::kFileInfoResultFieldNumber;
const int uploadFile_Response::kOnFailureSourceFieldNumber;
const int uploadFile_Response::kErrCodeFieldNumber;
const int uploadFile_Response::kErrMsgFieldNumber;
const int uploadFile_Response::kOnProgressSourceFieldNumber;
const int uploadFile_Response::kBytesFieldNumber;
const int uploadFile_Response::kTotalFieldNumber;
#endif  // !_MSC_VER

uploadFile_Response::uploadFile_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.uploadFile_Response)
}

void uploadFile_Response::InitAsDefaultInstance() {
  fileinforesult_ = const_cast< ::org::cocos2dx::lua::FileInfoResult*>(&::org::cocos2dx::lua::FileInfoResult::default_instance());
}

uploadFile_Response::uploadFile_Response(const uploadFile_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.uploadFile_Response)
}

void uploadFile_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  onsuccess_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileinforesult_ = NULL;
  onfailure_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onprogress_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_ = GOOGLE_LONGLONG(0);
  total_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

uploadFile_Response::~uploadFile_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.uploadFile_Response)
  SharedDtor();
}

void uploadFile_Response::SharedDtor() {
  if (onsuccess_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onsuccess_source_;
  }
  if (onfailure_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onfailure_source_;
  }
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (onprogress_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onprogress_source_;
  }
  if (this != default_instance_) {
    delete fileinforesult_;
  }
}

void uploadFile_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* uploadFile_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return uploadFile_Response_descriptor_;
}

const uploadFile_Response& uploadFile_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

uploadFile_Response* uploadFile_Response::default_instance_ = NULL;

uploadFile_Response* uploadFile_Response::New() const {
  return new uploadFile_Response;
}

void uploadFile_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<uploadFile_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(statuscode_, errcode_);
    if (has_onsuccess_source()) {
      if (onsuccess_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        onsuccess_source_->clear();
      }
    }
    if (has_fileinforesult()) {
      if (fileinforesult_ != NULL) fileinforesult_->::org::cocos2dx::lua::FileInfoResult::Clear();
    }
    if (has_onfailure_source()) {
      if (onfailure_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        onfailure_source_->clear();
      }
    }
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_onprogress_source()) {
      if (onprogress_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        onprogress_source_->clear();
      }
    }
    bytes_ = GOOGLE_LONGLONG(0);
  }
  total_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool uploadFile_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.uploadFile_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_onSuccess_source;
        break;
      }

      // optional string onSuccess_source = 101;
      case 101: {
        if (tag == 810) {
         parse_onSuccess_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onsuccess_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->onsuccess_source().data(), this->onsuccess_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onsuccess_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_fileInfoResult;
        break;
      }

      // optional .org.cocos2dx.lua.FileInfoResult fileInfoResult = 102;
      case 102: {
        if (tag == 818) {
         parse_fileInfoResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fileinforesult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1610)) goto parse_onFailure_source;
        break;
      }

      // optional string onFailure_source = 201;
      case 201: {
        if (tag == 1610) {
         parse_onFailure_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onfailure_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->onfailure_source().data(), this->onfailure_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onfailure_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1616)) goto parse_errCode;
        break;
      }

      // optional int32 errCode = 202;
      case 202: {
        if (tag == 1616) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1626)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 203;
      case 203: {
        if (tag == 1626) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2410)) goto parse_onProgress_source;
        break;
      }

      // optional string onProgress_source = 301;
      case 301: {
        if (tag == 2410) {
         parse_onProgress_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onprogress_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->onprogress_source().data(), this->onprogress_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onprogress_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2416)) goto parse_bytes;
        break;
      }

      // optional int64 bytes = 302;
      case 302: {
        if (tag == 2416) {
         parse_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_)));
          set_has_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2424)) goto parse_total;
        break;
      }

      // optional int64 total = 303;
      case 303: {
        if (tag == 2424) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.uploadFile_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.uploadFile_Response)
  return false;
#undef DO_
}

void uploadFile_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.uploadFile_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // optional string onSuccess_source = 101;
  if (has_onsuccess_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onsuccess_source().data(), this->onsuccess_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onsuccess_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->onsuccess_source(), output);
  }

  // optional .org.cocos2dx.lua.FileInfoResult fileInfoResult = 102;
  if (has_fileinforesult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->fileinforesult(), output);
  }

  // optional string onFailure_source = 201;
  if (has_onfailure_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onfailure_source().data(), this->onfailure_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onfailure_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      201, this->onfailure_source(), output);
  }

  // optional int32 errCode = 202;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(202, this->errcode(), output);
  }

  // optional string errMsg = 203;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      203, this->errmsg(), output);
  }

  // optional string onProgress_source = 301;
  if (has_onprogress_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onprogress_source().data(), this->onprogress_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onprogress_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      301, this->onprogress_source(), output);
  }

  // optional int64 bytes = 302;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(302, this->bytes(), output);
  }

  // optional int64 total = 303;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(303, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.uploadFile_Response)
}

::google::protobuf::uint8* uploadFile_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.uploadFile_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // optional string onSuccess_source = 101;
  if (has_onsuccess_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onsuccess_source().data(), this->onsuccess_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onsuccess_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->onsuccess_source(), target);
  }

  // optional .org.cocos2dx.lua.FileInfoResult fileInfoResult = 102;
  if (has_fileinforesult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->fileinforesult(), target);
  }

  // optional string onFailure_source = 201;
  if (has_onfailure_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onfailure_source().data(), this->onfailure_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onfailure_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        201, this->onfailure_source(), target);
  }

  // optional int32 errCode = 202;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(202, this->errcode(), target);
  }

  // optional string errMsg = 203;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        203, this->errmsg(), target);
  }

  // optional string onProgress_source = 301;
  if (has_onprogress_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onprogress_source().data(), this->onprogress_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onprogress_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        301, this->onprogress_source(), target);
  }

  // optional int64 bytes = 302;
  if (has_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(302, this->bytes(), target);
  }

  // optional int64 total = 303;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(303, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.uploadFile_Response)
  return target;
}

int uploadFile_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional string onSuccess_source = 101;
    if (has_onsuccess_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onsuccess_source());
    }

    // optional .org.cocos2dx.lua.FileInfoResult fileInfoResult = 102;
    if (has_fileinforesult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fileinforesult());
    }

    // optional string onFailure_source = 201;
    if (has_onfailure_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onfailure_source());
    }

    // optional int32 errCode = 202;
    if (has_errcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 203;
    if (has_errmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional string onProgress_source = 301;
    if (has_onprogress_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onprogress_source());
    }

    // optional int64 bytes = 302;
    if (has_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 total = 303;
    if (has_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void uploadFile_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const uploadFile_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const uploadFile_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void uploadFile_Response::MergeFrom(const uploadFile_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_onsuccess_source()) {
      set_onsuccess_source(from.onsuccess_source());
    }
    if (from.has_fileinforesult()) {
      mutable_fileinforesult()->::org::cocos2dx::lua::FileInfoResult::MergeFrom(from.fileinforesult());
    }
    if (from.has_onfailure_source()) {
      set_onfailure_source(from.onfailure_source());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_onprogress_source()) {
      set_onprogress_source(from.onprogress_source());
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void uploadFile_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uploadFile_Response::CopyFrom(const uploadFile_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uploadFile_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void uploadFile_Response::Swap(uploadFile_Response* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(onsuccess_source_, other->onsuccess_source_);
    std::swap(fileinforesult_, other->fileinforesult_);
    std::swap(onfailure_source_, other->onfailure_source_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(onprogress_source_, other->onprogress_source_);
    std::swap(bytes_, other->bytes_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata uploadFile_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = uploadFile_Response_descriptor_;
  metadata.reflection = uploadFile_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stopTransferring_Request::kFromFileNameFieldNumber;
const int stopTransferring_Request::kToFileNameFieldNumber;
#endif  // !_MSC_VER

stopTransferring_Request::stopTransferring_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.stopTransferring_Request)
}

void stopTransferring_Request::InitAsDefaultInstance() {
}

stopTransferring_Request::stopTransferring_Request(const stopTransferring_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.stopTransferring_Request)
}

void stopTransferring_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fromfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stopTransferring_Request::~stopTransferring_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.stopTransferring_Request)
  SharedDtor();
}

void stopTransferring_Request::SharedDtor() {
  if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromfilename_;
  }
  if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tofilename_;
  }
  if (this != default_instance_) {
  }
}

void stopTransferring_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stopTransferring_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stopTransferring_Request_descriptor_;
}

const stopTransferring_Request& stopTransferring_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

stopTransferring_Request* stopTransferring_Request::default_instance_ = NULL;

stopTransferring_Request* stopTransferring_Request::New() const {
  return new stopTransferring_Request;
}

void stopTransferring_Request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_fromfilename()) {
      if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fromfilename_->clear();
      }
    }
    if (has_tofilename()) {
      if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tofilename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stopTransferring_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.stopTransferring_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fromFileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromfilename().data(), this->fromfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fromfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_toFileName;
        break;
      }

      // required string toFileName = 2;
      case 2: {
        if (tag == 18) {
         parse_toFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tofilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tofilename().data(), this->tofilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tofilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.stopTransferring_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.stopTransferring_Request)
  return false;
#undef DO_
}

void stopTransferring_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.stopTransferring_Request)
  // required string fromFileName = 1;
  if (has_fromfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromfilename().data(), this->fromfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fromfilename(), output);
  }

  // required string toFileName = 2;
  if (has_tofilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tofilename().data(), this->tofilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tofilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tofilename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.stopTransferring_Request)
}

::google::protobuf::uint8* stopTransferring_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.stopTransferring_Request)
  // required string fromFileName = 1;
  if (has_fromfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromfilename().data(), this->fromfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromfilename(), target);
  }

  // required string toFileName = 2;
  if (has_tofilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tofilename().data(), this->tofilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tofilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tofilename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.stopTransferring_Request)
  return target;
}

int stopTransferring_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fromFileName = 1;
    if (has_fromfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromfilename());
    }

    // required string toFileName = 2;
    if (has_tofilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tofilename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stopTransferring_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stopTransferring_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stopTransferring_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stopTransferring_Request::MergeFrom(const stopTransferring_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromfilename()) {
      set_fromfilename(from.fromfilename());
    }
    if (from.has_tofilename()) {
      set_tofilename(from.tofilename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stopTransferring_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stopTransferring_Request::CopyFrom(const stopTransferring_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stopTransferring_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void stopTransferring_Request::Swap(stopTransferring_Request* other) {
  if (other != this) {
    std::swap(fromfilename_, other->fromfilename_);
    std::swap(tofilename_, other->tofilename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stopTransferring_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stopTransferring_Request_descriptor_;
  metadata.reflection = stopTransferring_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stopTransferring_Response::kIssuccessFieldNumber;
#endif  // !_MSC_VER

stopTransferring_Response::stopTransferring_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.stopTransferring_Response)
}

void stopTransferring_Response::InitAsDefaultInstance() {
}

stopTransferring_Response::stopTransferring_Response(const stopTransferring_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.stopTransferring_Response)
}

void stopTransferring_Response::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stopTransferring_Response::~stopTransferring_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.stopTransferring_Response)
  SharedDtor();
}

void stopTransferring_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stopTransferring_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stopTransferring_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stopTransferring_Response_descriptor_;
}

const stopTransferring_Response& stopTransferring_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

stopTransferring_Response* stopTransferring_Response::default_instance_ = NULL;

stopTransferring_Response* stopTransferring_Response::New() const {
  return new stopTransferring_Response;
}

void stopTransferring_Response::Clear() {
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stopTransferring_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.stopTransferring_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 issuccess = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.stopTransferring_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.stopTransferring_Response)
  return false;
#undef DO_
}

void stopTransferring_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.stopTransferring_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->issuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.stopTransferring_Response)
}

::google::protobuf::uint8* stopTransferring_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.stopTransferring_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->issuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.stopTransferring_Response)
  return target;
}

int stopTransferring_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 issuccess = 1;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issuccess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stopTransferring_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stopTransferring_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stopTransferring_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stopTransferring_Response::MergeFrom(const stopTransferring_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stopTransferring_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stopTransferring_Response::CopyFrom(const stopTransferring_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stopTransferring_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void stopTransferring_Response::Swap(stopTransferring_Response* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stopTransferring_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stopTransferring_Response_descriptor_;
  metadata.reflection = stopTransferring_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int downloadFile_Request::kFromFileNameFieldNumber;
const int downloadFile_Request::kToFileNameFieldNumber;
#endif  // !_MSC_VER

downloadFile_Request::downloadFile_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.downloadFile_Request)
}

void downloadFile_Request::InitAsDefaultInstance() {
}

downloadFile_Request::downloadFile_Request(const downloadFile_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.downloadFile_Request)
}

void downloadFile_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fromfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

downloadFile_Request::~downloadFile_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.downloadFile_Request)
  SharedDtor();
}

void downloadFile_Request::SharedDtor() {
  if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromfilename_;
  }
  if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tofilename_;
  }
  if (this != default_instance_) {
  }
}

void downloadFile_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* downloadFile_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return downloadFile_Request_descriptor_;
}

const downloadFile_Request& downloadFile_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

downloadFile_Request* downloadFile_Request::default_instance_ = NULL;

downloadFile_Request* downloadFile_Request::New() const {
  return new downloadFile_Request;
}

void downloadFile_Request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_fromfilename()) {
      if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fromfilename_->clear();
      }
    }
    if (has_tofilename()) {
      if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tofilename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool downloadFile_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.downloadFile_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fromFileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromfilename().data(), this->fromfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fromfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_toFileName;
        break;
      }

      // required string toFileName = 2;
      case 2: {
        if (tag == 18) {
         parse_toFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tofilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tofilename().data(), this->tofilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tofilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.downloadFile_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.downloadFile_Request)
  return false;
#undef DO_
}

void downloadFile_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.downloadFile_Request)
  // required string fromFileName = 1;
  if (has_fromfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromfilename().data(), this->fromfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fromfilename(), output);
  }

  // required string toFileName = 2;
  if (has_tofilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tofilename().data(), this->tofilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tofilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tofilename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.downloadFile_Request)
}

::google::protobuf::uint8* downloadFile_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.downloadFile_Request)
  // required string fromFileName = 1;
  if (has_fromfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromfilename().data(), this->fromfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromfilename(), target);
  }

  // required string toFileName = 2;
  if (has_tofilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tofilename().data(), this->tofilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tofilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tofilename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.downloadFile_Request)
  return target;
}

int downloadFile_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fromFileName = 1;
    if (has_fromfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromfilename());
    }

    // required string toFileName = 2;
    if (has_tofilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tofilename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void downloadFile_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const downloadFile_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const downloadFile_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void downloadFile_Request::MergeFrom(const downloadFile_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromfilename()) {
      set_fromfilename(from.fromfilename());
    }
    if (from.has_tofilename()) {
      set_tofilename(from.tofilename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void downloadFile_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void downloadFile_Request::CopyFrom(const downloadFile_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool downloadFile_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void downloadFile_Request::Swap(downloadFile_Request* other) {
  if (other != this) {
    std::swap(fromfilename_, other->fromfilename_);
    std::swap(tofilename_, other->tofilename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata downloadFile_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = downloadFile_Request_descriptor_;
  metadata.reflection = downloadFile_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int downloadFile_Response::kStatusCodeFieldNumber;
const int downloadFile_Response::kOnSuccessSourceFieldNumber;
const int downloadFile_Response::kNewTargetNameFieldNumber;
const int downloadFile_Response::kOnFailureSourceFieldNumber;
const int downloadFile_Response::kErrCodeFieldNumber;
const int downloadFile_Response::kErrMsgFieldNumber;
const int downloadFile_Response::kOnProgressSourceFieldNumber;
const int downloadFile_Response::kBytesFieldNumber;
const int downloadFile_Response::kTotalFieldNumber;
#endif  // !_MSC_VER

downloadFile_Response::downloadFile_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.downloadFile_Response)
}

void downloadFile_Response::InitAsDefaultInstance() {
}

downloadFile_Response::downloadFile_Response(const downloadFile_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.downloadFile_Response)
}

void downloadFile_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  onsuccess_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newtargetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onfailure_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onprogress_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_ = GOOGLE_LONGLONG(0);
  total_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

downloadFile_Response::~downloadFile_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.downloadFile_Response)
  SharedDtor();
}

void downloadFile_Response::SharedDtor() {
  if (onsuccess_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onsuccess_source_;
  }
  if (newtargetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newtargetname_;
  }
  if (onfailure_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onfailure_source_;
  }
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (onprogress_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onprogress_source_;
  }
  if (this != default_instance_) {
  }
}

void downloadFile_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* downloadFile_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return downloadFile_Response_descriptor_;
}

const downloadFile_Response& downloadFile_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

downloadFile_Response* downloadFile_Response::default_instance_ = NULL;

downloadFile_Response* downloadFile_Response::New() const {
  return new downloadFile_Response;
}

void downloadFile_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<downloadFile_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(statuscode_, errcode_);
    if (has_onsuccess_source()) {
      if (onsuccess_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        onsuccess_source_->clear();
      }
    }
    if (has_newtargetname()) {
      if (newtargetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newtargetname_->clear();
      }
    }
    if (has_onfailure_source()) {
      if (onfailure_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        onfailure_source_->clear();
      }
    }
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_onprogress_source()) {
      if (onprogress_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        onprogress_source_->clear();
      }
    }
    bytes_ = GOOGLE_LONGLONG(0);
  }
  total_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool downloadFile_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.downloadFile_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_onSuccess_source;
        break;
      }

      // optional string onSuccess_source = 101;
      case 101: {
        if (tag == 810) {
         parse_onSuccess_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onsuccess_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->onsuccess_source().data(), this->onsuccess_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onsuccess_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_newTargetName;
        break;
      }

      // optional string newTargetName = 102;
      case 102: {
        if (tag == 818) {
         parse_newTargetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newtargetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newtargetname().data(), this->newtargetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newtargetname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1610)) goto parse_onFailure_source;
        break;
      }

      // optional string onFailure_source = 201;
      case 201: {
        if (tag == 1610) {
         parse_onFailure_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onfailure_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->onfailure_source().data(), this->onfailure_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onfailure_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1616)) goto parse_errCode;
        break;
      }

      // optional int32 errCode = 202;
      case 202: {
        if (tag == 1616) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1626)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 203;
      case 203: {
        if (tag == 1626) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2410)) goto parse_onProgress_source;
        break;
      }

      // optional string onProgress_source = 301;
      case 301: {
        if (tag == 2410) {
         parse_onProgress_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onprogress_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->onprogress_source().data(), this->onprogress_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onprogress_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2416)) goto parse_bytes;
        break;
      }

      // optional int64 bytes = 302;
      case 302: {
        if (tag == 2416) {
         parse_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_)));
          set_has_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2424)) goto parse_total;
        break;
      }

      // optional int64 total = 303;
      case 303: {
        if (tag == 2424) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.downloadFile_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.downloadFile_Response)
  return false;
#undef DO_
}

void downloadFile_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.downloadFile_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // optional string onSuccess_source = 101;
  if (has_onsuccess_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onsuccess_source().data(), this->onsuccess_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onsuccess_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->onsuccess_source(), output);
  }

  // optional string newTargetName = 102;
  if (has_newtargetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newtargetname().data(), this->newtargetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newtargetname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      102, this->newtargetname(), output);
  }

  // optional string onFailure_source = 201;
  if (has_onfailure_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onfailure_source().data(), this->onfailure_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onfailure_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      201, this->onfailure_source(), output);
  }

  // optional int32 errCode = 202;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(202, this->errcode(), output);
  }

  // optional string errMsg = 203;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      203, this->errmsg(), output);
  }

  // optional string onProgress_source = 301;
  if (has_onprogress_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onprogress_source().data(), this->onprogress_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onprogress_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      301, this->onprogress_source(), output);
  }

  // optional int64 bytes = 302;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(302, this->bytes(), output);
  }

  // optional int64 total = 303;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(303, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.downloadFile_Response)
}

::google::protobuf::uint8* downloadFile_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.downloadFile_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // optional string onSuccess_source = 101;
  if (has_onsuccess_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onsuccess_source().data(), this->onsuccess_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onsuccess_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->onsuccess_source(), target);
  }

  // optional string newTargetName = 102;
  if (has_newtargetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newtargetname().data(), this->newtargetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newtargetname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->newtargetname(), target);
  }

  // optional string onFailure_source = 201;
  if (has_onfailure_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onfailure_source().data(), this->onfailure_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onfailure_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        201, this->onfailure_source(), target);
  }

  // optional int32 errCode = 202;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(202, this->errcode(), target);
  }

  // optional string errMsg = 203;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        203, this->errmsg(), target);
  }

  // optional string onProgress_source = 301;
  if (has_onprogress_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onprogress_source().data(), this->onprogress_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onprogress_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        301, this->onprogress_source(), target);
  }

  // optional int64 bytes = 302;
  if (has_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(302, this->bytes(), target);
  }

  // optional int64 total = 303;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(303, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.downloadFile_Response)
  return target;
}

int downloadFile_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional string onSuccess_source = 101;
    if (has_onsuccess_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onsuccess_source());
    }

    // optional string newTargetName = 102;
    if (has_newtargetname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newtargetname());
    }

    // optional string onFailure_source = 201;
    if (has_onfailure_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onfailure_source());
    }

    // optional int32 errCode = 202;
    if (has_errcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 203;
    if (has_errmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional string onProgress_source = 301;
    if (has_onprogress_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onprogress_source());
    }

    // optional int64 bytes = 302;
    if (has_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 total = 303;
    if (has_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void downloadFile_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const downloadFile_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const downloadFile_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void downloadFile_Response::MergeFrom(const downloadFile_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_onsuccess_source()) {
      set_onsuccess_source(from.onsuccess_source());
    }
    if (from.has_newtargetname()) {
      set_newtargetname(from.newtargetname());
    }
    if (from.has_onfailure_source()) {
      set_onfailure_source(from.onfailure_source());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_onprogress_source()) {
      set_onprogress_source(from.onprogress_source());
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void downloadFile_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void downloadFile_Response::CopyFrom(const downloadFile_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool downloadFile_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void downloadFile_Response::Swap(downloadFile_Response* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(onsuccess_source_, other->onsuccess_source_);
    std::swap(newtargetname_, other->newtargetname_);
    std::swap(onfailure_source_, other->onfailure_source_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(onprogress_source_, other->onprogress_source_);
    std::swap(bytes_, other->bytes_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata downloadFile_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = downloadFile_Response_descriptor_;
  metadata.reflection = downloadFile_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int downloadFileFromStream_Request::kFromFileNameFieldNumber;
const int downloadFileFromStream_Request::kToFileNameFieldNumber;
#endif  // !_MSC_VER

downloadFileFromStream_Request::downloadFileFromStream_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.downloadFileFromStream_Request)
}

void downloadFileFromStream_Request::InitAsDefaultInstance() {
}

downloadFileFromStream_Request::downloadFileFromStream_Request(const downloadFileFromStream_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.downloadFileFromStream_Request)
}

void downloadFileFromStream_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fromfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

downloadFileFromStream_Request::~downloadFileFromStream_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.downloadFileFromStream_Request)
  SharedDtor();
}

void downloadFileFromStream_Request::SharedDtor() {
  if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromfilename_;
  }
  if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tofilename_;
  }
  if (this != default_instance_) {
  }
}

void downloadFileFromStream_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* downloadFileFromStream_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return downloadFileFromStream_Request_descriptor_;
}

const downloadFileFromStream_Request& downloadFileFromStream_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

downloadFileFromStream_Request* downloadFileFromStream_Request::default_instance_ = NULL;

downloadFileFromStream_Request* downloadFileFromStream_Request::New() const {
  return new downloadFileFromStream_Request;
}

void downloadFileFromStream_Request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_fromfilename()) {
      if (fromfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fromfilename_->clear();
      }
    }
    if (has_tofilename()) {
      if (tofilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tofilename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool downloadFileFromStream_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.downloadFileFromStream_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fromFileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromfilename().data(), this->fromfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fromfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_toFileName;
        break;
      }

      // required string toFileName = 2;
      case 2: {
        if (tag == 18) {
         parse_toFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tofilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tofilename().data(), this->tofilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tofilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.downloadFileFromStream_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.downloadFileFromStream_Request)
  return false;
#undef DO_
}

void downloadFileFromStream_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.downloadFileFromStream_Request)
  // required string fromFileName = 1;
  if (has_fromfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromfilename().data(), this->fromfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fromfilename(), output);
  }

  // required string toFileName = 2;
  if (has_tofilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tofilename().data(), this->tofilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tofilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tofilename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.downloadFileFromStream_Request)
}

::google::protobuf::uint8* downloadFileFromStream_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.downloadFileFromStream_Request)
  // required string fromFileName = 1;
  if (has_fromfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromfilename().data(), this->fromfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromfilename(), target);
  }

  // required string toFileName = 2;
  if (has_tofilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tofilename().data(), this->tofilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tofilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tofilename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.downloadFileFromStream_Request)
  return target;
}

int downloadFileFromStream_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fromFileName = 1;
    if (has_fromfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromfilename());
    }

    // required string toFileName = 2;
    if (has_tofilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tofilename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void downloadFileFromStream_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const downloadFileFromStream_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const downloadFileFromStream_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void downloadFileFromStream_Request::MergeFrom(const downloadFileFromStream_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromfilename()) {
      set_fromfilename(from.fromfilename());
    }
    if (from.has_tofilename()) {
      set_tofilename(from.tofilename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void downloadFileFromStream_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void downloadFileFromStream_Request::CopyFrom(const downloadFileFromStream_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool downloadFileFromStream_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void downloadFileFromStream_Request::Swap(downloadFileFromStream_Request* other) {
  if (other != this) {
    std::swap(fromfilename_, other->fromfilename_);
    std::swap(tofilename_, other->tofilename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata downloadFileFromStream_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = downloadFileFromStream_Request_descriptor_;
  metadata.reflection = downloadFileFromStream_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int downloadFileFromStream_Response::kStatusCodeFieldNumber;
const int downloadFileFromStream_Response::kOnSuccessSourceFieldNumber;
const int downloadFileFromStream_Response::kNewTargetNameFieldNumber;
const int downloadFileFromStream_Response::kOnFailureSourceFieldNumber;
const int downloadFileFromStream_Response::kErrCodeFieldNumber;
const int downloadFileFromStream_Response::kErrMsgFieldNumber;
const int downloadFileFromStream_Response::kOnProgressSourceFieldNumber;
const int downloadFileFromStream_Response::kBytesFieldNumber;
const int downloadFileFromStream_Response::kTotalFieldNumber;
#endif  // !_MSC_VER

downloadFileFromStream_Response::downloadFileFromStream_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.downloadFileFromStream_Response)
}

void downloadFileFromStream_Response::InitAsDefaultInstance() {
}

downloadFileFromStream_Response::downloadFileFromStream_Response(const downloadFileFromStream_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.downloadFileFromStream_Response)
}

void downloadFileFromStream_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  onsuccess_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newtargetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onfailure_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onprogress_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_ = GOOGLE_LONGLONG(0);
  total_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

downloadFileFromStream_Response::~downloadFileFromStream_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.downloadFileFromStream_Response)
  SharedDtor();
}

void downloadFileFromStream_Response::SharedDtor() {
  if (onsuccess_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onsuccess_source_;
  }
  if (newtargetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newtargetname_;
  }
  if (onfailure_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onfailure_source_;
  }
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (onprogress_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete onprogress_source_;
  }
  if (this != default_instance_) {
  }
}

void downloadFileFromStream_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* downloadFileFromStream_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return downloadFileFromStream_Response_descriptor_;
}

const downloadFileFromStream_Response& downloadFileFromStream_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

downloadFileFromStream_Response* downloadFileFromStream_Response::default_instance_ = NULL;

downloadFileFromStream_Response* downloadFileFromStream_Response::New() const {
  return new downloadFileFromStream_Response;
}

void downloadFileFromStream_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<downloadFileFromStream_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(statuscode_, errcode_);
    if (has_onsuccess_source()) {
      if (onsuccess_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        onsuccess_source_->clear();
      }
    }
    if (has_newtargetname()) {
      if (newtargetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newtargetname_->clear();
      }
    }
    if (has_onfailure_source()) {
      if (onfailure_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        onfailure_source_->clear();
      }
    }
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_onprogress_source()) {
      if (onprogress_source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        onprogress_source_->clear();
      }
    }
    bytes_ = GOOGLE_LONGLONG(0);
  }
  total_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool downloadFileFromStream_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.downloadFileFromStream_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_onSuccess_source;
        break;
      }

      // optional string onSuccess_source = 101;
      case 101: {
        if (tag == 810) {
         parse_onSuccess_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onsuccess_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->onsuccess_source().data(), this->onsuccess_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onsuccess_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_newTargetName;
        break;
      }

      // optional string newTargetName = 102;
      case 102: {
        if (tag == 818) {
         parse_newTargetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newtargetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newtargetname().data(), this->newtargetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newtargetname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1610)) goto parse_onFailure_source;
        break;
      }

      // optional string onFailure_source = 201;
      case 201: {
        if (tag == 1610) {
         parse_onFailure_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onfailure_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->onfailure_source().data(), this->onfailure_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onfailure_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1616)) goto parse_errCode;
        break;
      }

      // optional int32 errCode = 202;
      case 202: {
        if (tag == 1616) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1626)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 203;
      case 203: {
        if (tag == 1626) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2410)) goto parse_onProgress_source;
        break;
      }

      // optional string onProgress_source = 301;
      case 301: {
        if (tag == 2410) {
         parse_onProgress_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onprogress_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->onprogress_source().data(), this->onprogress_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "onprogress_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2416)) goto parse_bytes;
        break;
      }

      // optional int64 bytes = 302;
      case 302: {
        if (tag == 2416) {
         parse_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_)));
          set_has_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2424)) goto parse_total;
        break;
      }

      // optional int64 total = 303;
      case 303: {
        if (tag == 2424) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.downloadFileFromStream_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.downloadFileFromStream_Response)
  return false;
#undef DO_
}

void downloadFileFromStream_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.downloadFileFromStream_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // optional string onSuccess_source = 101;
  if (has_onsuccess_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onsuccess_source().data(), this->onsuccess_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onsuccess_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->onsuccess_source(), output);
  }

  // optional string newTargetName = 102;
  if (has_newtargetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newtargetname().data(), this->newtargetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newtargetname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      102, this->newtargetname(), output);
  }

  // optional string onFailure_source = 201;
  if (has_onfailure_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onfailure_source().data(), this->onfailure_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onfailure_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      201, this->onfailure_source(), output);
  }

  // optional int32 errCode = 202;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(202, this->errcode(), output);
  }

  // optional string errMsg = 203;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      203, this->errmsg(), output);
  }

  // optional string onProgress_source = 301;
  if (has_onprogress_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onprogress_source().data(), this->onprogress_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onprogress_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      301, this->onprogress_source(), output);
  }

  // optional int64 bytes = 302;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(302, this->bytes(), output);
  }

  // optional int64 total = 303;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(303, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.downloadFileFromStream_Response)
}

::google::protobuf::uint8* downloadFileFromStream_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.downloadFileFromStream_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // optional string onSuccess_source = 101;
  if (has_onsuccess_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onsuccess_source().data(), this->onsuccess_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onsuccess_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->onsuccess_source(), target);
  }

  // optional string newTargetName = 102;
  if (has_newtargetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newtargetname().data(), this->newtargetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newtargetname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->newtargetname(), target);
  }

  // optional string onFailure_source = 201;
  if (has_onfailure_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onfailure_source().data(), this->onfailure_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onfailure_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        201, this->onfailure_source(), target);
  }

  // optional int32 errCode = 202;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(202, this->errcode(), target);
  }

  // optional string errMsg = 203;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        203, this->errmsg(), target);
  }

  // optional string onProgress_source = 301;
  if (has_onprogress_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->onprogress_source().data(), this->onprogress_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "onprogress_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        301, this->onprogress_source(), target);
  }

  // optional int64 bytes = 302;
  if (has_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(302, this->bytes(), target);
  }

  // optional int64 total = 303;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(303, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.downloadFileFromStream_Response)
  return target;
}

int downloadFileFromStream_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional string onSuccess_source = 101;
    if (has_onsuccess_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onsuccess_source());
    }

    // optional string newTargetName = 102;
    if (has_newtargetname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newtargetname());
    }

    // optional string onFailure_source = 201;
    if (has_onfailure_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onfailure_source());
    }

    // optional int32 errCode = 202;
    if (has_errcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 203;
    if (has_errmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional string onProgress_source = 301;
    if (has_onprogress_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onprogress_source());
    }

    // optional int64 bytes = 302;
    if (has_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 total = 303;
    if (has_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void downloadFileFromStream_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const downloadFileFromStream_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const downloadFileFromStream_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void downloadFileFromStream_Response::MergeFrom(const downloadFileFromStream_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_onsuccess_source()) {
      set_onsuccess_source(from.onsuccess_source());
    }
    if (from.has_newtargetname()) {
      set_newtargetname(from.newtargetname());
    }
    if (from.has_onfailure_source()) {
      set_onfailure_source(from.onfailure_source());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_onprogress_source()) {
      set_onprogress_source(from.onprogress_source());
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void downloadFileFromStream_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void downloadFileFromStream_Response::CopyFrom(const downloadFileFromStream_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool downloadFileFromStream_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void downloadFileFromStream_Response::Swap(downloadFileFromStream_Response* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(onsuccess_source_, other->onsuccess_source_);
    std::swap(newtargetname_, other->newtargetname_);
    std::swap(onfailure_source_, other->onfailure_source_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(onprogress_source_, other->onprogress_source_);
    std::swap(bytes_, other->bytes_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata downloadFileFromStream_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = downloadFileFromStream_Response_descriptor_;
  metadata.reflection = downloadFileFromStream_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int list_Request::kDirNameFieldNumber;
#endif  // !_MSC_VER

list_Request::list_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.list_Request)
}

void list_Request::InitAsDefaultInstance() {
}

list_Request::list_Request(const list_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.list_Request)
}

void list_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dirname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

list_Request::~list_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.list_Request)
  SharedDtor();
}

void list_Request::SharedDtor() {
  if (dirname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dirname_;
  }
  if (this != default_instance_) {
  }
}

void list_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* list_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return list_Request_descriptor_;
}

const list_Request& list_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

list_Request* list_Request::default_instance_ = NULL;

list_Request* list_Request::New() const {
  return new list_Request;
}

void list_Request::Clear() {
  if (has_dirname()) {
    if (dirname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      dirname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool list_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.list_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dirName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dirname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dirname().data(), this->dirname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dirname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.list_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.list_Request)
  return false;
#undef DO_
}

void list_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.list_Request)
  // required string dirName = 1;
  if (has_dirname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dirname().data(), this->dirname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dirname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dirname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.list_Request)
}

::google::protobuf::uint8* list_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.list_Request)
  // required string dirName = 1;
  if (has_dirname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dirname().data(), this->dirname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dirname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dirname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.list_Request)
  return target;
}

int list_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dirName = 1;
    if (has_dirname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dirname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void list_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const list_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const list_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void list_Request::MergeFrom(const list_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dirname()) {
      set_dirname(from.dirname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void list_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_Request::CopyFrom(const list_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void list_Request::Swap(list_Request* other) {
  if (other != this) {
    std::swap(dirname_, other->dirname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata list_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = list_Request_descriptor_;
  metadata.reflection = list_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int list_Response::kStatusCodeFieldNumber;
const int list_Response::kFileInfoResultListFieldNumber;
const int list_Response::kErrCodeFieldNumber;
const int list_Response::kErrMsgFieldNumber;
#endif  // !_MSC_VER

list_Response::list_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.list_Response)
}

void list_Response::InitAsDefaultInstance() {
}

list_Response::list_Response(const list_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.list_Response)
}

void list_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

list_Response::~list_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.list_Response)
  SharedDtor();
}

void list_Response::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void list_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* list_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return list_Response_descriptor_;
}

const list_Response& list_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

list_Response* list_Response::default_instance_ = NULL;

list_Response* list_Response::New() const {
  return new list_Response;
}

void list_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<list_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(statuscode_, errcode_);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fileinforesultlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool list_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.list_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_fileInfoResultList;
        break;
      }

      // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
      case 101: {
        if (tag == 810) {
         parse_fileInfoResultList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fileinforesultlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_fileInfoResultList;
        if (input->ExpectTag(1608)) goto parse_errCode;
        break;
      }

      // optional int32 errCode = 201;
      case 201: {
        if (tag == 1608) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 202;
      case 202: {
        if (tag == 1618) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.list_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.list_Response)
  return false;
#undef DO_
}

void list_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.list_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->fileinforesultlist(i), output);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->errcode(), output);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      202, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.list_Response)
}

::google::protobuf::uint8* list_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.list_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->fileinforesultlist(i), target);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->errcode(), target);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        202, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.list_Response)
  return target;
}

int list_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional int32 errCode = 201;
    if (has_errcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 202;
    if (has_errmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  total_size += 2 * this->fileinforesultlist_size();
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fileinforesultlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void list_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const list_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const list_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void list_Response::MergeFrom(const list_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  fileinforesultlist_.MergeFrom(from.fileinforesultlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void list_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_Response::CopyFrom(const list_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void list_Response::Swap(list_Response* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    fileinforesultlist_.Swap(&other->fileinforesultlist_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata list_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = list_Response_descriptor_;
  metadata.reflection = list_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

imageStream_Request::imageStream_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.imageStream_Request)
}

void imageStream_Request::InitAsDefaultInstance() {
}

imageStream_Request::imageStream_Request(const imageStream_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.imageStream_Request)
}

void imageStream_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

imageStream_Request::~imageStream_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.imageStream_Request)
  SharedDtor();
}

void imageStream_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void imageStream_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* imageStream_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return imageStream_Request_descriptor_;
}

const imageStream_Request& imageStream_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

imageStream_Request* imageStream_Request::default_instance_ = NULL;

imageStream_Request* imageStream_Request::New() const {
  return new imageStream_Request;
}

void imageStream_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool imageStream_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.imageStream_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.imageStream_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.imageStream_Request)
  return false;
#undef DO_
}

void imageStream_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.imageStream_Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.imageStream_Request)
}

::google::protobuf::uint8* imageStream_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.imageStream_Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.imageStream_Request)
  return target;
}

int imageStream_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void imageStream_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const imageStream_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const imageStream_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void imageStream_Request::MergeFrom(const imageStream_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void imageStream_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imageStream_Request::CopyFrom(const imageStream_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imageStream_Request::IsInitialized() const {

  return true;
}

void imageStream_Request::Swap(imageStream_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata imageStream_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = imageStream_Request_descriptor_;
  metadata.reflection = imageStream_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int imageStream_Response::kStatusCodeFieldNumber;
const int imageStream_Response::kFileInfoResultListFieldNumber;
const int imageStream_Response::kErrCodeFieldNumber;
const int imageStream_Response::kErrMsgFieldNumber;
#endif  // !_MSC_VER

imageStream_Response::imageStream_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.imageStream_Response)
}

void imageStream_Response::InitAsDefaultInstance() {
}

imageStream_Response::imageStream_Response(const imageStream_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.imageStream_Response)
}

void imageStream_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

imageStream_Response::~imageStream_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.imageStream_Response)
  SharedDtor();
}

void imageStream_Response::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void imageStream_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* imageStream_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return imageStream_Response_descriptor_;
}

const imageStream_Response& imageStream_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

imageStream_Response* imageStream_Response::default_instance_ = NULL;

imageStream_Response* imageStream_Response::New() const {
  return new imageStream_Response;
}

void imageStream_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<imageStream_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(statuscode_, errcode_);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fileinforesultlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool imageStream_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.imageStream_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_fileInfoResultList;
        break;
      }

      // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
      case 101: {
        if (tag == 810) {
         parse_fileInfoResultList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fileinforesultlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_fileInfoResultList;
        if (input->ExpectTag(1608)) goto parse_errCode;
        break;
      }

      // optional int32 errCode = 201;
      case 201: {
        if (tag == 1608) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 202;
      case 202: {
        if (tag == 1618) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.imageStream_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.imageStream_Response)
  return false;
#undef DO_
}

void imageStream_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.imageStream_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->fileinforesultlist(i), output);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->errcode(), output);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      202, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.imageStream_Response)
}

::google::protobuf::uint8* imageStream_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.imageStream_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->fileinforesultlist(i), target);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->errcode(), target);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        202, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.imageStream_Response)
  return target;
}

int imageStream_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional int32 errCode = 201;
    if (has_errcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 202;
    if (has_errmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  total_size += 2 * this->fileinforesultlist_size();
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fileinforesultlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void imageStream_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const imageStream_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const imageStream_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void imageStream_Response::MergeFrom(const imageStream_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  fileinforesultlist_.MergeFrom(from.fileinforesultlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void imageStream_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imageStream_Response::CopyFrom(const imageStream_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imageStream_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void imageStream_Response::Swap(imageStream_Response* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    fileinforesultlist_.Swap(&other->fileinforesultlist_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata imageStream_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = imageStream_Response_descriptor_;
  metadata.reflection = imageStream_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

audioStream_Request::audioStream_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.audioStream_Request)
}

void audioStream_Request::InitAsDefaultInstance() {
}

audioStream_Request::audioStream_Request(const audioStream_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.audioStream_Request)
}

void audioStream_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

audioStream_Request::~audioStream_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.audioStream_Request)
  SharedDtor();
}

void audioStream_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void audioStream_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* audioStream_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return audioStream_Request_descriptor_;
}

const audioStream_Request& audioStream_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

audioStream_Request* audioStream_Request::default_instance_ = NULL;

audioStream_Request* audioStream_Request::New() const {
  return new audioStream_Request;
}

void audioStream_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool audioStream_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.audioStream_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.audioStream_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.audioStream_Request)
  return false;
#undef DO_
}

void audioStream_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.audioStream_Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.audioStream_Request)
}

::google::protobuf::uint8* audioStream_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.audioStream_Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.audioStream_Request)
  return target;
}

int audioStream_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void audioStream_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const audioStream_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const audioStream_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void audioStream_Request::MergeFrom(const audioStream_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void audioStream_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void audioStream_Request::CopyFrom(const audioStream_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool audioStream_Request::IsInitialized() const {

  return true;
}

void audioStream_Request::Swap(audioStream_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata audioStream_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = audioStream_Request_descriptor_;
  metadata.reflection = audioStream_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int audioStream_Response::kStatusCodeFieldNumber;
const int audioStream_Response::kFileInfoResultListFieldNumber;
const int audioStream_Response::kErrCodeFieldNumber;
const int audioStream_Response::kErrMsgFieldNumber;
#endif  // !_MSC_VER

audioStream_Response::audioStream_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.audioStream_Response)
}

void audioStream_Response::InitAsDefaultInstance() {
}

audioStream_Response::audioStream_Response(const audioStream_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.audioStream_Response)
}

void audioStream_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

audioStream_Response::~audioStream_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.audioStream_Response)
  SharedDtor();
}

void audioStream_Response::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void audioStream_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* audioStream_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return audioStream_Response_descriptor_;
}

const audioStream_Response& audioStream_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

audioStream_Response* audioStream_Response::default_instance_ = NULL;

audioStream_Response* audioStream_Response::New() const {
  return new audioStream_Response;
}

void audioStream_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<audioStream_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(statuscode_, errcode_);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fileinforesultlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool audioStream_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.audioStream_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_fileInfoResultList;
        break;
      }

      // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
      case 101: {
        if (tag == 810) {
         parse_fileInfoResultList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fileinforesultlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_fileInfoResultList;
        if (input->ExpectTag(1608)) goto parse_errCode;
        break;
      }

      // optional int32 errCode = 201;
      case 201: {
        if (tag == 1608) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 202;
      case 202: {
        if (tag == 1618) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.audioStream_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.audioStream_Response)
  return false;
#undef DO_
}

void audioStream_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.audioStream_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->fileinforesultlist(i), output);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->errcode(), output);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      202, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.audioStream_Response)
}

::google::protobuf::uint8* audioStream_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.audioStream_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->fileinforesultlist(i), target);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->errcode(), target);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        202, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.audioStream_Response)
  return target;
}

int audioStream_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional int32 errCode = 201;
    if (has_errcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 202;
    if (has_errmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  total_size += 2 * this->fileinforesultlist_size();
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fileinforesultlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void audioStream_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const audioStream_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const audioStream_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void audioStream_Response::MergeFrom(const audioStream_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  fileinforesultlist_.MergeFrom(from.fileinforesultlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void audioStream_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void audioStream_Response::CopyFrom(const audioStream_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool audioStream_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void audioStream_Response::Swap(audioStream_Response* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    fileinforesultlist_.Swap(&other->fileinforesultlist_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata audioStream_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = audioStream_Response_descriptor_;
  metadata.reflection = audioStream_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

videoStream_Request::videoStream_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.videoStream_Request)
}

void videoStream_Request::InitAsDefaultInstance() {
}

videoStream_Request::videoStream_Request(const videoStream_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.videoStream_Request)
}

void videoStream_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

videoStream_Request::~videoStream_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.videoStream_Request)
  SharedDtor();
}

void videoStream_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void videoStream_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* videoStream_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return videoStream_Request_descriptor_;
}

const videoStream_Request& videoStream_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

videoStream_Request* videoStream_Request::default_instance_ = NULL;

videoStream_Request* videoStream_Request::New() const {
  return new videoStream_Request;
}

void videoStream_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool videoStream_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.videoStream_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.videoStream_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.videoStream_Request)
  return false;
#undef DO_
}

void videoStream_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.videoStream_Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.videoStream_Request)
}

::google::protobuf::uint8* videoStream_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.videoStream_Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.videoStream_Request)
  return target;
}

int videoStream_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void videoStream_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const videoStream_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const videoStream_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void videoStream_Request::MergeFrom(const videoStream_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void videoStream_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void videoStream_Request::CopyFrom(const videoStream_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool videoStream_Request::IsInitialized() const {

  return true;
}

void videoStream_Request::Swap(videoStream_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata videoStream_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = videoStream_Request_descriptor_;
  metadata.reflection = videoStream_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int videoStream_Response::kStatusCodeFieldNumber;
const int videoStream_Response::kFileInfoResultListFieldNumber;
const int videoStream_Response::kErrCodeFieldNumber;
const int videoStream_Response::kErrMsgFieldNumber;
#endif  // !_MSC_VER

videoStream_Response::videoStream_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.videoStream_Response)
}

void videoStream_Response::InitAsDefaultInstance() {
}

videoStream_Response::videoStream_Response(const videoStream_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.videoStream_Response)
}

void videoStream_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

videoStream_Response::~videoStream_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.videoStream_Response)
  SharedDtor();
}

void videoStream_Response::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void videoStream_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* videoStream_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return videoStream_Response_descriptor_;
}

const videoStream_Response& videoStream_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

videoStream_Response* videoStream_Response::default_instance_ = NULL;

videoStream_Response* videoStream_Response::New() const {
  return new videoStream_Response;
}

void videoStream_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<videoStream_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(statuscode_, errcode_);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fileinforesultlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool videoStream_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.videoStream_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_fileInfoResultList;
        break;
      }

      // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
      case 101: {
        if (tag == 810) {
         parse_fileInfoResultList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fileinforesultlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_fileInfoResultList;
        if (input->ExpectTag(1608)) goto parse_errCode;
        break;
      }

      // optional int32 errCode = 201;
      case 201: {
        if (tag == 1608) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 202;
      case 202: {
        if (tag == 1618) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.videoStream_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.videoStream_Response)
  return false;
#undef DO_
}

void videoStream_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.videoStream_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->fileinforesultlist(i), output);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->errcode(), output);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      202, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.videoStream_Response)
}

::google::protobuf::uint8* videoStream_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.videoStream_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->fileinforesultlist(i), target);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->errcode(), target);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        202, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.videoStream_Response)
  return target;
}

int videoStream_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional int32 errCode = 201;
    if (has_errcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 202;
    if (has_errmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  total_size += 2 * this->fileinforesultlist_size();
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fileinforesultlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void videoStream_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const videoStream_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const videoStream_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void videoStream_Response::MergeFrom(const videoStream_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  fileinforesultlist_.MergeFrom(from.fileinforesultlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void videoStream_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void videoStream_Response::CopyFrom(const videoStream_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool videoStream_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void videoStream_Response::Swap(videoStream_Response* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    fileinforesultlist_.Swap(&other->fileinforesultlist_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata videoStream_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = videoStream_Response_descriptor_;
  metadata.reflection = videoStream_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

docStream_Request::docStream_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.docStream_Request)
}

void docStream_Request::InitAsDefaultInstance() {
}

docStream_Request::docStream_Request(const docStream_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.docStream_Request)
}

void docStream_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

docStream_Request::~docStream_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.docStream_Request)
  SharedDtor();
}

void docStream_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void docStream_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* docStream_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return docStream_Request_descriptor_;
}

const docStream_Request& docStream_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

docStream_Request* docStream_Request::default_instance_ = NULL;

docStream_Request* docStream_Request::New() const {
  return new docStream_Request;
}

void docStream_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool docStream_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.docStream_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.docStream_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.docStream_Request)
  return false;
#undef DO_
}

void docStream_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.docStream_Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.docStream_Request)
}

::google::protobuf::uint8* docStream_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.docStream_Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.docStream_Request)
  return target;
}

int docStream_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void docStream_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const docStream_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const docStream_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void docStream_Request::MergeFrom(const docStream_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void docStream_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void docStream_Request::CopyFrom(const docStream_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool docStream_Request::IsInitialized() const {

  return true;
}

void docStream_Request::Swap(docStream_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata docStream_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = docStream_Request_descriptor_;
  metadata.reflection = docStream_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int docStream_Response::kStatusCodeFieldNumber;
const int docStream_Response::kFileInfoResultListFieldNumber;
const int docStream_Response::kErrCodeFieldNumber;
const int docStream_Response::kErrMsgFieldNumber;
#endif  // !_MSC_VER

docStream_Response::docStream_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.docStream_Response)
}

void docStream_Response::InitAsDefaultInstance() {
}

docStream_Response::docStream_Response(const docStream_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.docStream_Response)
}

void docStream_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

docStream_Response::~docStream_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.docStream_Response)
  SharedDtor();
}

void docStream_Response::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void docStream_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* docStream_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return docStream_Response_descriptor_;
}

const docStream_Response& docStream_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

docStream_Response* docStream_Response::default_instance_ = NULL;

docStream_Response* docStream_Response::New() const {
  return new docStream_Response;
}

void docStream_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<docStream_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(statuscode_, errcode_);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fileinforesultlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool docStream_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.docStream_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_fileInfoResultList;
        break;
      }

      // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
      case 101: {
        if (tag == 810) {
         parse_fileInfoResultList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fileinforesultlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_fileInfoResultList;
        if (input->ExpectTag(1608)) goto parse_errCode;
        break;
      }

      // optional int32 errCode = 201;
      case 201: {
        if (tag == 1608) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 202;
      case 202: {
        if (tag == 1618) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.docStream_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.docStream_Response)
  return false;
#undef DO_
}

void docStream_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.docStream_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->fileinforesultlist(i), output);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->errcode(), output);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      202, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.docStream_Response)
}

::google::protobuf::uint8* docStream_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.docStream_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->fileinforesultlist(i), target);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->errcode(), target);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        202, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.docStream_Response)
  return target;
}

int docStream_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional int32 errCode = 201;
    if (has_errcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 202;
    if (has_errmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  // repeated .org.cocos2dx.lua.FileInfoResult fileInfoResultList = 101;
  total_size += 2 * this->fileinforesultlist_size();
  for (int i = 0; i < this->fileinforesultlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fileinforesultlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void docStream_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const docStream_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const docStream_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void docStream_Response::MergeFrom(const docStream_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  fileinforesultlist_.MergeFrom(from.fileinforesultlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void docStream_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void docStream_Response::CopyFrom(const docStream_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool docStream_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void docStream_Response::Swap(docStream_Response* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    fileinforesultlist_.Swap(&other->fileinforesultlist_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata docStream_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = docStream_Response_descriptor_;
  metadata.reflection = docStream_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

quota_Request::quota_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.quota_Request)
}

void quota_Request::InitAsDefaultInstance() {
}

quota_Request::quota_Request(const quota_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.quota_Request)
}

void quota_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

quota_Request::~quota_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.quota_Request)
  SharedDtor();
}

void quota_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void quota_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* quota_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return quota_Request_descriptor_;
}

const quota_Request& quota_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

quota_Request* quota_Request::default_instance_ = NULL;

quota_Request* quota_Request::New() const {
  return new quota_Request;
}

void quota_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool quota_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.quota_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.quota_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.quota_Request)
  return false;
#undef DO_
}

void quota_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.quota_Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.quota_Request)
}

::google::protobuf::uint8* quota_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.quota_Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.quota_Request)
  return target;
}

int quota_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void quota_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const quota_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const quota_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void quota_Request::MergeFrom(const quota_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void quota_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void quota_Request::CopyFrom(const quota_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool quota_Request::IsInitialized() const {

  return true;
}

void quota_Request::Swap(quota_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata quota_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = quota_Request_descriptor_;
  metadata.reflection = quota_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int quota_Response::kStatusCodeFieldNumber;
const int quota_Response::kTotalFieldNumber;
const int quota_Response::kUsedFieldNumber;
const int quota_Response::kErrCodeFieldNumber;
const int quota_Response::kErrMsgFieldNumber;
#endif  // !_MSC_VER

quota_Response::quota_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.quota_Response)
}

void quota_Response::InitAsDefaultInstance() {
}

quota_Response::quota_Response(const quota_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.quota_Response)
}

void quota_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  total_ = GOOGLE_LONGLONG(0);
  used_ = GOOGLE_LONGLONG(0);
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

quota_Response::~quota_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.quota_Response)
  SharedDtor();
}

void quota_Response::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void quota_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* quota_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return quota_Response_descriptor_;
}

const quota_Response& quota_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

quota_Response* quota_Response::default_instance_ = NULL;

quota_Response* quota_Response::New() const {
  return new quota_Response;
}

void quota_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<quota_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(total_, used_);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool quota_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.quota_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_total;
        break;
      }

      // optional int64 total = 101;
      case 101: {
        if (tag == 808) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_used;
        break;
      }

      // optional int64 used = 102;
      case 102: {
        if (tag == 816) {
         parse_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &used_)));
          set_has_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1608)) goto parse_errCode;
        break;
      }

      // optional int32 errCode = 201;
      case 201: {
        if (tag == 1608) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 202;
      case 202: {
        if (tag == 1618) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.quota_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.quota_Response)
  return false;
#undef DO_
}

void quota_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.quota_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // optional int64 total = 101;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(101, this->total(), output);
  }

  // optional int64 used = 102;
  if (has_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(102, this->used(), output);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->errcode(), output);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      202, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.quota_Response)
}

::google::protobuf::uint8* quota_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.quota_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // optional int64 total = 101;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(101, this->total(), target);
  }

  // optional int64 used = 102;
  if (has_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(102, this->used(), target);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->errcode(), target);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        202, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.quota_Response)
  return target;
}

int quota_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional int64 total = 101;
    if (has_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total());
    }

    // optional int64 used = 102;
    if (has_used()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->used());
    }

    // optional int32 errCode = 201;
    if (has_errcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 202;
    if (has_errmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void quota_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const quota_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const quota_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void quota_Response::MergeFrom(const quota_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_used()) {
      set_used(from.used());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void quota_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void quota_Response::CopyFrom(const quota_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool quota_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void quota_Response::Swap(quota_Response* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(total_, other->total_);
    std::swap(used_, other->used_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata quota_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = quota_Response_descriptor_;
  metadata.reflection = quota_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int thumbnail_Request::kFileNameFieldNumber;
const int thumbnail_Request::kQualityFieldNumber;
const int thumbnail_Request::kWidthFieldNumber;
const int thumbnail_Request::kHeightFieldNumber;
#endif  // !_MSC_VER

thumbnail_Request::thumbnail_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.thumbnail_Request)
}

void thumbnail_Request::InitAsDefaultInstance() {
}

thumbnail_Request::thumbnail_Request(const thumbnail_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.thumbnail_Request)
}

void thumbnail_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_ = 10;
  width_ = 10;
  height_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

thumbnail_Request::~thumbnail_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.thumbnail_Request)
  SharedDtor();
}

void thumbnail_Request::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void thumbnail_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* thumbnail_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return thumbnail_Request_descriptor_;
}

const thumbnail_Request& thumbnail_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

thumbnail_Request* thumbnail_Request::default_instance_ = NULL;

thumbnail_Request* thumbnail_Request::New() const {
  return new thumbnail_Request;
}

void thumbnail_Request::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    quality_ = 10;
    width_ = 10;
    height_ = 10;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool thumbnail_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.thumbnail_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // optional int32 quality = 2 [default = 10];
      case 2: {
        if (tag == 16) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3 [default = 10];
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional int32 height = 4 [default = 10];
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.thumbnail_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.thumbnail_Request)
  return false;
#undef DO_
}

void thumbnail_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.thumbnail_Request)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional int32 quality = 2 [default = 10];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // optional int32 width = 3 [default = 10];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4 [default = 10];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.thumbnail_Request)
}

::google::protobuf::uint8* thumbnail_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.thumbnail_Request)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional int32 quality = 2 [default = 10];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // optional int32 width = 3 [default = 10];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4 [default = 10];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.thumbnail_Request)
  return target;
}

int thumbnail_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional int32 quality = 2 [default = 10];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 width = 3 [default = 10];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 4 [default = 10];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void thumbnail_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const thumbnail_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const thumbnail_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void thumbnail_Request::MergeFrom(const thumbnail_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void thumbnail_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void thumbnail_Request::CopyFrom(const thumbnail_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool thumbnail_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void thumbnail_Request::Swap(thumbnail_Request* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(quality_, other->quality_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata thumbnail_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = thumbnail_Request_descriptor_;
  metadata.reflection = thumbnail_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int thumbnail_Response::kStatusCodeFieldNumber;
const int thumbnail_Response::kBitmapStrFieldNumber;
const int thumbnail_Response::kErrCodeFieldNumber;
const int thumbnail_Response::kErrMsgFieldNumber;
#endif  // !_MSC_VER

thumbnail_Response::thumbnail_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.thumbnail_Response)
}

void thumbnail_Response::InitAsDefaultInstance() {
}

thumbnail_Response::thumbnail_Response(const thumbnail_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.thumbnail_Response)
}

void thumbnail_Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  bitmapstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

thumbnail_Response::~thumbnail_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.thumbnail_Response)
  SharedDtor();
}

void thumbnail_Response::SharedDtor() {
  if (bitmapstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bitmapstr_;
  }
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void thumbnail_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* thumbnail_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return thumbnail_Response_descriptor_;
}

const thumbnail_Response& thumbnail_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

thumbnail_Response* thumbnail_Response::default_instance_ = NULL;

thumbnail_Response* thumbnail_Response::New() const {
  return new thumbnail_Response;
}

void thumbnail_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<thumbnail_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(statuscode_, errcode_);
    if (has_bitmapstr()) {
      if (bitmapstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bitmapstr_->clear();
      }
    }
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool thumbnail_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.thumbnail_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_bitmapStr;
        break;
      }

      // optional string bitmapStr = 101;
      case 101: {
        if (tag == 810) {
         parse_bitmapStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bitmapstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bitmapstr().data(), this->bitmapstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bitmapstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1608)) goto parse_errCode;
        break;
      }

      // optional int32 errCode = 201;
      case 201: {
        if (tag == 1608) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_errMsg;
        break;
      }

      // optional string errMsg = 202;
      case 202: {
        if (tag == 1618) {
         parse_errMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.thumbnail_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.thumbnail_Response)
  return false;
#undef DO_
}

void thumbnail_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.thumbnail_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // optional string bitmapStr = 101;
  if (has_bitmapstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bitmapstr().data(), this->bitmapstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bitmapstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->bitmapstr(), output);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->errcode(), output);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      202, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.thumbnail_Response)
}

::google::protobuf::uint8* thumbnail_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.thumbnail_Response)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // optional string bitmapStr = 101;
  if (has_bitmapstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bitmapstr().data(), this->bitmapstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bitmapstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->bitmapstr(), target);
  }

  // optional int32 errCode = 201;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->errcode(), target);
  }

  // optional string errMsg = 202;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        202, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.thumbnail_Response)
  return target;
}

int thumbnail_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // optional string bitmapStr = 101;
    if (has_bitmapstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bitmapstr());
    }

    // optional int32 errCode = 201;
    if (has_errcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // optional string errMsg = 202;
    if (has_errmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void thumbnail_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const thumbnail_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const thumbnail_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void thumbnail_Response::MergeFrom(const thumbnail_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_bitmapstr()) {
      set_bitmapstr(from.bitmapstr());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void thumbnail_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void thumbnail_Response::CopyFrom(const thumbnail_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool thumbnail_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void thumbnail_Response::Swap(thumbnail_Response* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(bitmapstr_, other->bitmapstr_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata thumbnail_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = thumbnail_Response_descriptor_;
  metadata.reflection = thumbnail_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vibrate_Request::kTimeFieldNumber;
#endif  // !_MSC_VER

vibrate_Request::vibrate_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.vibrate_Request)
}

void vibrate_Request::InitAsDefaultInstance() {
}

vibrate_Request::vibrate_Request(const vibrate_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.vibrate_Request)
}

void vibrate_Request::SharedCtor() {
  _cached_size_ = 0;
  time_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vibrate_Request::~vibrate_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.vibrate_Request)
  SharedDtor();
}

void vibrate_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vibrate_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vibrate_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vibrate_Request_descriptor_;
}

const vibrate_Request& vibrate_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

vibrate_Request* vibrate_Request::default_instance_ = NULL;

vibrate_Request* vibrate_Request::New() const {
  return new vibrate_Request;
}

void vibrate_Request::Clear() {
  time_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vibrate_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.vibrate_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 1 [default = 10];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.vibrate_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.vibrate_Request)
  return false;
#undef DO_
}

void vibrate_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.vibrate_Request)
  // optional int32 time = 1 [default = 10];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.vibrate_Request)
}

::google::protobuf::uint8* vibrate_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.vibrate_Request)
  // optional int32 time = 1 [default = 10];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.vibrate_Request)
  return target;
}

int vibrate_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time = 1 [default = 10];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vibrate_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vibrate_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vibrate_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vibrate_Request::MergeFrom(const vibrate_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vibrate_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vibrate_Request::CopyFrom(const vibrate_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vibrate_Request::IsInitialized() const {

  return true;
}

void vibrate_Request::Swap(vibrate_Request* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vibrate_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vibrate_Request_descriptor_;
  metadata.reflection = vibrate_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vibrate_Response::kIssuccessFieldNumber;
#endif  // !_MSC_VER

vibrate_Response::vibrate_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.vibrate_Response)
}

void vibrate_Response::InitAsDefaultInstance() {
}

vibrate_Response::vibrate_Response(const vibrate_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.vibrate_Response)
}

void vibrate_Response::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vibrate_Response::~vibrate_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.vibrate_Response)
  SharedDtor();
}

void vibrate_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vibrate_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vibrate_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vibrate_Response_descriptor_;
}

const vibrate_Response& vibrate_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

vibrate_Response* vibrate_Response::default_instance_ = NULL;

vibrate_Response* vibrate_Response::New() const {
  return new vibrate_Response;
}

void vibrate_Response::Clear() {
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vibrate_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.vibrate_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 issuccess = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.vibrate_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.vibrate_Response)
  return false;
#undef DO_
}

void vibrate_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.vibrate_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->issuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.vibrate_Response)
}

::google::protobuf::uint8* vibrate_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.vibrate_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->issuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.vibrate_Response)
  return target;
}

int vibrate_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 issuccess = 1;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issuccess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vibrate_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vibrate_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vibrate_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vibrate_Response::MergeFrom(const vibrate_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vibrate_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vibrate_Response::CopyFrom(const vibrate_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vibrate_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void vibrate_Response::Swap(vibrate_Response* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vibrate_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vibrate_Response_descriptor_;
  metadata.reflection = vibrate_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vibrateWithPattern_Request::kPatternFieldNumber;
const int vibrateWithPattern_Request::kRepeatTimeFieldNumber;
#endif  // !_MSC_VER

vibrateWithPattern_Request::vibrateWithPattern_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.vibrateWithPattern_Request)
}

void vibrateWithPattern_Request::InitAsDefaultInstance() {
}

vibrateWithPattern_Request::vibrateWithPattern_Request(const vibrateWithPattern_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.vibrateWithPattern_Request)
}

void vibrateWithPattern_Request::SharedCtor() {
  _cached_size_ = 0;
  repeattime_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vibrateWithPattern_Request::~vibrateWithPattern_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.vibrateWithPattern_Request)
  SharedDtor();
}

void vibrateWithPattern_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vibrateWithPattern_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vibrateWithPattern_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vibrateWithPattern_Request_descriptor_;
}

const vibrateWithPattern_Request& vibrateWithPattern_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

vibrateWithPattern_Request* vibrateWithPattern_Request::default_instance_ = NULL;

vibrateWithPattern_Request* vibrateWithPattern_Request::New() const {
  return new vibrateWithPattern_Request;
}

void vibrateWithPattern_Request::Clear() {
  repeattime_ = 1;
  pattern_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vibrateWithPattern_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.vibrateWithPattern_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 pattern = 1;
      case 1: {
        if (tag == 8) {
         parse_pattern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_pattern())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pattern())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_pattern;
        if (input->ExpectTag(16)) goto parse_repeatTime;
        break;
      }

      // optional int32 repeatTime = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_repeatTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repeattime_)));
          set_has_repeattime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.vibrateWithPattern_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.vibrateWithPattern_Request)
  return false;
#undef DO_
}

void vibrateWithPattern_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.vibrateWithPattern_Request)
  // repeated int32 pattern = 1;
  for (int i = 0; i < this->pattern_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->pattern(i), output);
  }

  // optional int32 repeatTime = 2 [default = 1];
  if (has_repeattime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->repeattime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.vibrateWithPattern_Request)
}

::google::protobuf::uint8* vibrateWithPattern_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.vibrateWithPattern_Request)
  // repeated int32 pattern = 1;
  for (int i = 0; i < this->pattern_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->pattern(i), target);
  }

  // optional int32 repeatTime = 2 [default = 1];
  if (has_repeattime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->repeattime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.vibrateWithPattern_Request)
  return target;
}

int vibrateWithPattern_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 repeatTime = 2 [default = 1];
    if (has_repeattime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repeattime());
    }

  }
  // repeated int32 pattern = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pattern_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pattern(i));
    }
    total_size += 1 * this->pattern_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vibrateWithPattern_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vibrateWithPattern_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vibrateWithPattern_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vibrateWithPattern_Request::MergeFrom(const vibrateWithPattern_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  pattern_.MergeFrom(from.pattern_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_repeattime()) {
      set_repeattime(from.repeattime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vibrateWithPattern_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vibrateWithPattern_Request::CopyFrom(const vibrateWithPattern_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vibrateWithPattern_Request::IsInitialized() const {

  return true;
}

void vibrateWithPattern_Request::Swap(vibrateWithPattern_Request* other) {
  if (other != this) {
    pattern_.Swap(&other->pattern_);
    std::swap(repeattime_, other->repeattime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vibrateWithPattern_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vibrateWithPattern_Request_descriptor_;
  metadata.reflection = vibrateWithPattern_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vibrateWithPattern_Response::kIssuccessFieldNumber;
#endif  // !_MSC_VER

vibrateWithPattern_Response::vibrateWithPattern_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.vibrateWithPattern_Response)
}

void vibrateWithPattern_Response::InitAsDefaultInstance() {
}

vibrateWithPattern_Response::vibrateWithPattern_Response(const vibrateWithPattern_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.vibrateWithPattern_Response)
}

void vibrateWithPattern_Response::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vibrateWithPattern_Response::~vibrateWithPattern_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.vibrateWithPattern_Response)
  SharedDtor();
}

void vibrateWithPattern_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vibrateWithPattern_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vibrateWithPattern_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vibrateWithPattern_Response_descriptor_;
}

const vibrateWithPattern_Response& vibrateWithPattern_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

vibrateWithPattern_Response* vibrateWithPattern_Response::default_instance_ = NULL;

vibrateWithPattern_Response* vibrateWithPattern_Response::New() const {
  return new vibrateWithPattern_Response;
}

void vibrateWithPattern_Response::Clear() {
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vibrateWithPattern_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.vibrateWithPattern_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 issuccess = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.vibrateWithPattern_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.vibrateWithPattern_Response)
  return false;
#undef DO_
}

void vibrateWithPattern_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.vibrateWithPattern_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->issuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.vibrateWithPattern_Response)
}

::google::protobuf::uint8* vibrateWithPattern_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.vibrateWithPattern_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->issuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.vibrateWithPattern_Response)
  return target;
}

int vibrateWithPattern_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 issuccess = 1;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issuccess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vibrateWithPattern_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vibrateWithPattern_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vibrateWithPattern_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vibrateWithPattern_Response::MergeFrom(const vibrateWithPattern_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vibrateWithPattern_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vibrateWithPattern_Response::CopyFrom(const vibrateWithPattern_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vibrateWithPattern_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void vibrateWithPattern_Response::Swap(vibrateWithPattern_Response* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vibrateWithPattern_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vibrateWithPattern_Response_descriptor_;
  metadata.reflection = vibrateWithPattern_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

cancelVibrate_Request::cancelVibrate_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.cancelVibrate_Request)
}

void cancelVibrate_Request::InitAsDefaultInstance() {
}

cancelVibrate_Request::cancelVibrate_Request(const cancelVibrate_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.cancelVibrate_Request)
}

void cancelVibrate_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cancelVibrate_Request::~cancelVibrate_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.cancelVibrate_Request)
  SharedDtor();
}

void cancelVibrate_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cancelVibrate_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cancelVibrate_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cancelVibrate_Request_descriptor_;
}

const cancelVibrate_Request& cancelVibrate_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

cancelVibrate_Request* cancelVibrate_Request::default_instance_ = NULL;

cancelVibrate_Request* cancelVibrate_Request::New() const {
  return new cancelVibrate_Request;
}

void cancelVibrate_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cancelVibrate_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.cancelVibrate_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.cancelVibrate_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.cancelVibrate_Request)
  return false;
#undef DO_
}

void cancelVibrate_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.cancelVibrate_Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.cancelVibrate_Request)
}

::google::protobuf::uint8* cancelVibrate_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.cancelVibrate_Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.cancelVibrate_Request)
  return target;
}

int cancelVibrate_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cancelVibrate_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cancelVibrate_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cancelVibrate_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cancelVibrate_Request::MergeFrom(const cancelVibrate_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cancelVibrate_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cancelVibrate_Request::CopyFrom(const cancelVibrate_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancelVibrate_Request::IsInitialized() const {

  return true;
}

void cancelVibrate_Request::Swap(cancelVibrate_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cancelVibrate_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cancelVibrate_Request_descriptor_;
  metadata.reflection = cancelVibrate_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cancelVibrate_Response::kIssuccessFieldNumber;
#endif  // !_MSC_VER

cancelVibrate_Response::cancelVibrate_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.cancelVibrate_Response)
}

void cancelVibrate_Response::InitAsDefaultInstance() {
}

cancelVibrate_Response::cancelVibrate_Response(const cancelVibrate_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.cancelVibrate_Response)
}

void cancelVibrate_Response::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cancelVibrate_Response::~cancelVibrate_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.cancelVibrate_Response)
  SharedDtor();
}

void cancelVibrate_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cancelVibrate_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cancelVibrate_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cancelVibrate_Response_descriptor_;
}

const cancelVibrate_Response& cancelVibrate_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

cancelVibrate_Response* cancelVibrate_Response::default_instance_ = NULL;

cancelVibrate_Response* cancelVibrate_Response::New() const {
  return new cancelVibrate_Response;
}

void cancelVibrate_Response::Clear() {
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cancelVibrate_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.cancelVibrate_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 issuccess = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.cancelVibrate_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.cancelVibrate_Response)
  return false;
#undef DO_
}

void cancelVibrate_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.cancelVibrate_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->issuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.cancelVibrate_Response)
}

::google::protobuf::uint8* cancelVibrate_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.cancelVibrate_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->issuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.cancelVibrate_Response)
  return target;
}

int cancelVibrate_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 issuccess = 1;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issuccess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cancelVibrate_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cancelVibrate_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cancelVibrate_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cancelVibrate_Response::MergeFrom(const cancelVibrate_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cancelVibrate_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cancelVibrate_Response::CopyFrom(const cancelVibrate_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancelVibrate_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cancelVibrate_Response::Swap(cancelVibrate_Response* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cancelVibrate_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cancelVibrate_Response_descriptor_;
  metadata.reflection = cancelVibrate_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AudioManager_getStreamVolume_Request::kStreamTypeFieldNumber;
#endif  // !_MSC_VER

AudioManager_getStreamVolume_Request::AudioManager_getStreamVolume_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.AudioManager_getStreamVolume_Request)
}

void AudioManager_getStreamVolume_Request::InitAsDefaultInstance() {
}

AudioManager_getStreamVolume_Request::AudioManager_getStreamVolume_Request(const AudioManager_getStreamVolume_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.AudioManager_getStreamVolume_Request)
}

void AudioManager_getStreamVolume_Request::SharedCtor() {
  _cached_size_ = 0;
  streamtype_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioManager_getStreamVolume_Request::~AudioManager_getStreamVolume_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.AudioManager_getStreamVolume_Request)
  SharedDtor();
}

void AudioManager_getStreamVolume_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AudioManager_getStreamVolume_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioManager_getStreamVolume_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioManager_getStreamVolume_Request_descriptor_;
}

const AudioManager_getStreamVolume_Request& AudioManager_getStreamVolume_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

AudioManager_getStreamVolume_Request* AudioManager_getStreamVolume_Request::default_instance_ = NULL;

AudioManager_getStreamVolume_Request* AudioManager_getStreamVolume_Request::New() const {
  return new AudioManager_getStreamVolume_Request;
}

void AudioManager_getStreamVolume_Request::Clear() {
  streamtype_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioManager_getStreamVolume_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.AudioManager_getStreamVolume_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 streamType = 1 [default = 3];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streamtype_)));
          set_has_streamtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.AudioManager_getStreamVolume_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.AudioManager_getStreamVolume_Request)
  return false;
#undef DO_
}

void AudioManager_getStreamVolume_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.AudioManager_getStreamVolume_Request)
  // required int32 streamType = 1 [default = 3];
  if (has_streamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->streamtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.AudioManager_getStreamVolume_Request)
}

::google::protobuf::uint8* AudioManager_getStreamVolume_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.AudioManager_getStreamVolume_Request)
  // required int32 streamType = 1 [default = 3];
  if (has_streamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->streamtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.AudioManager_getStreamVolume_Request)
  return target;
}

int AudioManager_getStreamVolume_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 streamType = 1 [default = 3];
    if (has_streamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streamtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioManager_getStreamVolume_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioManager_getStreamVolume_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioManager_getStreamVolume_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioManager_getStreamVolume_Request::MergeFrom(const AudioManager_getStreamVolume_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streamtype()) {
      set_streamtype(from.streamtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioManager_getStreamVolume_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioManager_getStreamVolume_Request::CopyFrom(const AudioManager_getStreamVolume_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioManager_getStreamVolume_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AudioManager_getStreamVolume_Request::Swap(AudioManager_getStreamVolume_Request* other) {
  if (other != this) {
    std::swap(streamtype_, other->streamtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioManager_getStreamVolume_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioManager_getStreamVolume_Request_descriptor_;
  metadata.reflection = AudioManager_getStreamVolume_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AudioManager_getStreamVolume_Response::kIssuccessFieldNumber;
const int AudioManager_getStreamVolume_Response::kValueFieldNumber;
#endif  // !_MSC_VER

AudioManager_getStreamVolume_Response::AudioManager_getStreamVolume_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.AudioManager_getStreamVolume_Response)
}

void AudioManager_getStreamVolume_Response::InitAsDefaultInstance() {
}

AudioManager_getStreamVolume_Response::AudioManager_getStreamVolume_Response(const AudioManager_getStreamVolume_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.AudioManager_getStreamVolume_Response)
}

void AudioManager_getStreamVolume_Response::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioManager_getStreamVolume_Response::~AudioManager_getStreamVolume_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.AudioManager_getStreamVolume_Response)
  SharedDtor();
}

void AudioManager_getStreamVolume_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AudioManager_getStreamVolume_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioManager_getStreamVolume_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioManager_getStreamVolume_Response_descriptor_;
}

const AudioManager_getStreamVolume_Response& AudioManager_getStreamVolume_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

AudioManager_getStreamVolume_Response* AudioManager_getStreamVolume_Response::default_instance_ = NULL;

AudioManager_getStreamVolume_Response* AudioManager_getStreamVolume_Response::New() const {
  return new AudioManager_getStreamVolume_Response;
}

void AudioManager_getStreamVolume_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AudioManager_getStreamVolume_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(issuccess_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioManager_getStreamVolume_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.AudioManager_getStreamVolume_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 issuccess = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.AudioManager_getStreamVolume_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.AudioManager_getStreamVolume_Response)
  return false;
#undef DO_
}

void AudioManager_getStreamVolume_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.AudioManager_getStreamVolume_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->issuccess(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.AudioManager_getStreamVolume_Response)
}

::google::protobuf::uint8* AudioManager_getStreamVolume_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.AudioManager_getStreamVolume_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->issuccess(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.AudioManager_getStreamVolume_Response)
  return target;
}

int AudioManager_getStreamVolume_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 issuccess = 1;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issuccess());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioManager_getStreamVolume_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioManager_getStreamVolume_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioManager_getStreamVolume_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioManager_getStreamVolume_Response::MergeFrom(const AudioManager_getStreamVolume_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioManager_getStreamVolume_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioManager_getStreamVolume_Response::CopyFrom(const AudioManager_getStreamVolume_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioManager_getStreamVolume_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AudioManager_getStreamVolume_Response::Swap(AudioManager_getStreamVolume_Response* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioManager_getStreamVolume_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioManager_getStreamVolume_Response_descriptor_;
  metadata.reflection = AudioManager_getStreamVolume_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AudioManager_setStreamVolume_Request::kStreamTypeFieldNumber;
const int AudioManager_setStreamVolume_Request::kValueFieldNumber;
#endif  // !_MSC_VER

AudioManager_setStreamVolume_Request::AudioManager_setStreamVolume_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.AudioManager_setStreamVolume_Request)
}

void AudioManager_setStreamVolume_Request::InitAsDefaultInstance() {
}

AudioManager_setStreamVolume_Request::AudioManager_setStreamVolume_Request(const AudioManager_setStreamVolume_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.AudioManager_setStreamVolume_Request)
}

void AudioManager_setStreamVolume_Request::SharedCtor() {
  _cached_size_ = 0;
  streamtype_ = 3;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioManager_setStreamVolume_Request::~AudioManager_setStreamVolume_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.AudioManager_setStreamVolume_Request)
  SharedDtor();
}

void AudioManager_setStreamVolume_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AudioManager_setStreamVolume_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioManager_setStreamVolume_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioManager_setStreamVolume_Request_descriptor_;
}

const AudioManager_setStreamVolume_Request& AudioManager_setStreamVolume_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

AudioManager_setStreamVolume_Request* AudioManager_setStreamVolume_Request::default_instance_ = NULL;

AudioManager_setStreamVolume_Request* AudioManager_setStreamVolume_Request::New() const {
  return new AudioManager_setStreamVolume_Request;
}

void AudioManager_setStreamVolume_Request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    streamtype_ = 3;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioManager_setStreamVolume_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.AudioManager_setStreamVolume_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 streamType = 1 [default = 3];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streamtype_)));
          set_has_streamtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.AudioManager_setStreamVolume_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.AudioManager_setStreamVolume_Request)
  return false;
#undef DO_
}

void AudioManager_setStreamVolume_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.AudioManager_setStreamVolume_Request)
  // required int32 streamType = 1 [default = 3];
  if (has_streamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->streamtype(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.AudioManager_setStreamVolume_Request)
}

::google::protobuf::uint8* AudioManager_setStreamVolume_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.AudioManager_setStreamVolume_Request)
  // required int32 streamType = 1 [default = 3];
  if (has_streamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->streamtype(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.AudioManager_setStreamVolume_Request)
  return target;
}

int AudioManager_setStreamVolume_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 streamType = 1 [default = 3];
    if (has_streamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streamtype());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioManager_setStreamVolume_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioManager_setStreamVolume_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioManager_setStreamVolume_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioManager_setStreamVolume_Request::MergeFrom(const AudioManager_setStreamVolume_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streamtype()) {
      set_streamtype(from.streamtype());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioManager_setStreamVolume_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioManager_setStreamVolume_Request::CopyFrom(const AudioManager_setStreamVolume_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioManager_setStreamVolume_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AudioManager_setStreamVolume_Request::Swap(AudioManager_setStreamVolume_Request* other) {
  if (other != this) {
    std::swap(streamtype_, other->streamtype_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioManager_setStreamVolume_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioManager_setStreamVolume_Request_descriptor_;
  metadata.reflection = AudioManager_setStreamVolume_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AudioManager_setStreamVolume_Response::kIssuccessFieldNumber;
#endif  // !_MSC_VER

AudioManager_setStreamVolume_Response::AudioManager_setStreamVolume_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.AudioManager_setStreamVolume_Response)
}

void AudioManager_setStreamVolume_Response::InitAsDefaultInstance() {
}

AudioManager_setStreamVolume_Response::AudioManager_setStreamVolume_Response(const AudioManager_setStreamVolume_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.AudioManager_setStreamVolume_Response)
}

void AudioManager_setStreamVolume_Response::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioManager_setStreamVolume_Response::~AudioManager_setStreamVolume_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.AudioManager_setStreamVolume_Response)
  SharedDtor();
}

void AudioManager_setStreamVolume_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AudioManager_setStreamVolume_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioManager_setStreamVolume_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioManager_setStreamVolume_Response_descriptor_;
}

const AudioManager_setStreamVolume_Response& AudioManager_setStreamVolume_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

AudioManager_setStreamVolume_Response* AudioManager_setStreamVolume_Response::default_instance_ = NULL;

AudioManager_setStreamVolume_Response* AudioManager_setStreamVolume_Response::New() const {
  return new AudioManager_setStreamVolume_Response;
}

void AudioManager_setStreamVolume_Response::Clear() {
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioManager_setStreamVolume_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.AudioManager_setStreamVolume_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 issuccess = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.AudioManager_setStreamVolume_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.AudioManager_setStreamVolume_Response)
  return false;
#undef DO_
}

void AudioManager_setStreamVolume_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.AudioManager_setStreamVolume_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->issuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.AudioManager_setStreamVolume_Response)
}

::google::protobuf::uint8* AudioManager_setStreamVolume_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.AudioManager_setStreamVolume_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->issuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.AudioManager_setStreamVolume_Response)
  return target;
}

int AudioManager_setStreamVolume_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 issuccess = 1;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issuccess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioManager_setStreamVolume_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioManager_setStreamVolume_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioManager_setStreamVolume_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioManager_setStreamVolume_Response::MergeFrom(const AudioManager_setStreamVolume_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioManager_setStreamVolume_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioManager_setStreamVolume_Response::CopyFrom(const AudioManager_setStreamVolume_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioManager_setStreamVolume_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AudioManager_setStreamVolume_Response::Swap(AudioManager_setStreamVolume_Response* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioManager_setStreamVolume_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioManager_setStreamVolume_Response_descriptor_;
  metadata.reflection = AudioManager_setStreamVolume_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AudioManager_getStreamMaxVolume_Request::kStreamTypeFieldNumber;
#endif  // !_MSC_VER

AudioManager_getStreamMaxVolume_Request::AudioManager_getStreamMaxVolume_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Request)
}

void AudioManager_getStreamMaxVolume_Request::InitAsDefaultInstance() {
}

AudioManager_getStreamMaxVolume_Request::AudioManager_getStreamMaxVolume_Request(const AudioManager_getStreamMaxVolume_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Request)
}

void AudioManager_getStreamMaxVolume_Request::SharedCtor() {
  _cached_size_ = 0;
  streamtype_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioManager_getStreamMaxVolume_Request::~AudioManager_getStreamMaxVolume_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Request)
  SharedDtor();
}

void AudioManager_getStreamMaxVolume_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AudioManager_getStreamMaxVolume_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioManager_getStreamMaxVolume_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioManager_getStreamMaxVolume_Request_descriptor_;
}

const AudioManager_getStreamMaxVolume_Request& AudioManager_getStreamMaxVolume_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

AudioManager_getStreamMaxVolume_Request* AudioManager_getStreamMaxVolume_Request::default_instance_ = NULL;

AudioManager_getStreamMaxVolume_Request* AudioManager_getStreamMaxVolume_Request::New() const {
  return new AudioManager_getStreamMaxVolume_Request;
}

void AudioManager_getStreamMaxVolume_Request::Clear() {
  streamtype_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioManager_getStreamMaxVolume_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 streamType = 1 [default = 3];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streamtype_)));
          set_has_streamtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Request)
  return false;
#undef DO_
}

void AudioManager_getStreamMaxVolume_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Request)
  // required int32 streamType = 1 [default = 3];
  if (has_streamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->streamtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Request)
}

::google::protobuf::uint8* AudioManager_getStreamMaxVolume_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Request)
  // required int32 streamType = 1 [default = 3];
  if (has_streamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->streamtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Request)
  return target;
}

int AudioManager_getStreamMaxVolume_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 streamType = 1 [default = 3];
    if (has_streamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streamtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioManager_getStreamMaxVolume_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioManager_getStreamMaxVolume_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioManager_getStreamMaxVolume_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioManager_getStreamMaxVolume_Request::MergeFrom(const AudioManager_getStreamMaxVolume_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streamtype()) {
      set_streamtype(from.streamtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioManager_getStreamMaxVolume_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioManager_getStreamMaxVolume_Request::CopyFrom(const AudioManager_getStreamMaxVolume_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioManager_getStreamMaxVolume_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AudioManager_getStreamMaxVolume_Request::Swap(AudioManager_getStreamMaxVolume_Request* other) {
  if (other != this) {
    std::swap(streamtype_, other->streamtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioManager_getStreamMaxVolume_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioManager_getStreamMaxVolume_Request_descriptor_;
  metadata.reflection = AudioManager_getStreamMaxVolume_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AudioManager_getStreamMaxVolume_Response::kIssuccessFieldNumber;
const int AudioManager_getStreamMaxVolume_Response::kValueFieldNumber;
#endif  // !_MSC_VER

AudioManager_getStreamMaxVolume_Response::AudioManager_getStreamMaxVolume_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response)
}

void AudioManager_getStreamMaxVolume_Response::InitAsDefaultInstance() {
}

AudioManager_getStreamMaxVolume_Response::AudioManager_getStreamMaxVolume_Response(const AudioManager_getStreamMaxVolume_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response)
}

void AudioManager_getStreamMaxVolume_Response::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioManager_getStreamMaxVolume_Response::~AudioManager_getStreamMaxVolume_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response)
  SharedDtor();
}

void AudioManager_getStreamMaxVolume_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AudioManager_getStreamMaxVolume_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioManager_getStreamMaxVolume_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioManager_getStreamMaxVolume_Response_descriptor_;
}

const AudioManager_getStreamMaxVolume_Response& AudioManager_getStreamMaxVolume_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

AudioManager_getStreamMaxVolume_Response* AudioManager_getStreamMaxVolume_Response::default_instance_ = NULL;

AudioManager_getStreamMaxVolume_Response* AudioManager_getStreamMaxVolume_Response::New() const {
  return new AudioManager_getStreamMaxVolume_Response;
}

void AudioManager_getStreamMaxVolume_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AudioManager_getStreamMaxVolume_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(issuccess_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioManager_getStreamMaxVolume_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 issuccess = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response)
  return false;
#undef DO_
}

void AudioManager_getStreamMaxVolume_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->issuccess(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response)
}

::google::protobuf::uint8* AudioManager_getStreamMaxVolume_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->issuccess(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.AudioManager_getStreamMaxVolume_Response)
  return target;
}

int AudioManager_getStreamMaxVolume_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 issuccess = 1;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issuccess());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioManager_getStreamMaxVolume_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioManager_getStreamMaxVolume_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioManager_getStreamMaxVolume_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioManager_getStreamMaxVolume_Response::MergeFrom(const AudioManager_getStreamMaxVolume_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioManager_getStreamMaxVolume_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioManager_getStreamMaxVolume_Response::CopyFrom(const AudioManager_getStreamMaxVolume_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioManager_getStreamMaxVolume_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AudioManager_getStreamMaxVolume_Response::Swap(AudioManager_getStreamMaxVolume_Response* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioManager_getStreamMaxVolume_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioManager_getStreamMaxVolume_Response_descriptor_;
  metadata.reflection = AudioManager_getStreamMaxVolume_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AudioManager_setStreamMute_Request::kStreamTypeFieldNumber;
const int AudioManager_setStreamMute_Request::kValueFieldNumber;
#endif  // !_MSC_VER

AudioManager_setStreamMute_Request::AudioManager_setStreamMute_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.AudioManager_setStreamMute_Request)
}

void AudioManager_setStreamMute_Request::InitAsDefaultInstance() {
}

AudioManager_setStreamMute_Request::AudioManager_setStreamMute_Request(const AudioManager_setStreamMute_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.AudioManager_setStreamMute_Request)
}

void AudioManager_setStreamMute_Request::SharedCtor() {
  _cached_size_ = 0;
  streamtype_ = 3;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioManager_setStreamMute_Request::~AudioManager_setStreamMute_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.AudioManager_setStreamMute_Request)
  SharedDtor();
}

void AudioManager_setStreamMute_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AudioManager_setStreamMute_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioManager_setStreamMute_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioManager_setStreamMute_Request_descriptor_;
}

const AudioManager_setStreamMute_Request& AudioManager_setStreamMute_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

AudioManager_setStreamMute_Request* AudioManager_setStreamMute_Request::default_instance_ = NULL;

AudioManager_setStreamMute_Request* AudioManager_setStreamMute_Request::New() const {
  return new AudioManager_setStreamMute_Request;
}

void AudioManager_setStreamMute_Request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    streamtype_ = 3;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioManager_setStreamMute_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.AudioManager_setStreamMute_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 streamType = 1 [default = 3];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streamtype_)));
          set_has_streamtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.AudioManager_setStreamMute_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.AudioManager_setStreamMute_Request)
  return false;
#undef DO_
}

void AudioManager_setStreamMute_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.AudioManager_setStreamMute_Request)
  // required int32 streamType = 1 [default = 3];
  if (has_streamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->streamtype(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.AudioManager_setStreamMute_Request)
}

::google::protobuf::uint8* AudioManager_setStreamMute_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.AudioManager_setStreamMute_Request)
  // required int32 streamType = 1 [default = 3];
  if (has_streamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->streamtype(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.AudioManager_setStreamMute_Request)
  return target;
}

int AudioManager_setStreamMute_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 streamType = 1 [default = 3];
    if (has_streamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streamtype());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioManager_setStreamMute_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioManager_setStreamMute_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioManager_setStreamMute_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioManager_setStreamMute_Request::MergeFrom(const AudioManager_setStreamMute_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streamtype()) {
      set_streamtype(from.streamtype());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioManager_setStreamMute_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioManager_setStreamMute_Request::CopyFrom(const AudioManager_setStreamMute_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioManager_setStreamMute_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AudioManager_setStreamMute_Request::Swap(AudioManager_setStreamMute_Request* other) {
  if (other != this) {
    std::swap(streamtype_, other->streamtype_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioManager_setStreamMute_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioManager_setStreamMute_Request_descriptor_;
  metadata.reflection = AudioManager_setStreamMute_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AudioManager_setStreamMute_Response::kIssuccessFieldNumber;
#endif  // !_MSC_VER

AudioManager_setStreamMute_Response::AudioManager_setStreamMute_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.AudioManager_setStreamMute_Response)
}

void AudioManager_setStreamMute_Response::InitAsDefaultInstance() {
}

AudioManager_setStreamMute_Response::AudioManager_setStreamMute_Response(const AudioManager_setStreamMute_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.AudioManager_setStreamMute_Response)
}

void AudioManager_setStreamMute_Response::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioManager_setStreamMute_Response::~AudioManager_setStreamMute_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.AudioManager_setStreamMute_Response)
  SharedDtor();
}

void AudioManager_setStreamMute_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AudioManager_setStreamMute_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioManager_setStreamMute_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioManager_setStreamMute_Response_descriptor_;
}

const AudioManager_setStreamMute_Response& AudioManager_setStreamMute_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

AudioManager_setStreamMute_Response* AudioManager_setStreamMute_Response::default_instance_ = NULL;

AudioManager_setStreamMute_Response* AudioManager_setStreamMute_Response::New() const {
  return new AudioManager_setStreamMute_Response;
}

void AudioManager_setStreamMute_Response::Clear() {
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioManager_setStreamMute_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.AudioManager_setStreamMute_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 issuccess = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.AudioManager_setStreamMute_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.AudioManager_setStreamMute_Response)
  return false;
#undef DO_
}

void AudioManager_setStreamMute_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.AudioManager_setStreamMute_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->issuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.AudioManager_setStreamMute_Response)
}

::google::protobuf::uint8* AudioManager_setStreamMute_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.AudioManager_setStreamMute_Response)
  // required int32 issuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->issuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.AudioManager_setStreamMute_Response)
  return target;
}

int AudioManager_setStreamMute_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 issuccess = 1;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issuccess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioManager_setStreamMute_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioManager_setStreamMute_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioManager_setStreamMute_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioManager_setStreamMute_Response::MergeFrom(const AudioManager_setStreamMute_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioManager_setStreamMute_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioManager_setStreamMute_Response::CopyFrom(const AudioManager_setStreamMute_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioManager_setStreamMute_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AudioManager_setStreamMute_Response::Swap(AudioManager_setStreamMute_Response* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioManager_setStreamMute_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioManager_setStreamMute_Response_descriptor_;
  metadata.reflection = AudioManager_setStreamMute_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int openURL_Request::kUrlFieldNumber;
#endif  // !_MSC_VER

openURL_Request::openURL_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.openURL_Request)
}

void openURL_Request::InitAsDefaultInstance() {
}

openURL_Request::openURL_Request(const openURL_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.openURL_Request)
}

void openURL_Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

openURL_Request::~openURL_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.openURL_Request)
  SharedDtor();
}

void openURL_Request::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void openURL_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* openURL_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return openURL_Request_descriptor_;
}

const openURL_Request& openURL_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

openURL_Request* openURL_Request::default_instance_ = NULL;

openURL_Request* openURL_Request::New() const {
  return new openURL_Request;
}

void openURL_Request::Clear() {
  if (has_url()) {
    if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      url_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool openURL_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.openURL_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.openURL_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.openURL_Request)
  return false;
#undef DO_
}

void openURL_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.openURL_Request)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.openURL_Request)
}

::google::protobuf::uint8* openURL_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.openURL_Request)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.openURL_Request)
  return target;
}

int openURL_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void openURL_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const openURL_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const openURL_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void openURL_Request::MergeFrom(const openURL_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void openURL_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void openURL_Request::CopyFrom(const openURL_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool openURL_Request::IsInitialized() const {

  return true;
}

void openURL_Request::Swap(openURL_Request* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata openURL_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = openURL_Request_descriptor_;
  metadata.reflection = openURL_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

openURL_Response::openURL_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.openURL_Response)
}

void openURL_Response::InitAsDefaultInstance() {
}

openURL_Response::openURL_Response(const openURL_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.openURL_Response)
}

void openURL_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

openURL_Response::~openURL_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.openURL_Response)
  SharedDtor();
}

void openURL_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void openURL_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* openURL_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return openURL_Response_descriptor_;
}

const openURL_Response& openURL_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

openURL_Response* openURL_Response::default_instance_ = NULL;

openURL_Response* openURL_Response::New() const {
  return new openURL_Response;
}

void openURL_Response::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool openURL_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.openURL_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.openURL_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.openURL_Response)
  return false;
#undef DO_
}

void openURL_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.openURL_Response)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.openURL_Response)
}

::google::protobuf::uint8* openURL_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.openURL_Response)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.openURL_Response)
  return target;
}

int openURL_Response::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void openURL_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const openURL_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const openURL_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void openURL_Response::MergeFrom(const openURL_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void openURL_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void openURL_Response::CopyFrom(const openURL_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool openURL_Response::IsInitialized() const {

  return true;
}

void openURL_Response::Swap(openURL_Response* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata openURL_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = openURL_Response_descriptor_;
  metadata.reflection = openURL_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

getMemoryInfo_Request::getMemoryInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.getMemoryInfo_Request)
}

void getMemoryInfo_Request::InitAsDefaultInstance() {
}

getMemoryInfo_Request::getMemoryInfo_Request(const getMemoryInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.getMemoryInfo_Request)
}

void getMemoryInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getMemoryInfo_Request::~getMemoryInfo_Request() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.getMemoryInfo_Request)
  SharedDtor();
}

void getMemoryInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void getMemoryInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getMemoryInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getMemoryInfo_Request_descriptor_;
}

const getMemoryInfo_Request& getMemoryInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

getMemoryInfo_Request* getMemoryInfo_Request::default_instance_ = NULL;

getMemoryInfo_Request* getMemoryInfo_Request::New() const {
  return new getMemoryInfo_Request;
}

void getMemoryInfo_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getMemoryInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.getMemoryInfo_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.getMemoryInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.getMemoryInfo_Request)
  return false;
#undef DO_
}

void getMemoryInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.getMemoryInfo_Request)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.getMemoryInfo_Request)
}

::google::protobuf::uint8* getMemoryInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.getMemoryInfo_Request)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.getMemoryInfo_Request)
  return target;
}

int getMemoryInfo_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getMemoryInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getMemoryInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getMemoryInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getMemoryInfo_Request::MergeFrom(const getMemoryInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getMemoryInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getMemoryInfo_Request::CopyFrom(const getMemoryInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMemoryInfo_Request::IsInitialized() const {

  return true;
}

void getMemoryInfo_Request::Swap(getMemoryInfo_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getMemoryInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getMemoryInfo_Request_descriptor_;
  metadata.reflection = getMemoryInfo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getMemoryInfo_Response::kAvailMemFieldNumber;
const int getMemoryInfo_Response::kTotalMemFieldNumber;
#endif  // !_MSC_VER

getMemoryInfo_Response::getMemoryInfo_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.cocos2dx.lua.getMemoryInfo_Response)
}

void getMemoryInfo_Response::InitAsDefaultInstance() {
}

getMemoryInfo_Response::getMemoryInfo_Response(const getMemoryInfo_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.cocos2dx.lua.getMemoryInfo_Response)
}

void getMemoryInfo_Response::SharedCtor() {
  _cached_size_ = 0;
  availmem_ = GOOGLE_LONGLONG(0);
  totalmem_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getMemoryInfo_Response::~getMemoryInfo_Response() {
  // @@protoc_insertion_point(destructor:org.cocos2dx.lua.getMemoryInfo_Response)
  SharedDtor();
}

void getMemoryInfo_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void getMemoryInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getMemoryInfo_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getMemoryInfo_Response_descriptor_;
}

const getMemoryInfo_Response& getMemoryInfo_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LocalBridgePB_2eproto();
  return *default_instance_;
}

getMemoryInfo_Response* getMemoryInfo_Response::default_instance_ = NULL;

getMemoryInfo_Response* getMemoryInfo_Response::New() const {
  return new getMemoryInfo_Response;
}

void getMemoryInfo_Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<getMemoryInfo_Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(availmem_, totalmem_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getMemoryInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.cocos2dx.lua.getMemoryInfo_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 availMem = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &availmem_)));
          set_has_availmem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_totalMem;
        break;
      }

      // required int64 totalMem = 2;
      case 2: {
        if (tag == 16) {
         parse_totalMem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalmem_)));
          set_has_totalmem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.cocos2dx.lua.getMemoryInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.cocos2dx.lua.getMemoryInfo_Response)
  return false;
#undef DO_
}

void getMemoryInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.cocos2dx.lua.getMemoryInfo_Response)
  // required int64 availMem = 1;
  if (has_availmem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->availmem(), output);
  }

  // required int64 totalMem = 2;
  if (has_totalmem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->totalmem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:org.cocos2dx.lua.getMemoryInfo_Response)
}

::google::protobuf::uint8* getMemoryInfo_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.cocos2dx.lua.getMemoryInfo_Response)
  // required int64 availMem = 1;
  if (has_availmem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->availmem(), target);
  }

  // required int64 totalMem = 2;
  if (has_totalmem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->totalmem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.cocos2dx.lua.getMemoryInfo_Response)
  return target;
}

int getMemoryInfo_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 availMem = 1;
    if (has_availmem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->availmem());
    }

    // required int64 totalMem = 2;
    if (has_totalmem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalmem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getMemoryInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getMemoryInfo_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getMemoryInfo_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getMemoryInfo_Response::MergeFrom(const getMemoryInfo_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_availmem()) {
      set_availmem(from.availmem());
    }
    if (from.has_totalmem()) {
      set_totalmem(from.totalmem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getMemoryInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getMemoryInfo_Response::CopyFrom(const getMemoryInfo_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMemoryInfo_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void getMemoryInfo_Response::Swap(getMemoryInfo_Response* other) {
  if (other != this) {
    std::swap(availmem_, other->availmem_);
    std::swap(totalmem_, other->totalmem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getMemoryInfo_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getMemoryInfo_Response_descriptor_;
  metadata.reflection = getMemoryInfo_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lua
}  // namespace cocos2dx
}  // namespace org

// @@protoc_insertion_point(global_scope)
