import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()

    aaptOptions {
        noCompress ".zip", ".pkg"
    }

    defaultConfig {
        applicationId "com.palaka.paracraft"
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode Integer.parseInt(VERSION_CODE)
        versionName VERSION_NAME

        externalNativeBuild {
            cmake {
                arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_STL=c++_shared", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE", "-DANDROID_STUDIO=TRUE", "-DNPLRUNTIME_OCE=FALSE"
                cppFlags "-frtti -fexceptions -fsigned-char -std=c++11"
            }
        }

//        ndk {
//            abiFilters = []
//            abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
//        }
    }

    ndkVersion='23.1.7779620'

    sourceSets.main {
        java.srcDir "java"
        res.srcDir "res"
//        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDirs = ["assets"]
    }

    externalNativeBuild {
        cmake {
            version "3.22.0-rc2"
            path "../../../CMakeLists.txt"
        }
    }

    signingConfigs {
       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
                enableV1Signing true
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }

            manifestPlaceholders  = [ "libname" : "Paracraft" ]
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }

            manifestPlaceholders  = [ "libname" : "Paracraftd" ]
        }
    }

    flavorDimensions "company", "abi"

    productFlavors {
        tatfook {
            applicationId "com.tatfook.paracraft"
            manifestPlaceholders = [CHANNEL_VALUE: "tatfook"]
            resValue "string", "app_name", "帕拉卡"
            resValue "drawable", "app_icon", "@drawable/ic_launcher"
            dimension "company"
        }

        palaka {
            manifestPlaceholders = [CHANNEL_VALUE: "palaka"]
            resValue "string", "app_name", "帕拉卡"
            resValue "drawable", "app_icon", "@drawable/ic_launcher"
            dimension "company"
        }

        //应用宝
        yingyongbao {
            manifestPlaceholders = [CHANNEL_VALUE: "yingyongbao"]
            resValue "string", "app_name", "帕拉卡3D虚拟社区学习软件"
            resValue "drawable", "app_icon", "@drawable/ic_launcher"
            dimension "company"
        }

        //小米
        xiaomi {
            manifestPlaceholders = [CHANNEL_VALUE: "xiaomi"]
            resValue "string", "app_name", "帕拉卡3D虚拟社区学习软件"
            resValue "drawable", "app_icon", "@drawable/ic_launcher"
            dimension "company"
        }

        //华为
        huawei {
            manifestPlaceholders = [CHANNEL_VALUE: "huawei"]
            resValue "string", "app_name", "帕拉卡3D虚拟社区学习软件"
            resValue "drawable", "app_icon", "@drawable/ic_launcher"
            dimension "company"
        }

        //OPPO
        oppo {
            manifestPlaceholders = [CHANNEL_VALUE: "oppo"]
            resValue "string", "app_name", "帕拉卡"
            resValue "drawable", "app_icon", "@drawable/ic_launcher"
            dimension "company"
        }

        //vivo
        vivo {
            manifestPlaceholders = [CHANNEL_VALUE: "vivo"]
            resValue "string", "app_name", "帕拉卡"
            resValue "drawable", "app_icon", "@drawable/ic_launcher"
            dimension "company"
        }

        //荣耀
        honor {
            manifestPlaceholders = [CHANNEL_VALUE: "honor"]
            resValue "string", "app_name", "帕拉卡"
            resValue "drawable", "app_icon", "@drawable/ic_launcher"
            dimension "company"
        }

        //中兴
        zhongxing {
            manifestPlaceholders = [CHANNEL_VALUE: "zhongxing"]
            resValue "string", "app_name", "帕拉卡"
            resValue "drawable", "app_icon", "@drawable/ic_launcher"
            dimension "company"
        }

        //360
        qihu360 {
            manifestPlaceholders = [CHANNEL_VALUE: "qihu360"]
            resValue "string", "app_name", "帕拉卡"
            resValue "drawable", "app_icon", "@drawable/ic_launcher"
            dimension "company"
        }

        //百度
        baidu {
            manifestPlaceholders = [CHANNEL_VALUE: "baidu"]
            resValue "string", "app_name", "帕拉卡"
            resValue "drawable", "app_icon", "@drawable/ic_launcher"
            dimension "company"
        }

        //阿里应用分发开放平台
        ali9you {
            manifestPlaceholders = [CHANNEL_VALUE: "ali9you"]
            resValue "string", "app_name", "帕拉卡"
            resValue "drawable", "app_icon", "@drawable/ic_launcher"
            dimension "company"
        }

        /* papa adventure */
        papaPalaka {
            applicationId "cn.palaka.papaadventure"
            manifestPlaceholders = [CHANNEL_VALUE: "palaka"]
            resValue "string", "app_name", "帕帕奇遇记"
            resValue "drawable", "app_icon", "@drawable/icon_papa"
            dimension "company"
        }

        papaTatfook {
            applicationId "cn.palaka.papaadventure"
            manifestPlaceholders = [CHANNEL_VALUE: "tatfook"]
            resValue "string", "app_name", "帕帕奇遇记"
            resValue "drawable", "app_icon", "@drawable/icon_papa"
            dimension "company"
        }

        //应用宝
        papaYingyongbao {
            applicationId "cn.palaka.papaadventure"
            manifestPlaceholders = [CHANNEL_VALUE: "yingyongbao"]
            resValue "string", "app_name", "帕帕奇遇记"
            resValue "drawable", "app_icon", "@drawable/icon_papa"
            dimension "company"
        }

        //小米
        papaXiaomi {
            applicationId "cn.palaka.papaadventure"
            manifestPlaceholders = [CHANNEL_VALUE: "xiaomi"]
            resValue "string", "app_name", "帕帕奇遇记"
            resValue "drawable", "app_icon", "@drawable/icon_papa"
            dimension "company"
        }

        //华为
        papaHuawei {
            applicationId "cn.palaka.papaadventure"
            manifestPlaceholders = [CHANNEL_VALUE: "huawei"]
            resValue "string", "app_name", "帕帕奇遇记"
            resValue "drawable", "app_icon", "@drawable/icon_papa"
            dimension "company"
        }

        //OPPO
        papaOppo {
            applicationId "cn.palaka.papaadventure"
            manifestPlaceholders = [CHANNEL_VALUE: "oppo"]
            resValue "string", "app_name", "帕帕奇遇记"
            resValue "drawable", "app_icon", "@drawable/icon_papa"
            dimension "company"
        }

        //vivo
        papaVivo {
            applicationId "cn.palaka.papaadventure"
            manifestPlaceholders = [CHANNEL_VALUE: "vivo"]
            resValue "string", "app_name", "帕帕奇遇记"
            resValue "drawable", "app_icon", "@drawable/icon_papa"
            dimension "company"
        }

        //荣耀
        papaHonor {
            applicationId "cn.palaka.papaadventure"
            manifestPlaceholders = [CHANNEL_VALUE: "honor"]
            resValue "string", "app_name", "帕帕奇遇记"
            resValue "drawable", "app_icon", "@drawable/icon_papa"
            dimension "company"
        }

        //中兴
        papaZhongxing {
            applicationId "cn.palaka.papaadventure"
            manifestPlaceholders = [CHANNEL_VALUE: "zhongxing"]
            resValue "string", "app_name", "帕帕奇遇记"
            resValue "drawable", "app_icon", "@drawable/icon_papa"
            dimension "company"
        }

        //360
        papaQihu360 {
            applicationId "cn.palaka.papaadventure"
            manifestPlaceholders = [CHANNEL_VALUE: "qihu360"]
            resValue "string", "app_name", "帕帕奇遇记"
            resValue "drawable", "app_icon", "@drawable/icon_papa"
            dimension "company"
        }

        /* ABI */
        abiDefault {
            ndk {
                abiFilters "arm64-v8a", "armeabi-v7a"
            }
            dimension "abi"
        }

        arm64V8a {
            ndk {
                abiFilters "arm64-v8a"
            }
            dimension "abi"
        }

        armeabiV7a {
            ndk {
                abiFilters "armeabi-v7a"
            }
            dimension "abi"
        }

        // productFlavors.all { flavor ->
        //     flavor.dimension "company"
        // }
    }

    configurations {
        ftpAntTask
    }
}

String taskReqStr = gradle.getStartParameter().getTaskRequests().toString()
Pattern pattern = Pattern.compile("assembleDebug")
Matcher matcher = pattern.matcher(taskReqStr)
File outApkFile = null
String outApkFlavor=""
Boolean isDebug = false

if (matcher.find()) {
    isDebug = true
    println "DEBUG MODE"
}

android.applicationVariants.all { variant ->
    if (isDebug) {
        delete "${buildDir}/intermediates/assets/debug/mergeDebugAssets"
        Task mergeAssetsTask = tasks.findByName("mergeDebugAssets")

        mergeAssetsTask.dependsOn().doLast {
            copy {
                from "assets"
                into "${buildDir}/intermediates/assets/debug/mergeDebugAssets"
            }

            if (System.properties["os.name"].toLowerCase().contains("windows")) {
                if (file(System.properties["user.home"] + "\\ParacraftAndroidDev\\Dev.bat").exists()) {
                    exec {
                        workingDir System.properties['user.home'] + "\\ParacraftAndroidDev"
                        commandLine "cmd", "/c", "Dev.bat ${buildDir}\\intermediates\\assets\\debug\\mergeDebugAssets"
                    }
                }
            } else {
                if (file(System.properties["user.home"] + "/ParacraftAndroidDev/Dev.sh").exists()) {
                    exec {
                        workingDir System.properties['user.home'] + "/ParacraftAndroidDev"
                        commandLine "sh", "./Dev.sh", "${buildDir}/intermediates/merged_assets/${variant.dirName}/out/"
                    }
                }
            }
        }
    }

    variant.outputs.all {output ->
        if (outputFileName.contains("release")) {
            String buildDate = new Date().format('(yyyy-MM-dd-HH.mm.ss)')
            String flavor = variant.name.replaceFirst("Release","")
            outputFileName = "Paracraft_${variant.versionName}_${flavor}_${buildDate}.apk"

            Task assembleTask = tasks.findByName("assemble"+variant.name.capitalize());

            assembleTask.dependsOn().doLast {
                println("variant.applicationId:" + variant.applicationId)
                println("rootProject.buildDir:" + rootProject.rootDir)
                println("project.buildDir:" + project.projectDir)

                outApkFile = output.outputFile
                outApkFlavor = flavor

                ftpUpload(outApkFlavor, outApkFile)

//                println "生成apk"
//                println outApkFlavor
//                println outApkFile
//                String keyStorePath=""+project.projectDir+"/"+RELEASE_STORE_FILE
//                String apkSignerJar=""+project.projectDir+"/key/apksigner.jar"
//                String storePass = RELEASE_STORE_PASSWORD
//                String alias = RELEASE_KEY_ALIAS
//                String keyPass = RELEASE_KEY_PASSWORD
//                String signCmd = String.format("java -jar %s  sign --ks %s --ks-pass pass:%s --ks-key-alias %s --key-pass pass:%s %s",apkSignerJar,keyStorePath,storePass,alias,keyPass,outApkFile)

//                if(!flavor.equals("vivo")){//因为vivo的已经用这个无签名的上架过了
//                    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//                        execute('cmd', '/c', signCmd)
//                    } else {
//                        execute('sh', '-c', signCmd)
//                    }
//                }
            }
        }
    }
}

void execute(String... args) {
    println "Executing $args...";
    def proc = args.execute();
    proc.in.eachLine {line -> println line}
    proc.err.eachLine {line -> println 'ERROR: ' + line}
    proc.waitFor()
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'org.jetbrains:annotations:17.0.0'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    implementation 'com.github.smarxpan:NotchScreenTool:0.0.1'

    implementation ('com.shuyu:GSYVideoPlayer:8.1.2')

    ftpAntTask("org.apache.ant:ant-commons-net:1.8.4") {
        module("commons-net:commons-net:1.4.1")    {
            dependencies "oro:oro:2.0.8:jar"
        }
    }
}

repositories {
    mavenCentral()
}
